---
title: '2019#4 Readings of the week'
date: 2019-02-05T22:56:00.002+01:00
draft: false
tags : [ReadingsOfTheWeek, Spark, Kubernetes, Python, Scala, Rust, Maths]
dropcap: true
affiliate: true
minimap: true
featured_image: "Elmo.gif"
---

Sorry for the delay, Sunday was my birthday (also, [Elmo’s](https://en.wikipedia.org/wiki/Elmo), and [The Day The Music Died](https://www.amazon.com/American-Pie-LP-Don-McLean/dp/B01D0AKZJC/ref=as_li_ss_tl?ie=UTF8&linkCode=ll1&tag=rbersblog-20&linkId=0d1c561dac803bc28d1f40bfa58c7841) as well) and I spent the day without access to a computer.

<!--more-->

{{< figure src="Elmo.gif" class="fig-wide" caption="">}}

Software/data engineering, psychology, formal systems. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the [tag here](https://www.mostlymaths.net/search/label/ReadingsOfTheWeek) . You can also get these as a weekly newsletter by subscribing [here](http://eepurl.com/geFw7P).

[The Art of Decision-Making](https://www.newyorker.com/magazine/2019/01/21/the-art-of-decision-making)
------------------------------------------------------------------------------------------------------

An overview of (what looks like) pop-sci books on decision making. There are some interesting ideas, especially regarding aspiration vs ambition.

[The Soviet license plate game and Kolmogorov complexity](https://www.johndcook.com/blog/2019/02/02/landau-kolmogorov/)
-----------------------------------------------------------------------------------------------------------------------

Excellent post as usual by [John D. Cook](https://twitter.com/JohnDCook) mixing something interesting with a bit of mathematical analysis (which is also obviously interesting). Also makes Soviet license plates sound more interesting than they should.

[Spark surprises for the uninitiated](https://blog.godatadriven.com/spark-beware)
---------------------------------------------------------------------------------

I’ve known about the pain of non-deterministic Spark operators (went down some of the codebase rabbit holes while investigating a weird predicate push down rule I suspect is conceptually wrong). This post will actually get you scared: how do you test _this_?

[Regrettable Code, Episode 1](https://medium.com/@jeremy.noring/regrettable-code-episode-1-767dc1b92bd1)
--------------------------------------------------------------------------------------------------------

A history about profiling a Python application and the accumulation of small decisions that lead to a large performance bottleneck.

[High-Performance in Python with Zero-Copy and the Buffer Protocol](https://julien.danjou.info/high-performance-in-python-with-zero-copy-and-the-buffer-protocol/)
------------------------------------------------------------------------------------------------------------------------------------------------------------------

I wasn’t aware of the buffer class/protocol in Python, but it looks like something I should be aware of.

[Simulating blobs of fluid](https://peeke.nl/simulating-blobs-of-fluid)
-----------------------------------------------------------------------

A long long time ago, I can still remember, I loved creating visualizations and animations. I still do, I just don’t have the time. Otherwise, I’d implement this.

[Ask HN: Top three questions for a startup before accepting a job offer?](https://news.ycombinator.com/item?id=19048108)
------------------------------------------------------------------------------------------------------------------------

Not the first time a similar question has been asked in Hacker News, but it’s good to keep a few of this stored for future reference.

[Ray: Application-level scheduling with custom resources](https://rise.cs.berkeley.edu/blog/ray-scheduling)
-----------------------------------------------------------------------------------------------------------

[Dask](https://dask.org/) and [Ray](https://github.com/ray-project/ray) are next in my list of stuff I want to try. I love Spark, and love Scala, but the more tools in my belt, the better an engineer I can be.

[Rust on iOS](https://medium.com/visly/rust-on-ios-39f799b3c1dd)
----------------------------------------------------------------

An updated tutorial on using a Rust library in a Swift application for iOS. I have tried, it actually works. I need a time machine or something.

[Thread Pool Best Practices with ZIO](http://degoes.net/articles/zio-threads)
-----------------------------------------------------------------------------

The idea reminds me of how the Go (Golang) scheduler handles the mapping between goroutines and OS threads.

[The Kubernetes Scheduler](https://medium.com/@dominik.tornow/the-kubernetes-scheduler-cd429abac02f)
----------------------------------------------------------------------------------------------------

An _awesome_ post about the Kubernetes scheduler and its internal workings, with partial TLA+ specs of the moving pieces. It may be a bit over-the-top if you don’t know a lot about K8s internals or any TLA+, but if you know a bit of two, you’re in for a treat.

[Shadows used to peer around corners](https://www.nature.com/articles/d41586-019-00174-1)
-----------------------------------------------------------------------------------------

Technique to peek behind corners from a _still picture_.

[Queueing theory: The science of waiting in line](https://www.johndcook.com/blog/2019/01/23/queueing/)
------------------------------------------------------------------------------------------------------

Another one by John (I think he has won the readings of this week? There’s no prize, though). I’m a mathematician by training, so I didn’t get to study some of the cool (and, according to CS major friends, boring) stuff I love to hear about, like... queuing theory.

[Newsletter](http://eepurl.com/geFw7P)?
---------------------------------------

These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I’m subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking [here](http://eepurl.com/geFw7P).
