---
title: '2019#2 Readings of the week'
date: 2019-01-20T16:32:00.001+01:00
draft: false
tags : [ReadingsOfTheWeek, Go, Basketball, Python, Scala, Languages, Rust, NLP, Maths, TLA+]
dropcap: true
minimap: true
affiliate: true
---

Software/data engineering, languages, writing. Expect a similar wide range in the future as well. You can check all weekly readings by checking the [tag here](https://www.mostlymaths.net/search/label/ReadingsOfTheWeek).

<!--more-->

[Goodbye, Mid-Range Shot](https://flowingdata.com/2019/01/15/goodbye-mid-range-shot/)
-------------------------------------------------------------------------------------

I love a good data visualization, for a long while, long, long time ago I was a paid subscriber to Nathan Yau‚Äôs _Flowing Data_. As usual, a short and interesting visualization where we can discover something about the world.

[Speed up your Python using Rust](https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/)
---------------------------------------------------------------------------------------------------------

I need to try this ASAP. Write dylibs with Rust that you can use straight from Python (via the cpython crate).

[Build Your Own Shell using Rust](https://www.joshmcguigan.com/blog/build-your-own-shell-rust/)
-----------------------------------------------------------------------------------------------

I‚Äôm a lot into Rust lately, and here you can find out how to call subprocesses, how to handle errors, awaiting... It has a little bit of everything, even if you don‚Äôt intend to write a shell.

[Introduction to TLA+ Model Checking in the Command Line](https://medium.com/@bellmar/introduction-to-tla-model-checking-in-the-command-line-c6871700a6a2)
----------------------------------------------------------------------------------------------------------------------------------------------------------

If you‚Äôve been following my twitter or blog, you‚Äôll know I‚Äôm really liking TLA+ for formal verification. It‚Äôs not like I have a lot to verify day-to-day as a big data engineer, but as soon as there are ‚Äúbig data‚Äù microservices around, TLA+ rocks to confirm all the Lego pieces fit as I think they fit. Cutting the story short, TLA+ runs on the TLC Toolbox, which is a Java application which is not super-modern-looking. If you‚Äôd rather use Sublime/Atom/Emacs/Vim/ed using TLC from the command line is possible and not hard. Take heed of [Ron Pressler's comments on Reddit](https://www.reddit.com/r/tlaplus/comments/ah86sm/introduction_to_tla_model_checking_in_the_command/eeiycdg/?st=jr5158xu&sh=161767d5), though.

[From Data Types to Session Types: A Basis for Concurrency and Distribution](http://groups.inf.ed.ac.uk/abcd/session-implementations.html)
------------------------------------------------------------------------------------------------------------------------------------------

The concept of _session types_ seems very interesting. In a sense, Rust‚Äôs ownership/lifetime concept can model part of what session types cover.

[How the Artificial Intelligence Program AlphaZero Mastered Its Games](https://www.newyorker.com/science/elements/how-the-artificial-intelligence-program-alphazero-mastered-its-games)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

I‚Äôve been playing go, on and off (right now is _on_) for almost half of my life. Although I knew the basics already (I know some deep learning y‚Äôknow), this is a good write up anybody could understand.

[High-Performance Functional Programming Through Effect Rotation](http://degoes.net/articles/rotating-effects)
--------------------------------------------------------------------------------------------------------------

I try to stay away from the more crazy levels of category theory inspired programming (as in, I use 0 of it and have no huge interest), but this post (Scala) about how to optimize stacked monad transformers was very interesting.

[SoftwareMill blog: Free and tagless compared - how not to commit to a monad too early](https://softwaremill.com/free-tagless-compared-how-not-to-commit-to-monad-too-early/)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

I heard Adam talk about Free & Tagless at the Scala Exchange 2017 (IIRC), and it was one of the clearest expositions I had seen. This post is probably another, also from him. Totally recommended, with the bonus of getting to understand tagless encoding for ‚Äúfree‚Äù

[Using spaced repetition systems to see through a piece of mathematics](http://cognitivemedium.com/srs-mathematics)
-------------------------------------------------------------------------------------------------------------------

I‚Äôm a big fan of spaced repetition in general and Anki in particular. Michaeel (Nielsen) uses it regularly for deeper understanding. If you want more ‚Äúsocial proof‚Äù, [Derek Sivers](https://sivers.org/srs) and [Gwern Branwen](https://www.gwern.net/Spaced-repetition) also recommend it dearly.

[The three-page paper that shook philosophy‚Äîa hacker‚Äôs perspective](http://jsomers.net/blog/gettiers)
-----------------------------------------------------------------------------------------------------

When you can put a name on something, it becomes easier to handle. Gettier cases are such. Go read this.

[Methods for Array Initialization in Rust](https://www.joshmcguigan.com/blog/array-initialization-rust/)
--------------------------------------------------------------------------------------------------------

Just when I thought Scala offered too many ways for doing a thing, there comes Rust.

[Experience report: organising a conference](https://medium.com/@cbirchall/experience-report-organising-a-conference-f1a1c6218399)
----------------------------------------------------------------------------------------------------------------------------------

I couldn‚Äôt attend Chris‚Äô [LambdAle](https://lambdale.org/) last year (I will try this), but having helped organize [PyData Barcelona](https://pydata.org/barcelona2017/), all he mentions are very valid concerns and tips.

[Automatic categorization of text is a core tool now](https://abe-winter.github.io/2019/01/01/nlp-18.html)
----------------------------------------------------------------------------------------------------------

It sounds obvious, but getting obvious staring you at the face without realizing is a problem.

[Rust Performance Pitfalls](https://llogiq.github.io/2017/06/01/perf-pitfalls.html)
-----------------------------------------------------------------------------------

I‚Äôm still far from seeing performance issues in any Rust I have written (mainly because it‚Äôs a very small amount) but it‚Äôs good to know where I can stumble.

[The Puzzle of Proto-Elamite](https://www.historytoday.com/mark-ronan/puzzle-proto-elamite)
-------------------------------------------------------------------------------------------

I love language history. If you do so too, you‚Äôll enjoy this.

[Understanding Rust Lifetimes](https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa)
---------------------------------------------------------------------------------------------------------

Nailing this is the main issue with Rust. This is a good introduction to lifetimes.

üìö [The Haiku Handbook](https://amzn.to/2W2LppK)
------------------------------------------------

_Note this is an Amazon affiliate link._I have always liked Haiku (poems, the operating system is ok), and wanted to have a more formal model on them, to be able to write some someday. [This](https://amzn.to/2W2LppK) is a very well-written book that reads quickly (to be fair, I skipped the chapter on _Teaching_)

[Newsletter](http://eepurl.com/geFw7P)?
---------------------------------------

I‚Äôm considering converting this into a weekly newsletter in addition to a blog post. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking [here](http://eepurl.com/geFw7P) and if enough people join I‚Äôll send these every Sunday night or so.
