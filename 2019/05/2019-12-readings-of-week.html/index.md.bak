---
title: '2019#12 Readings of the week'
date: 2019-05-13T00:31:00.000+02:00
draft: false
tags : [ReadingsOfTheWeek, Python, Scala, Rust, ZIO, Big data]
featured_image: "zsolt-palatinus-736229-unsplash.jpg"
affiliate: true
minimap: true
dropcap: true
---

Big data and data engineering, metallurgy, Rust (not the metallurgy-related rust). Expect a similar wide range in the future as well. You can check all my weekly readings by checking the [tag here](https://www.mostlymaths.net/search/label/ReadingsOfTheWeek) . You can also get these as a weekly newsletter by subscribing [here](http://eepurl.com/geFw7P).

<!--more-->

{{< figure src="zsolt-palatinus-736229-unsplash.jpg" class="fig-wide" caption="Photo byÂ [Zsolt Palatinus](https://unsplash.com/photos/pEK3AbP8wa4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)Â onÂ [Unsplash](https://unsplash.com/search/photos/rust?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)">}}

[Testing Incrementally with ZIO Environment](http://degoes.net/articles/testable-zio)
-------------------------------------------------------------------------------------

Iâ€™ve been reading a lot about ZIO lately, even to the point of writing a few simple thinks with the help of a more advanced Scala friend. As Iâ€™ve mentioned before, it looks solid

[Medieval Africans Had a Unique Process for Purifying Gold With Glass](https://www.atlasobscura.com/articles/medieval-african-gold)
-----------------------------------------------------------------------------------------------------------------------------------

No plans on smelting anything soon, but this was interesting.

[Rust Runtime](https://blog.yoshuawuyts.com/runtime/)
-----------------------------------------------------

The proposed approaches for async-await in Rust are shaping up.

[Moving from Ruby to Rust (at Deliveroo)](https://deliveroo.engineering/2019/02/14/moving-from-ruby-to-rust.html)
-----------------------------------------------------------------------------------------------------------------

It should surprise no-one, except maybe hardcore rubyists that moving from Ruby to Rust yielded terrific speed-ups. Something similar should happen in Python, though.

[Zero-cost futures in Rust](https://aturon.github.io/blog/2016/08/11/futures/)
------------------------------------------------------------------------------

One of the core tenets of Rust is having zero-cost abstractions (as in, being as close to manually written). Here you can read how futures fit that goal.

[A quick look at trait objects in Rust](https://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html)
-------------------------------------------------------------------------------------------------------------------------

Traits will be familiar to Scala or even Go or Java developers, but there are a few gotchas/differences you need to be aware.

[Druid Design](http://druid.io/docs/latest/design/index.html)
-------------------------------------------------------------

A friend of mine has used Apache Druid before, and has been really happy with its performance, so Iâ€™ve been looking into possible use cases to road-test it.

[Make your own GeoIP API (in Python)](https://www.ecalamia.com/blog/make-your-own-geoip-api/)
---------------------------------------------------------------------------------------------

Iâ€™ve linked before to GeoIP approaches, this one is interesting as long as you only want country-level resolution, I usually need city or better.

[An in-depth look at the HBase architecture](https://mapr.com/blog/in-depth-look-hbase-architecture/)
-----------------------------------------------------------------------------------------------------

Similarly to Druid, Iâ€™ve been checking several things to speed up some areas. Apache HBase might be one of them, and I wanted to see how it works under the hood, I love these details

ðŸŽ¥ [ZIO Schedule](https://www.youtube.com/watch?v=onQSHiafAY8)
--------------------------------------------------------------

As mentioned above, ZIO is shaping up nicely, and the scheduling helpers presented here are one of the selling points, depending on what you do.

ðŸŽ¥ [Pure functional programming in Excel](https://m.youtube.com/watch?v=0yKf8TrLUOw)
------------------------------------------------------------------------------------

Duh... but... to be fair... there is a point in here.

ðŸŽ¥ [Gradual typing of production applications](https://www.youtube.com/watch?v=zKre4DKAB30)
-------------------------------------------------------------------------------------------

Incremental approach suggestions for typing in Python, at Facebook (Instagram to be precise)

ðŸŽ¥ [Effects as Data](https://www.youtube.com/watch?v=6EdXaWfoslc)
-----------------------------------------------------------------

Everything here should sound familiar if you are anything into functional programming

[Newsletter](http://eepurl.com/geFw7P)?
---------------------------------------

These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters Iâ€™m subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking [here](http://eepurl.com/geFw7P).
