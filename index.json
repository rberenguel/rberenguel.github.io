[{"categories":null,"contents":"If you\u0026rsquo;ve been in this blog before, you may wonder if it looks different or is just your imagination. Fear not! You are not going crazy, this blag has changed.\nAfter something like 14 years using Blogger as a hosting platform, I have moved to hosting mostlymaths.net in Github pages, using hugo as a static site generator.\nSome details  I used a converter offered in Hugo\u0026rsquo;s webpage, that could convert from Blogger export XML to Markdown for hugo I settled on a customised Ananke theme. It\u0026rsquo;s a fully featured theme, and Hugo\u0026rsquo;s templating is easy to pick up I just had to change some DNS settings and have patience after this  Pain points  I had 700+ blog posts. After a hardcore culling, I have around 290. Still, markdown needs cleanup, images need to be moved from Blogger to Github‚Ä¶ There\u0026rsquo;s still a lot left (I have converted around 90 posts, the most popular or new) It was time consuming, since I had to get many things right ASAP (RSS, Google Analytics, bring back some of the Amazon ads, layout, design, etc)  Non-pain points  Hugo\u0026rsquo;s templating is easy to follow. It was a relative breeze to make it look like it looks now Search was built using this Gist and fuse.js It works awesomely well  Niceties  Having left Blogger means I can now add whatever crazy ~shit~ Javascript or CSS I want:  I have a minimap in long posts (hover around the left area, although that blog post is so long it makes the minimap cut off) Dropcaps from Byrne\u0026rsquo;s Euclid by Nicholas Reougeux  MathJax where needed Haven\u0026rsquo;t yet, but now I will be able to have fun again with D3.js and post my examples directly  Having standalone static pages is now also easier. So far, there are none, but hey Writing Markdown is ‚ù§Ô∏è  Conclusion  I should have done this a year ago, at least. It\u0026rsquo;s so much easier to handle now ","permalink":"https://mostlymaths.net/2019/09/blog-moved-to-hugo.html/","tags":[],"title":"Blog Moved"},{"categories":null,"contents":"I have been on quite the hiatus, making this more of a readings of the month edition. Sorry!\nLast one was published/sent a bit more than a month ago (and my reading list is now at 347 pending), but there is a reason. The reason has been a mix of other side stuff taking over and a big project related to my blog: I have moved (after something like 14 years) from Blogger.com to hosting it in GitHub pages as a static site (generated with hugo). I‚Äôll write about the process in due time, but the move required quite a lot of work (tweaking templates, fixing the most visited and most recent posts..) and I‚Äôm not even done (only 60 out of the 300 or so posts I have kept out of 700 are optimized for the new layout).\n Photo by üá®üá≠ Claudio Schwarz | @purzlbaum on Unsplash\n  NOTE: Data, history, productivity. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nMinimalist Journaling: A Fun and Effective Tool for Tremendous Habit Change A graphical way of representing anything? Sign me up.\nWhat Really Happened in the UK Blackouts? I was very lucky: I was at the other side of my LGW-BCN when this happened.\nGlobal heating: ancient plants set to reproduce in UK after 60m years We are doomed.\nLoops in Python - comparison and performance It may not tell anything new to seasoned Pythonistas, but it‚Äôs a good reference to hand down to people asking.\nGet your work recognized: write a brag document It‚Äôs not bragging if it‚Äôs true.\nEvery productivity thought I‚Äôve ever had, as concisely as possible I specially like the idea of ‚Äúclock-face pomodori‚Äù\nAlone in the Dark I love these historical analysis of classical games from my youth.\nWelcome to the world of Statecharts As above, graphical ways of representing stuff can be empowering (you‚Äôve heard me say Wardley mapping before, right?\nScientists Are Discovering Long-Lost Rules for Ancient Board Games This may fix the many rules for Ludum Latrunculorum or decide which is the best version of the tablut/tafl family.\nBehind Nate Silver‚Äôs war with The New York Times I don‚Äôt read The NY Times (paywall), but this was interesting.\nWhy speaking to yourself in the third person makes you wiser Ruben agrees\nFinally, China manufactures a ballpoint pen all by itself Can‚Äôt deny this was surprising. Won‚Äôt spoil why.\nHow to assess the quality of garments: A Beginner\u0026rsquo;s Guide My past life as a bespoke shoemaker finds this interesting.\nWhen and why to use GraphQL I have never dared close to GraphQL, and the when and whys here explain my fears. So, done rightly is not to fear.\nExperience: I‚Äôm a world-class whistler And not the referee kind.\nHow to make fresh soba noodles at home I won‚Äôt ever do this, but as a read, fascinating.\nFunctional Programming? Don‚Äôt Even Bother, It‚Äôs a Silly Toy Don‚Äôt miss the tone.\nTDD on Punch Cards Well, it wasn‚Äôt ‚Äúour‚Äù TDD, but it had T and D.\nThe Codeless Code: a bridge to nowhere ü§£\nBlazingSQL is Now Open Source Duh, another interesting tool\u0026hellip;\nTalking to the Scientists Who Made Bread with Ancient Egyptian Yeast I want to taste it, yes.\nSo, Um, How Do You, Like, Stop Using Filler Words? I need help with this.\nAll the best engineering advice I stole from non-technical people It‚Äôs not like non-technical people are less knowledgeable.\nSpeed matters: Why working quickly is more important than it seems It‚Äôs just a tradeoff.\nOptimized Docker builds for Haskell Stack Worth keeping in mind if I ever get any Haskell written.\nHow to Keep a Zibaldone Just a commonplace book.\nThe Lost Art of Lacing Cable Neat!\nüìö Ultralearning Techniques for self-learning at a faster pace. Don‚Äôt think I picked any ideas I was not familiar with, but it‚Äôs a good book.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/09/201923-readings-of-the-week.html/","tags":["Data","History","Functional Programming","Maths","Productivity","Music","ReadingsOfTheWeek"],"title":"2019#23 Readings of the Week"},{"categories":null,"contents":"I have been pretty busy lately, and although reading doesn‚Äôt stop, my writing sometimes takes a hiatus.\nData engineering, adtech, history, apple. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Benjamin Wong¬†on¬†Unsplash\n  The Launch And it‚Äôs not about a technology product.\nHow I practice at what I do Working on improvement is a full time job, that you usually need to take during your free time.\nThe Good Employee, a story about how you can explain modern companies with graph theory This was a weird read. But now I wonder if I can use Prim‚Äôs algorithm to improve my decision making?\nThe Washington Post is preparing for post-cookie ad targeting The cookiepocalypse is coming, and if you work in adtech you should be thinking about it.\nDry Stone Walls ‚Äì Principles of structurally sound construction Around my hometown (L‚ÄôArbo√ß) there‚Äôs an abundance of dry stone wall huts, presumedly from around 18th century. Now I know how to build one.\nBook Review: Impro by Keith Johnstone You may be aware that I read anything that can improve me in any way. So, Impro is now on my currently reading.\nIntroducing Dagster Anything that is not Airflow is a win on my book, but I‚Äôm not super-thrilled about how Dagster works either.\nHere Dragons Abound: Iskloft Mountain Style I have always loved maps and map-drawing, so how to draw fantasy maps is an interesting enough subject on its own.\nWhy Category Theory Matters I‚Äôm ramping up my category theory knowledge lately (and spreading through to sheaves and maybe schemes).\nRoger Federer as Religious Experience We‚Äôll miss him (and Rafa Nadal, and Novak Djokovic) when he retires.\nDid Functional Programming get it wrong? - Noteworthy I‚Äôve been thinking about ‚Äúspreadsheets‚Äù as in ‚Äúdata and code mixed‚Äù lately, specially in terms of category theory, so this post was\u0026hellip; close to mind-reading.\nIf you‚Äôre playing EVE online you basically already have an MBA I‚Äôve never been drawn to that game, but given the amount of hours some people give it, it makes total sense.\nHaskell - An Experience Summary As part of my categorification, I‚Äôm back again at learning Haskell (using Haskell Programming from First Principles). So I‚Äôm reading anything reasonably non-technical about Haskell.\n\u0026lsquo;These kids are ticking time bombs\u0026rsquo; \u0026ndash; The threat of youth basketball The amount of bone and tissue stress a young basketball player has gone through is astonishing.\n‚ÄòI don‚Äôt see jeans in my future‚Äô: the people who wear complete historical dress ‚Äì every day I like that 30s look. I even have a similar hat.\nPreserving Laptop Stickers on MacBooks - Graham Stevens Seems too late for my batch of stickers, but I always pick 2 of a kind if possible, now I‚Äôm thinking where should I show the duplicates.\nFor 40 Years, Crashing Trains Was One of America‚Äôs Favourite Pastimes Watching things explode has always been fun?\nPearls Before Breakfast Would you recognize genius if it was in front of you?\nüìö Finite and Infinite Games I‚Äôve seen many people recommend this book\u0026hellip; And I didn‚Äôt get it. It was interesting, but not so much as I expected.\nüé• Approaching the Yoneda Lemma Some ways of seeing the Yoneda lemma. I‚Äôm still trying to wrap my head categorically, without forgetting anything. I want to be free.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/07/2019202122-readings-of-week.html/","tags":["Data","History","Basketball","Scala","Big data","Functional Programming","Maths","Drawing","Productivity","Haskell","Adtech","ReadingsOfTheWeek"],"title":"2019#20,21,22 Readings of the week"},{"categories":null,"contents":"History, haskell, Wardley mapping, functional programming. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here. You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Chris Marquardt¬†on¬†Unsplash\n  When Pepsi Had a Navy From the title, I thought it was related to the ‚ÄúSugar Wars‚Äù, but the reality is weirder.\nYour Work Peak Is Earlier Than You Think Mildly depressing. A quote I found interesting:\n Careers that rely primarily on fluid intelligence tend to peak early, while those that use more crystallized intelligence peak later. For example, Dean Keith Simonton has found that poets‚Äîhighly fluid in their creativity‚Äîtend to have produced half their lifetime creative output by age 40 or so. Historians‚Äîwho rely on a crystallized stock of knowledge‚Äîdon‚Äôt reach this milestone until about 60.\n Why I (as of June 22 2019) think Haskell is the best general purpose language (as of June 22 2019) Although I can somewhat read Haskell code, I still can‚Äôt write much. So, can‚Äôt really agree\u0026hellip; Yet.\nEasy Parsing with Parser Combinators I have a small project I wrote with AWK that I want to rewrite ‚Äúproperly‚Äù in Scala, and I‚Äôd need to do some real parsing (not the ad-hoc parsing you always end up writing in AWK), so learning to use FastParse is worth it. Also Li is a very clear writer.\nSam and Max Hit the Road Development History So many fond memories from this game, I‚Äôm getting it again from GOG any day soon. Also this post made me look up where my copy of the ??? was.\nComonads for Life Implementing the Game of Life using comonads (the dual of monads)\nReal-world dynamic programming: seam carving I have always been fascinated by seam carving. It‚Äôs so amazing\nThe surprising story of the Basque language Uhm, Armenia is not even close.\nHistory Will Not Be Kind to Jony Ive Flexgate, antennagate, keyboardgate. There have been many f-ups that can be traced back to looking for a specific design. I hope Apple gets back to top-design and top-usability now.\n\u0026lsquo;It\u0026rsquo;s getting warmer, wetter, wilder\u0026rsquo;: the Arctic town heating faster than anywhere Longyearbyen (Svalbard‚Äôs capital) is in danger.\nReasons of State: Why Didn\u0026rsquo;t Denmark Sell Greenland? An analysis by Gwern Branwen about why Denmark didn‚Äôt sell Greenland to the US after WWII (they wanted it as a base).\n\u0026lsquo;Like a military operation\u0026rsquo;: restoration of Rembrandt\u0026rsquo;s Night Watch begins The weight of the painting will surprise you.\nüìö Sprint The nitty gritty details of how to run design sprints (a Google practice). Interesting.\nüìö Diaspora This is the second Egan book I read (after Clockwork Rocket) and I found Diaspora much better, although with a weak ending and a somewhat erratic plot. The book has some strong Star maker vibes. By the way, when adding the link above I thought the narrator for Audible was this Adam Epstein (a pretty darn good mathematician I know)\nüìö Thinking in bets The general idea is sound, but it‚Äôs one of those books that could be written as a long blog post or short essay.\nüìö Set your voice free Exercises to improve your voice. I have recently started to do the daily warm-ups, but so far have felt no difference. Of course, other people should be the ones to tell me.\nüé• Wardley mapping interview I was recently interviewed by John Grant and Ben Mosior as part of a set of interviews leading up to MapCamp London 2019. If you are interested in my thoughts about mapping the tech landscape, I wrote my train of thought in this blog post as well.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/07/201919-readings-of-week.html/","tags":["Data","History","Wardley maps","scala","Big data","Functional Programming","Maths","Productivity","Haskell","ReadingsOfTheWeek"],"title":"2019#19 Readings of the week"},{"categories":null,"contents":"The map and problem described here were part of my presentation Mapping as a tool for thought, and mentioned in my interview with John Grant and Ben Mosior (to appear sometime soon in the Wardley Maps community youtube channel). I‚Äôm looking for ideas on how to make this map easier to understand and useful, so I posted it to the Wardley Maps Community forums requesting comments.\nProblem I\u0026rsquo;m trying to solve As a consultant (and as someone always trying to keep up with technology) I\u0026rsquo;m interested in being able to answer three questions of a language or technology:\n How easy it is to find work/workers in the area right now? How hard it is to learn? How easy is it going to be to find work/workers in the area once I\u0026rsquo;m proficient enough?  Also, I need to know the relationship between any of them.\nThis problem has been on the back of my mind for many years, and upon getting proficient with Wardley mapping, I thought I could just map it. Of course, it\u0026rsquo;s not a Wardley map, because the axes are completely different, but having anchors and movement, it is spiritually close enough for me.\nIn the diagram I will show in a while, I have placed technologies I am proficient in, currently learning, or looking forward to learn. In all of them I am at least a beginner in the sense that I know what they are used for and have done some minor PoC (proof of concept) to get an idea of how the work.\nLooking for axis metrics There are several ways you can address this technology space to answer the questions above. The first and easiest metric, and one of the axes I have used (Y axis) is Difficulty. Since I know something about each technology I can rank them on Difficulty, at least in relationship with each other. It\u0026rsquo;s only a qualitative metric of difficulty, because in any new technology there are always unknown unknowns. There is no movement assumed in this axis, because Difficulty is supposed to be consistent throughout (leaving aside the more you know the easier it is to learn as well as familiarity with similar concepts that offset that, you could think of these two concepts as doctrine in such a map).\nOne natural metric for the other axis could be popularity, as measured by any of the several programming language/framework popularity rankings. You can use popularity as one of the axes, and use arrows to indicate whether it is growing in popularity or diminishing in popularity. But, popularity alone does not help in answering questions 1 and 3. What we need is knowing how large the market for this technology is, and how large the pool of workers in this market is. Could we use either as an axis?\nIf we were to use market size as X axis, we would probably have large markets on the right and small markets on the left, we would likely use arrows to indicate growing markets and shrinking markets. But, market size alone won\u0026rsquo;t answer the questions either. A small thought experiment: imagine we have the largest market possible, it is growing\u0026hellip; but the pool of workers for that technology is 2x the size of the market. It would be impossible to find work there (but, would be easy to find workers). This suggests that a possible correct for the X axis is market saturation, i.e. the ratio of market size with worker pool. Highly saturated markets are uninteresting to look for work, but are very interesting if you are starting a company: you\u0026rsquo;d have an easy time finding hires for that technology. Market saturation is related to flows (as in Systems thinking flow analysis) of users into a variable-sized container.\nMarkets become saturated in one of 3 ways:\n Market is growing, but the pool of workers grows faster Market is stagnating with a growing pool of workers Market is shrinking faster than the pool of workers is shrinking  Cases 1 and 2 are the most usual (I\u0026rsquo;d put Python as type 1 and Java as type 2), but 3 is an interesting situation: it would indicate a technology that has died in favour of another. Workers in that pool have retrained in the new technology, but are still in pool for the dying technology (for instance, traditional MapReduce).\nMarkets become desaturated in one of 3 ways as well:\n Market is growing faster than the pool of workers is growing Market is stagnating with a shrinking pool of workers Market is shrinking slower than the pool of workers is shrinking  Likewise, here, cases 1 and 3 may be the most interesting. I\u0026rsquo;d put Kubernetes in 1, and Scala in either 2 or 3. Please note that not only are these subjective evaluations, but are not meant to be negative. Scala has been my preferred language for a long while.\nWe can represent all these with slanted arrows: slant up covers growing markets, slant down covers shrinking markets. And then the arrow points left or right whether it is becoming saturated or desaturated.\nWith market saturation as an axis and arrows to indicate evolution of a technology, we can now almost answer questions 1 and 3. There is still the question of market size, which can\u0026rsquo;t be represented with such a relative measure. Although we could add circles to represent current market size, that would bring an already weird map to more weirdness. Hence, market size is not considered.\nThe map  Tech landscape map\n  Here you can see the map. Before I get a bit into the topography of it, let me quickly define some of the technologies:\n APL: programming language based on non-ASCII symbols designed in the 70s. Not extensively used, but in use Airflow: workflow scheduler for data operations Akka: Scala/JVM actor framework used for reactive programming, clustering, stream processing, etc Arrow: cross-language platform for in-memory data. Used in Spark, Pandas, etc Awk: special-purpose programming language designed for text processing Beam: unified model for data processing pipelines. Can use Spark, Flink and others as execution engines Dask: cluster-capable, library for parallel computation in Python. Datafusion: rust-based, Arrow-powered in-memory data analytics Docker: containerisation solution FP: as in Functional Programming. Software development paradigm based on immutable state, among other things. Scala and Haskell are some the most mainstream languages for it Flink: cluster computing framework for big data, stream focused Forth: stack based, low level programming language. Not in common use. FoundationDB: multi-model distributed NoSQL database, offering \u0026ldquo;build your own abstraction\u0026rdquo; capabilities Go: statically typed, compiled programming language Haskell: statically typed, purely functional programming language Hive: data warehousing project over Hadoop, roughly based in \u0026ldquo;tables\u0026rdquo; Kafka: cluster based stream processing platform (often used as a message bus) written in Scala Kubernetes: container orchestration system for managing application deployment and scaling. Written in Go, depending (non-strictly) on Docker Presto: distributed SQL engine for big data Python: interpreted high level programming language, very extended in data science and engineering Rust: memory safe, concurrency safe programming language. Has some functional capabilities Scala: JVM based language offering strong typing and functional and OOP capabilities Spark: cluster computing framework for big data, batch and stream (stronger in batch)   These cover a range of the data engineering space (Flink, Spark), as well as technologies I want to get better at and are close enough (Kubernetes, FoundationDB) and technologies I know but are not directly related (AWK, APL, Forth) and are used as anchors.\nAnchors To display relative positions, I needed to anchor some of the technologies. For instance, Haskell and APL set the bar for difficulty, with AWK setting the minimum, and Python and Forth set the extremes for saturation. Everything else is placed in relation with these.\nLinks and colours In the map, I have used colours to distinguish languages, frameworks, libraries, containerisation and databases. Colour is not fundamental though, links are. Related technologies are linked: Spark is written in Scala, and can be used with Scala, Python and other languages. Hence, changes in market saturation for Spark indirectly affect market saturation for Scala.\nEmpirical map division We can think of the map as divided in 2 areas vertically (high barrier to entry and low barrier to entry) and 3 areas horizontally (saturated, accessible, desaturated).\n Tech landscape map with sectors\n  Quick overview If you were a CTO, you\u0026rsquo;d probably be interested in:\n Low barrier to entry, saturated market for high turnover positions (easier and cheaper to hire and train) Accessible currently becoming saturated for more stable positions (becoming easier to hire in the future) High barrier to entry, with growing markets for proof of concepts, exploration (exploring new technologies that may make an impact in the future)  A map like the one above can help make these decisions.\nFor deciding on future work, I\u0026rsquo;d be (as a consultant) interested in:\n First, growing market, high barrier to entry for current learning. If the barrier to entry is too low and the market is lucrative enough any return on time investment will tend to 0 in the end otherwise. Second, accessible with low-to-mid barrier to entry for imminent work opportunities. Finally, to hedge bets on a long term plan, anything which is very low saturation, and where the market is unknown or may be in growth.  With this map (which is suited to my current knowledge and interests) I can definitely answer the question of where I should put my efforts right now.\nCuriosities Haskell and Rust raise interesting questions. Haskell has a very high barrier to entry, the market is not very large and might not be growing fast, but there are developers working in other languages (Scala, Rust, Kotlin, Go, even Python) that would love the opportunity to work in Haskell. This makes the Haskell job market actually saturated (or at least saturated if you consider worldwide market). Thus, starting a company focused on Haskell might not be as bad of an idea as it might sound. Similarly with Rust: Rust is growing as a side project language, the amount of developers familiar with the language is growing faster than the market and thus is an interesting target for a starting company.\nWe\u0026rsquo;d have Python on the other side: since it is taking over as the lingua franca of data science and engineering, and becoming one of the teaching languages at universities, the amount of developers with enough knowledge to become part of the work pool is growing faster than the market (even if the market for Python is growing at a fast pace). It makes it an ideal language for creating a company or a consultancy company (large pool of candidate workers), but not so interesting for being an independent consultant, since competition could be too large\nQuestions and further ideas This is the approach and train of thought I have followed to trace these ideas, but it‚Äôs still a work in progress. I‚Äôd like to hear what you have to say about this: what would you change? What would you do different? I\u0026rsquo;m still unsure about using market saturation and arrows to show market and pool of workers behaviour, but I have not found anything easier to represent. Ideas? And here are some areas I‚Äôm unsure or where I have more questions.\nWhat other approaches would you have taken to explore these questions? There are probably many other ways you can take to approach these questions. What would be yours?\nDo you think market size would need to be shown? It could be shown with a circle (different sizes to be able to compare) below the arrow indicating behaviour of saturation but that could make the map way too complex. Any other ideas? Do you think it is that important, as long as saturation is taken into account?\nLinks between related technologies are a bit hazy The links between technologies are a bit too abstract. An \u0026ldquo;increase\u0026rdquo; in \u0026ldquo;Python\u0026rdquo; moves \u0026ldquo;higher\u0026rdquo; Airflow, Spark, Dask and any related technologies\u0026hellip; but in what sense? Popularity? Market share? Market saturation? I suspect the link is useful to see, and it is supposed to bring some dynamic/movement, but I\u0026rsquo;m still unsure how.\nFlows An interesting approach I didn\u0026rsquo;t pursue is using flow maps. For each programming language, there is a set of flows into other languages. For instance, developers in Scala have a tendency to be interested in Kotlin, Rust and Haskell, with some making the jump as soon as market is able to absorb them (and for each of these flows we can assume there is a non-zero flow to the other side). Similarly, we\u0026rsquo;d have flows from Python to Go and Scala, from Go to Rust. These could inform on market trends and behaviours, but they are not only hard to show on a map (what would be the axes? what would be the anchors?) but also might not be interesting enough on their own. What do you think?\n","permalink":"https://mostlymaths.net/2019/07/a-section-of-map-of-data-engineering.html/","tags":["Spark","Data","Wardley maps","Python","Scala","Golang","Big data","Functional Programming","Systems Thinking"],"title":"A (section) of a map of the data engineering space"},{"categories":null,"contents":"Software engineering, history, planning, data engineering. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Nik Shuliahin¬†on¬†Unsplash\n  Fresh look at mysterious Nasca lines in Peru An analysis of what kind of birds they represented.\n4 Simple Steps To Set-up Your WLM in AWS Redshift Good suggestions on workload management and process queues for Redshift\nAdventure Games and Eigenvalues Finding dead ends in a game using Markov processes (instead of a formal language approach)\nWhen pigs fly: optimising bytecode interpreters Quite a meaty post about\u0026hellip; well, optimising interpreters (incidentally, bytecode based)\nSee through words Did you know metaphor design is a thing? Read this article for more.\nDecision tables Calling decision tables a formal method may be a stretch, but they can clarify your thinking. And that is one of the powerful things formal methods bring.\nMonad Transformers aren‚Äôt hard! No, they aren\u0026rsquo;t, but your heap can suffer in Scala!\nüé• Wardley Maps Saved The Day - How Stack Overflow Enterprise automated all the things\u0026hellip; I‚Äôve been into Wardley mapping for several months (even gave a presentation on Mapping at SoCraTes UK 2019) and I‚Äôm basically consuming any content related to it. This short video is a very good intro to Wardley mapping, by the way.\nüé• Cartoons are about how drawing and writing work together on the page A quite funny video presentation by Tom Gauld\nüìö The goal: a process of ongoing improvement It‚Äôs like Sophie‚Äôs World but for Theory of Constraints (with a whiz of the Toyota Production System probably)\nüìö Make your contacts count Networking tips. It describes very directed ways of building a network and actually being useful in it, not just a parasite.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/06/201918-readings-of-week.html/","tags":["Data","History","Wardley maps","Formal methods","Big data","Functional Programming","Maths","Productivity","ReadingsOfTheWeek"],"title":"2019#18 Readings of the week"},{"categories":null,"contents":"This week is a bit light on technical content because I was attending Scala Days 2019 in Lausanne and I had enough with the talks.¬†\nSoftware engineering, psychology, history. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Eduardo Romero¬†on¬†Unsplash\n  The mindfulness conspiracy It‚Äôs a trap!\nOne Diagram To Mind Them All: Hyperspace in the 1970s The beginnings and history of mind mapping, and Tony Buzan in particular.\nA tale of lost WW2 uranium cubes shows why Germany‚Äôs nuclear program failed Splitting your efforts won‚Äôt lead to faster splitting of the atom.\nExploring Domain-Driven Design at CircleCI DDD is an interesting concept, and knowing how companies implement it is always good. This lacks a bit of more material though.\nA Year‚Äôs Worth An interesting way of visualizing a year‚Äôs worth of technical effort, by Kent Beck.\nThe Making of Lemmings I enjoy a lot tales of the dark ages of gaming. If you haven‚Äôt, read The Making of Prince of Persia (you may enjoy the ‚Äúprequel‚Äù, The Making of Karateka) or Masters of Doom).\nFeynman‚Äôs Breakthrough, Disregard Others! If you focus too much in what others do, you‚Äôll lose your uniqueness.\nüìö Tribe of mentors A book by Tim Ferris, where he quick-interviews a lot of people, asking tips. It‚Äôs a kind of a not-amusing read, because it‚Äôs not designed to be ‚Äúread‚Äù, I suspect.\nüìö How to Draw Fantasy Art and RPG Maps: Step by Step Cartography for Gamers and Fans I had a lot of fun with this one. Super-readable and easy to follow.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/06/201917-readings-of-week.html/","tags":["ReadingsOfTheWeek","Data","Agile","History","Big data","Bizarre","math"],"title":"2019#17 Readings of the week"},{"categories":null,"contents":"Wardley mapping, data engineering and big data, maths. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Roman Mager¬†on¬†Unsplash\n  Meet the Money Whisperer to the Super-Rich N.B.A. Elite It surely has to be an interesting job\nThought as a Technology An essay by Michael Nielsen. Very recommended.\nA tale of lost WW2 uranium cubes shows why Germany‚Äôs nuclear program failed Curio\nCounting to infinity at compile time ‚Äì The Startup ‚Äì Medium You can do really weird things with Scala at compile time, and base 3 is pretty cool.\nA visual introduction to Morse theory I was surprised to see this posted on Hacker News, so decided to read it for the \u0026ldquo;good old times\u0026rdquo;. Learnt something (since I never had a class on Morse theory, it was just one of those intriguing sections in the library)\nThe cutting-edge of cutting: How Japanese scissors have evolved I have some weird scissors, but these go beyond weird.\nA different kind of string theory: Antoni Gaudi That idea was clearly genius.\nFormally Specifying a Package Manager By using Alloy. I really like Alloy.\nMaker\u0026rsquo;s Schedule, Manager\u0026rsquo;s Schedule I was talking with a friend earlier about a previous post in my Weekly Readings series (Do I truly want to become a manager?) and he hadn\u0026rsquo;t read this one, so I\u0026rsquo;ll share it here too.\nSchema evolution in Avro, Protocol Buffers and Thrift I kind of like the sound of how Avro handles schemas. Seems an efficient way, although seems\u0026hellip; prone to possible disasters.\nImprove Apache Spark write performance on Apache Parquet formats with the EMRFS S3-optimized committer This is optional in EMR 5.19 and will be the default in 5.20 so we won\u0026rsquo;t see much difference, except in performance.\nWhy Enthusiasm is a Bad Thing in a CTO Hey, look a squirrel is 10x more dangerous when it\u0026rsquo;s the CTO spotting squirrels.\nüñ• Mapping as a Tool for Thought A presentation I gave on Wardley mapping and \u0026ldquo;mapping\u0026rdquo; in general at SoCraTesUK 2019. I really enjoy this conference.\nüé• Skip the first three months of development for your next app This ties very well with some of the Wardley mapping concepts.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/06/201916-readings-of-week.html/","tags":["ReadingsOfTheWeek","spark","Data","Wardley maps","scala","Big data","Bizarre","Maps","math"],"title":"2019#16 Readings of the week"},{"categories":null,"contents":"Data engineering, adtech, ZIO, Rust, writing, some miscellaneous stuff. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Tom Gauld (for New Scientist, from his blog, sorry!)\n  Hacking the Casio F-91W to Handle 1000+ PSI This was an amusing find. I wonder where my F-91 is.\nThe Day You Became a Better Writer (2nd Look) Top notch, short and sweet writing tips by Scott Adams (of Dilbert fame)\nRebuffing the Attack of the Clones I‚Äôm guilty of unnecessary cloning. Shame, shame.\nGenerating geometric image placeholders client-side Neat! I had written something similar in C a long time ago. It was slow! This is blazingly fast.\nBehavioral Ad Targeting Not Paying Off for Publishers, Study Suggests This is surprising. I‚Äôd expect CPM to be higher for high value programmatically bid users.\nThe Embroiderer\u0026rsquo;s Story: Hand Skills An unexpected consequence of the digitalisation of our leisure\nNo frills data warehousing with dbt I‚Äôve been considering this tool (the open source one, not the cloud offering, I have Airflow for that) for a while.\nWhy I\u0026rsquo;m Stepping Back from Scalaz (John De Goes) A very well reasoned writing. I‚Äôm all for ZIO.\nApache Flink: Flux capacitor, huh? Temporal Tables and Joins in Streaming SQL I don‚Äôt use Flink, but it‚Äôs there, staring at me.\nUsing Poetry in production It sounds powerful in combination with my dear pyenv.\nHow I run a company with ADHD I somehow can relate, I wonder why OH HEY A SQUIRREL\nCQL: A categorical query language The categorical hype rises. I‚Äôd like to see scheme-based data analysis at some point (that could be a thing at some point, schemes as in generalized algebraic manifolds)\nüìö Baking with Kafka An amusing book by cartoonist Tom Gauld.\nüé• Crossing the River by Feeing the Stones I\u0026rsquo;ve been doing Wardley maps for close to a month, and they have been really influential in how I approach a lot of things. I will be giving a short introduction to them this weekend at SoCraTesUK 2019, if you are there say hello (and I\u0026rsquo;ll post the slides soon)\nAWKrdeck: Deckset to Reveal.js I wrote a simple converter from Deckset style presentations to similarly-themed Reveal.js presentations using some AWK and Pandoc.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/06/201915-readings-of-week.html/","tags":["ReadingsOfTheWeek","spark","Data","AWK","Python","scala","Rust","ZIO","Big data"],"title":"2019#15 Readings of the week"},{"categories":null,"contents":"Data engineering, adtech, functional programing, formal specification. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Darius Soodmand¬†on¬†Unsplash\n  Schema Management With Skeema How SendGrid manages schema updates internally. A pity it‚Äôs focused on MySQL and family and I prefer Postgres\nHow to do hard things I wasn‚Äôt aware, but this is exactly how I approach anything I don‚Äôt know how to do. Don‚Äôt miss this one.\nThe bullshit I had to go through while organizing a software conference I‚Äôve been an organiser, luckily didn‚Äôt encounter this. Crossing fingers, since we are preparing stuff at PyBCN.\nThe reason I am using Altair for most of my visualization in Python I usually like having the possibility of maximum power and expressiveness\u0026hellip; But eventually I just want to make easy things easy. I‚Äôll try Altair next time I need to plot anything. Lately I‚Äôve gone a lot to gnuplot, to be fair: nothing beats it to just plot a text file you have lying around.\nIntroducing Argo ‚Äî A Container-Native Workflow Engine for Kubernetes This is what is now being used at BitPhy, after I recommended them to\u0026hellip; well, not use Airflow. To be fair they were considering Argo and Airflow, and given they are heavy on Kubernetes, Argo sounds a better fit.\nDo I truly want to become a manager? Six questions you should consider before thinking of making the leap out of the IC route. Thanks to CM for sharing it.\nAsk HN: What overlooked class of tools should a self-taught programmer look into You can find some suggestions in these answers.\nGive meaning to 100 Billion events a day How Teads leverages AWS Redshift.\nPerformant Functional Programming to the max with ZIO You were wondering: which ZIO post is he going to share this week?\nMeet Matt Calkins: Billionaire, Board Game God And Tech\u0026rsquo;s Hidden Disruptor A friend of mine is designing and producing a board game (I‚Äôll share the Kickstarter when is ready), so this was a fun read. He‚Äôs not a billionaire though.\nOpen-sourcing the first OpenRTB Scala framework I‚Äôm not sure what the performance of a RTB can be in Scala, but I‚Äôm definitely interested.\nZero Cost Abstractions Rust is always sold as a zero-cost abstraction language. What does that exactly mean?\nA novel data-compression technique for faster computer programs Don‚Äôt know, this sounds pretty much what Blosc does.\nüé• Fast Data with Apache Ignite and Apache Spark (this is an oldie) I tried Ignite+Spark around 1 year ago, and couldn‚Äôt get it to work properly (segmentation fault!). I‚Äôll try again: it can open up a lot of things if it works as promised.\nüé• Thinking for Programmers Leslie Lamport selling you the why of specifications. Very recommended, specially for people who think specifying is complex, long, unnecessary or anti-agile.\nüé• Live Coding with Rust and Actix I was very impressed by this video (I watched it as ‚Äúbackground‚Äù, not actively). Very focused, and all written in one go.\nüé• Solving every-day data problems with FoundationDB FoundationDB is on my list of technologies to watch/follow and learn. Get a glimpse about why here.\nüìö Soft Skills It‚Äôs not a bad book, but is basically a summary of stuff I got from other places already. You can give it a go.\nüéº Time Out by the Dave Brubeck Quartet Saw this recommended somewhere, and I‚Äôm liking it a lot (won‚Äôt remove Bill Evans as my favourite jazz pianist though)\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/05/201914-readings-of-week.html/","tags":["ReadingsOfTheWeek","spark","Data","Python","scala","Rust","ZIO","Golang","Big data","TLA+"],"title":"2019#14 Readings of the week"},{"categories":null,"contents":"If you have have known me for any length of time you\u0026rsquo;ll know I write mostly Python and Scala lately (Rust is getting into the mix slowly). And you should know, I am a heavy emacs user. I have been using emacs for close to 15 years, for the past 3 my emacs of choice has been spacemacs. I used to have a very long, customised and complex .emacs and with spacemacs I get a mostly-batteries-included package. That\u0026rsquo;s nice after a while, and I also have gotten really proficient at using evil.\nOne problem of using emacs is the integration with some languages. If you write Scala, with IntelliJ you get super-fancy completion, refactoring, code analysis, jump-to-definition\u0026hellip; Many goodies. In emacs, the best-in-class system used to be ensime. It worked, but it was not really supported for spacemacs (since I\u0026rsquo;m an old emacs user I could play around that), but the main issue was that my old MacBook was short on memory for running ensime and a lot more. So, I wrote most of my Scala code in hardcode mode. No completion, documentation or jump to definition.\nThis is why I learnt how to set up GNU global, jump to definition is just too handy. Luckily, the people at Scala Center not only are smart, but also try to improve developer experience, and had been working in a language server for Scala for a while, called metals. I got it working recently, and it\u0026rsquo;s great. You get documentation on hover, error messages, jump to definition. Oh, I forgot to mention, the language server protocol is an invention from Microsoft to standardise how editors handle language completions and all that. They probably introduced it for Visual Studio Code (I actually use it from time to time, it has some remote pair programming capabilities I\u0026rsquo;ll talk someday), but now it\u0026rsquo;s extending across all editors.\nAfter using LSP in emacs for Scala for a while I decided to set it up for Python as well, in preparation for our next PyBCN podcast, about tools we use. I was pretty happy with the completions I was getting, but semantic completions from a language server are usually better. So far, lsp with python is ok. Oh, you\u0026rsquo;ll see screenshots at the end!\nYou\u0026rsquo;ll need to install the language server. I usually have a high level Python environment with all my tools, for things I am just starting to work on:\npyenv virtualenv 3.7.1 tools pyenv activate 3.7.1/envs/tools pip install \u0026#34;python-language-server[all]\u0026#34; bpython mypy flake8 After this, some configuration is needed in emacs. Here you can find parts of my configuration, commented. These sit in my dotspacemacs/user-config\n;; First come the configurations for Scala language server  ;; thingies. sbt is the Scala build system. (use-package scala-mode :mode \u0026#34;\\\\.s\\\\(cala\\\\|bt\\\\)$\u0026#34;) (use-package sbt-mode :commands sbt-start sbt-command :config (substitute-key-definition \u0026#39;minibuffer-complete-word \u0026#39;self-insert-command minibuffer-local-completion-map)) ;; This is the main mode for LSP (use-package lsp-mode :init (setq lsp-prefer-flymake nil) :ensure t) ;; This makes imenu-lsp-minor-mode available. This minor mode  ;; will show a table of contents of methods, classes, variables.  ;; You can configure it to be on the left by using `configure` (add-hook \u0026#39;lsp-after-open-hook \u0026#39;lsp-enable-imenu) ;; lsp-ui enables the fancy showing of documentation, error  ;; messages and type hints (use-package lsp-ui :ensure t :config (setq lsp-ui-sideline-ignore-duplicate t) (add-hook \u0026#39;lsp-mode-hook \u0026#39;lsp-ui-mode)) ;; company is the best autocompletion system for emacs (probably) ;; and this uses the language server to provide semantic completions (use-package company-lsp :commands company-lsp :config (push \u0026#39;company-lsp company-backends)) ;; I use pyenv to handle my virtual environments, so when I enable ;; pyenv in a Python buffer, it will trigger lsp. Otherwise, it  ;; will use the old systems (I think based on jedi) (add-hook \u0026#39;pyenv-mode-hook \u0026#39;lsp) ;; Flycheck checks your code and helps show alerts from the linter (use-package flycheck :init (global-flycheck-mode)) ;; Show flake8 errors in lsp-ui (defun lsp-set-cfg () (let ((lsp-cfg `(:pyls (:configurationSources (\u0026#34;flake8\u0026#34;))))) (lsp--set-configuration lsp-cfg))) ;; Activate that after lsp has started (add-hook \u0026#39;lsp-after-initialize-hook \u0026#39;lsp-set-cfg) ;; I like proper fonts for documentation, in this case I use the  ;; Inter font. High legibility, small size (add-hook \u0026#39;lsp-ui-doc-frame-hook (lambda (frame _w) (set-face-attribute \u0026#39;default frame :font \u0026#34;Inter\u0026#34; :height 140))) ;; Configure lsp-scala after Scala file has been opened (use-package lsp-scala :after scala-mode :demand t :hook (scala-mode . lsp)) You can see how it looks now.\n Traditional completion (non-LSP)\n   LSP-powered completion. Way more information!\n   Fancy inlined documentation\n  Sadly, inlined documentation doesn\u0026rsquo;t look as good as it should: compare with Scala with metals and lsp-scala:\n LSP mode in Scala with metals\n  If you\u0026rsquo;ve gotten this far, I share my most interesting weekly readings in tag here. You can also get these as a weekly newsletter by subscribing here.\n","permalink":"https://mostlymaths.net/2019/05/lsp-for-python-and-scala.html/","tags":["emacs","Python","scala","Rust","spacemacs"],"title":"LSP for Python and Scala"},{"categories":null,"contents":"Functional programming, adtech, history. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Mgg Vitchakorn¬†on¬†Unsplash\n  Ancient Chinese Buildings Are Held Together With Rice As everyone who has prepared sticky rice and forgotten to clean the pan quickly knows.\n\u0026lsquo;I\u0026rsquo;d Have These Extremely Graphic Dreams\u0026rsquo;: What It\u0026rsquo;s Like To Work On Ultra-Violent Games Fatality burnout.\nThe Artistry of China‚Äôs Ivory Puzzle Balls I‚Äôve seen one from really close and they are amazing\nBristol academic cracks Voynich code There was a rebuttal of this approach close to 2 years ago, but it still sounds interesting. Also, I‚Äôd expect phys.org to be somewhat trustable.\nTechnical Debt? Probably not. Pay it off. Or not.\nScala\u0026rsquo;s Future.successful: Do Not Block Your Future Success Beware the future!\nThe Functional Scala Concurrency Challenge Some of the solutions look neat, and there is something to be learnt in the diversity.\nTechnical overview of ads viewability measurement methods I have always been interested into how ad viewability (if an ad is seen by a user or not) works. Now I know.\nGraalVM installation and setup on macOS GraalVM is a new Java runtime and compiler, which is somewhat faster than the normal JDK, and offers some really fancy cross-language options. I had been using RC9 or 10. It was time to update. I usually use Enterprise Edition for anything local, but can switch per-terminal with several aliases I have (j8, j11, jgree and jgrce) in case something breaks or I want to try another.\nCaire - a content aware image resize library Seam carving is so cool. I wrote a cropping system once, using PILs Haar cascade based object detection. It works pretty well for automated creation of ads, but seam carving is way better for almost all other cases.\nüé• Flare - Optimizing Apache Spark for Scale-Up Architectures and Medium-Size Data I‚Äôm scared this will become a closed source, or business-on-top. Code is not available, but results are awesome. Luckily, the papers are (why the code is not as part of the papers is another question).\nüé• helm-edit I had used multiple-cursors (and expand-region) in emacs many times, although I had a hard time making it work properly in spacemacs for a while. helm-edit works better already in spacemacs, so, big win!\nüé• Understanding Query Plans and Spark UIs I knew everything in this video already, but it covers lots. Give it a look.\nüé• What the ∆í is a monad Although focused on Java, it‚Äôs very well explained for any language. Of course, if you have do syntax or for comprehensions, better.\nüìö The Great Mental Models The audiobook by Shane Parrish, of FS Blog. It was good, but I expected something longer.\nüìö The art of thinking in systems If you have read Donna Meadows Thinking in Systems, this won‚Äôt give you anything new. And I‚Äôd rather recommend TiS.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/05/201913-readings-of-week.html/","tags":["ReadingsOfTheWeek","emacs","spacemacs","Big data","Functional Programming","spark","Agile","scala","ZIO","Golang","Adtech","Systems Thinking"],"title":"2019#13 Readings of the week"},{"categories":null,"contents":"Big data and data engineering, metallurgy, Rust (not the metallurgy-related rust). Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Photo by¬†Zsolt Palatinus¬†on¬†Unsplash\n  Testing Incrementally with ZIO Environment I‚Äôve been reading a lot about ZIO lately, even to the point of writing a few simple thinks with the help of a more advanced Scala friend. As I‚Äôve mentioned before, it looks solid\nMedieval Africans Had a Unique Process for Purifying Gold With Glass No plans on smelting anything soon, but this was interesting.\nRust Runtime The proposed approaches for async-await in Rust are shaping up.\nMoving from Ruby to Rust (at Deliveroo) It should surprise no-one, except maybe hardcore rubyists that moving from Ruby to Rust yielded terrific speed-ups. Something similar should happen in Python, though.\nZero-cost futures in Rust One of the core tenets of Rust is having zero-cost abstractions (as in, being as close to manually written). Here you can read how futures fit that goal.\nA quick look at trait objects in Rust Traits will be familiar to Scala or even Go or Java developers, but there are a few gotchas/differences you need to be aware.\nDruid Design A friend of mine has used Apache Druid before, and has been really happy with its performance, so I‚Äôve been looking into possible use cases to road-test it.\nMake your own GeoIP API (in Python) I‚Äôve linked before to GeoIP approaches, this one is interesting as long as you only want country-level resolution, I usually need city or better.\nAn in-depth look at the HBase architecture Similarly to Druid, I‚Äôve been checking several things to speed up some areas. Apache HBase might be one of them, and I wanted to see how it works under the hood, I love these details\nüé• ZIO Schedule As mentioned above, ZIO is shaping up nicely, and the scheduling helpers presented here are one of the selling points, depending on what you do.\nüé• Pure functional programming in Excel Duh\u0026hellip; but\u0026hellip; to be fair\u0026hellip; there is a point in here.\nüé• Gradual typing of production applications Incremental approach suggestions for typing in Python, at Facebook (Instagram to be precise)\nüé• Effects as Data Everything here should sound familiar if you are anything into functional programming\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/05/2019-12-readings-of-week.html/","tags":["ReadingsOfTheWeek","Python","scala","Rust","ZIO","Big data"],"title":"2019#12 Readings of the week"},{"categories":null,"contents":"As you may know, I‚Äôm a heavy emacs user, and a frequent Scala developer. Scala tooling for emacs was restricted to mostly ensime until recently. Although ensime is an excellent piece of software, it made my old Macbook suffer a lot (it only had 8gb of RAM). So, most of the time I just went hardcore mode developer, and worked with no autocompletion, no jump to definition, no-nothing. A pervasive use of ripgrep and good memory were sometimes enough, but I was envious of many things I could see in my colleagues using IntelliJ. Of course, switching editors was not an option.\n Photo by¬†thom masat¬†on¬†Unsplash\n  I looked up what solutions were available, and the only option that seemed good enough was using the classic ctags/etags/gtags I hadn‚Äôt used since my C days.\nHaving a tags implementation can bring an almost-decent jump-to-definition essentially for free: gtags (and the others) work by pre-analysing the data and generating symbol maps which are usually stored as files, the overhead in speed and memory is minimal.\nInstalling it can get somewhat unintuitive (specially on Mac), since you need very specific settings for it to work with emacs and especially, Scala code.\nStart by installing GNU global:\nbrew install global --with-pygments --with-ctags --with-exuberant-ctags The key parts is having pygments. Aside from this you will need to export the following environment variables:\nGTAGSCONF=/usr/local/share/gtags/gtags.conf GTAGSLABEL=pygments Finally, you need to install (or activate) ggtags-mode. If you use spacemacs, you only need to activate the gtags layer. All this has become moot as soon as metals has reached a usable state: now you can have a really fast language server for Scala, written in Scala with low memory overhead.\n","permalink":"https://mostlymaths.net/2019/05/gtags-gnu-global-in-emacs-for-scala.html/","tags":["emacs","Scala","spacemacs"],"title":"gtags (GNU global) in emacs for Scala"},{"categories":null,"contents":"  Software engineering, Spark, history, python. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nTesting and debugging Apache Airflow We\u0026rsquo;ve been using Airflow for almost a year (on my suggestion). I\u0026rsquo;m not super-happy with it, and testing it is one of the pain points. Knowing how to do it is half the battle.\nMind control, levitation and no pain: the race to find a superman in sports You must lose\nI can\u0026rsquo;t Do Anything for Fun Anymore; Every Hobby Is an Attempt to Make Money You\u0026rsquo;ve probably felt the same\nDatabricks open-sources Delta Lake to make data lakes more reliable I\u0026rsquo;m looking forward checking the code for this (should be equivalent to Databricks\u0026rsquo; Delta product)\nTolkien was right: Scholars conclude Beowulf likely the work of single author  In off the moors, down through the mist beams, god-cursed Grendel came greedily loping.\n Don‚Äôt inherit Python built-in dict type Remember kids, what you want to do is either Mapping (read-only) or MutableMapping abstract base classes from collections.abc\nHow to Integrate Your Stuff into Spark SQL A pity you need a custom build of Spark in this case (and fighting with EMR to install it)\nUsing Direct Writes to Significantly Increase the Performance of Spark Workloads If you happen to use Qubole and Hive, this can be a winner.\nLow-memory symbol indexing with bloom filters I love bloom filters, and have been using the metals Scala language server for a while now in emacs (spacemacs).\nCONSTANT Anti-Patterns : tlaplus That\u0026rsquo;s no constant\nWhy software projects take longer than you think -a statistical model We all know we are bad at estimates as humans, mathematical models just can confirm this\nHow to knit a sports car with carbon fibre - The new black arts of manufacturing Rapid prototyping and construction with carbon fibre can change a lot of things in manufacturing\nüé• Build a roguelike in Rust Using libtcod. Also a blogpost series available here.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/04/2019-11-readings-of-week.html/","tags":["ReadingsOfTheWeek","spark","Python","scala","Rust","TLA+"],"title":"2019-11 Readings of the week"},{"categories":null,"contents":"Software engineering, psychology, generative art. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Could be Autumn Rhythm, Letter C\n  If you are wondering why the list is shorter this week (and is so late) is because last week I said I was going to play Stardew Valley, and I complied. Oh, I also played a bit with creating fun models with Alloy, maybe I\u0026rsquo;ll explain something soon.\nThe Day Feynman Worked Out Black-Hole Radiation on My Blackboard The way Richard Feynman found interesting stuff and just had a go (have you read Surely you‚Äôre joking, Mr Feynman?) is astonishing.\nHow to Set Up VSCode for Remote Pair Programming I‚Äôve been researching better ways to help my coworkers while I‚Äôm remote. This VS Code setup looks interesting, although I‚Äôll need to get an emacs/vim plugin if I am to use it.\nSIGBOVIK If you run OCR on paint splashes, you get mostly valid Perl code.\nMulti-Scale Truchet Patterns I always enjoy a good generative art finding, and Truchet tiles have always claimed a spot in my heart (I loved Cameron Browne‚Äôs Che¬†game, even if it\u0026rsquo;s a bit thin after a while)\nHow Mental Models Unlock Your Thinking I follow Shane‚Äôs podcast (and newsletter) regularly, so I‚Äôve been looking forward the release of his audiobook. Now, it‚Äôs here, and I got it already.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/04/2019-10-readings-of-week.html/","tags":["Programming","Generative","Perl","Games","Maths"],"title":"2019-10 Readings of the week"},{"categories":null,"contents":"You know how you slip once on a habit and everything goes crazy? Well, I‚Äôve been 4 weeks without writing these, so here‚Äôs the accumulated reading from 4 weeks. Because, even if I don‚Äôt write it, I read a lot anyway. Also, there‚Äôs lot of interesting content this ‚Äúweek‚Äù.\nNote: This edition contains Rust, food, Scala, functional programming, psychology, Python, likes to nice images, and a bit on procedural generation. Also the books I read these days. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nStardew Valley and real life labour I bought Stardew Valley for iOS during Christmas, after hearing how much Mike Hurley (from the Cortex podcast, and all around the Relay.fm podcasting network) likes it. But, still haven‚Äôt played, maybe this week? (although, Cultist Simulator appeared on iOS last week, and it‚Äôs very engaging, specially on an iPad Pro with a Pencil).\nüìö Superforecasting I‚Äôm undecided on this book. The premise was excellent, the analysis as well, but it was lacking a bit on the ‚Äúhow‚Äù area of superforecasting.\nTo Be Lucky, Believe That You Are There is something to this, also, more on luck further down. I‚Äôm a lifetime subscriber to Nautilus, and you should consider becoming one. Their print magazines are beautiful, and the articles always insightful.\nWhat Working At Stripe Has Been Like Anything Patrick McKenzie (patio11) writes is worth reading. Don‚Äôt miss his Salary Negotiation post.\nCloud Management with Prolog Prolog, and its query ability sound ideal for a lot of scenarios. This could very well be one of them, although dumping to SQL could be more useful when working with a team.\nAddition Font How to exploit the depths of font description languages to compute. Also has a minor proof on how font rendering (removing some implementation blocks to avoid overflows in font engines) is Turing complete.\nTwitter thread about immutability in Python by Yury Selivanov Some ways you can get pretty much immutability. If you are a functional-ish programmer you‚Äôll value this.\nWhite gold: the unstoppable rise of alternative milks I like the occasional oat milk (I like the taste of oats) or a specific brand of Catalan walnut milk (pairs perfectly with coffee)\nüìö Bad blood To be fair, I got the audiobook version, but it is thrilling. I listened to it in one weekend, and I didn‚Äôt finish earlier because AirPods need recharging.\nApache Spark 2.4.0 features - array and higher-order functions Aside from the move to Scala 2.12, this is for me one of the most significant changes to Spark. Although I haven‚Äôt used these yet, there have been several moments in the past where I needed mapping capabilities over arrays and had to resort to a UDF. They are not hot paths, but knowing how UDFs behave, I‚Äôd get a decent speed up of these parts by moving to a HOF.\nFaster File Distribution with HDFS and S3 How to load your data into HDFS is always a key question. Pre-load it? Load it directly with a specific (say, spark.read) construct from S3? Here there are some benchmarks of what is more effective, at least for Presto. Results probably extend to Spark et al, since being based over HDFS is the key part.\nMumble: the open source VoIP solution I learnt about Mumble and the Murmur server a few weeks ago. They are a system for very low latency, low bandwidth audio-only (optionally a bit of text) communication. I wonder if it can help me work remotely more effectively (helping with pairing, or with random ‚Äúquick talk‚Äù while avoiding the overhead of a video call under Slack, Skype or Meet). This Hacker News comment seems to cast it in the correct light.\nLa belleza matem√°tica de la naturaleza, en ilustraciones de proporciones √°ureas Note this is in Spanish. Served as an excuse to find out about Rafael Araujo and his books, The Golden Ratio: The Divine Beauty of Mathematics (with text by Gary Meisner) and Golden Ratio Colouring Book. I have now some of his drawings as backgrounds of my devices. They are gorgeous.\nBarcelona from Above (set of pictures by M√°rton Mogyor√≥sy on Behance) These were my previous device backgrounds. You can also follow the author on Instagram (you can also follow me but I‚Äôm not that interesting)\nSpace Colony Art from the 1970s ‚Äì The Public Domain Review The 70s were special\nLaws for Communicating Parallel Processes A classic paper by Hewitt, the seminal work on actor systems.\nRoguelike Tutorial in Rust + tcod I enjoy playing ASCII based roguelikes from time to time (DCSS, CDDA or Dwarf Fortress), writing one would be cool. And yet another excuse/way to learn more Rust.\nFast and easy high resolution fractals with a pixel shader I stopped generating fractal stuff before using shaders for it was common, so I never got to learn it. Now, I want it back. It was so much fun.\nPython Data Landscape Diagram A super-thorough diagram showing the data analysis library landscape in Python, with some words on each technology/library.\nHow the UK lost the Brexit battle From Politico. It is super-long, but well worth the read if you are anywhere related to Brexit. This could easily be described as how not to manage your negotiation deals.\nProcedural Generation with Wave Function Collapse Like fractals, procedural generation is something I have always enjoyed (as a concept, as a result and as a programming problem). WFC is a good approach for generating maps, images and anything with ‚Äúrules‚Äù\nRust Lifetimes for the Uninitialised A thorough introduction to how Rust lifetimes work and how to use them\nControlling the Spice, Part 3: Westwood‚Äôs Dune A short history about how Dune II came to be, and to appear almost at same time than Dune. Also, how Westwood (and Dune II) shaped real time strategy from then on.\nPython Patterns An analysis of some common patterns (√† la Gang of Four, patterns) when applied to Python\nThe Unexpected Philosophical Depths of the Clicker Game Universal Paperclips In the clicker realm, I much prefer SpacePlan (or A Dark Room, but that‚Äôs not 100% clicker), but UC was interesting.\nSpread the word: the rise of craft butter ‚Äì and how to make your own Craft beer, craft bread, craft butter. It‚Äôs hard to come with good quality cream in Spain, though.\nüìö Platt‚Äôs How to Draw Cartoons A very short and sweet book on drawing cartoonish people. Highly recommended. And I found out the author lives in Hay-on-Wye, given the amount of times we‚Äôve been there I wonder if we‚Äôve crossed our paths.\nOh, shit, git! If your local git guru is away, this can save the day.\nUDFs vs Map vs Custom Spark-Native Functions ‚Äì Farox2q ‚Äì Medium Some benchmarks and code comparisons between UDFs, map and custom spark functions. Sadly, you can‚Äôt implement the latter without using a custom build of Spark, and good luck deploying that to EMR\u0026hellip;\nM-16: A Bureaucratic Horror Story The surprisingly interesting story about a weapon, the M-16, and how a lot of bad decisions happened because ‚Äúcommittees \u0026amp; politics‚Äù\nTalent vs Luck: the role of randomness in success and failure A paper. This model sounds super-interesting, and I want to replicate it in Python as soon as I have a few hours available (meh)\nHow to Deal with Difficult People on Software Projects It‚Äôs funny because it‚Äôs true\nMachine learning teaches me how to write better AI This is an old post, but I have always found it really interesting. I used Normalised Compression Distance once, but I no longer remember the setting (I think it was as part of a decision tree metric, but the details escape me, it was 6 or7 years ago)\nSupervision and error handling in zio, akka, monix Zio, Monix and Akka can be used for similar things (asynchronous execution of streams/‚Äústuff‚Äù). How you handle errors is different though, and sometimes using one for its error handling can make a difference.\nFrom 48s to 5s - optimizing a 350 line pathtracer in Rust If you‚Äôve been counting, I‚Äôve been reading a lot of Rust stuff lately. I have always been interested in raytracers/path tracers (wrote one in Lisp ages ago, got up to refraction), so this was a natural fit.\nüìö Software Abstractions This ‚Äúweek‚Äù I finished the second edition of Software Abstractions, the book on the Alloy modeling language. It is pretty good. Starts as a light read, but after a while how the language works starts to be a bit too cumbersome. Luckily there‚Äôs an extensive set of examples throughout the book, and an examples section at the end. I‚Äôm itching to model something in Alloy, but I‚Äôm still unsure what.\nRemastering Star Trek: Deep Space Nine With Machine Learning The result is impressive. And got me to consider installing the app used.\nThe Pyrex Glass Controversy That Just Won\u0026rsquo;t Die Surprisingly fascinating story about why Pyrex is of lower quality lately in the States. Lucky for me, in Europe it‚Äôs still fine\nPinot Joins Apache Incubator YAQEE (Yet Another Query Execution Engine). But sounds interesting, and has a nice logo. I‚Äôve seen worse\nHow Bluetooth got its name, an interview with Jim Kardach Ye olde Harald!\nA Pi-Powered Plan 9 Cluster Plan9 is what Linux could-have-been. It was built for clusters, with file, process, sharing made easy. A long time ago I had a 2-machine cluster (1 Raspberry and a very old laptop), which I used as a storage/sharing files across two Macbooks using Plan9 from User Space syncing into a Venti file server. Ah, those were the days!\nModern art was CIA \u0026lsquo;weapon\u0026rsquo; TL;DR: The CIA funded art tours to show the capitalist West still had creativity\nMaya ritual cave ‚Äòuntouched‚Äô for 1,000 years stuns archaeologists My girlfriend majored in History, with a focus on pre-Columbian meso-american history, so I always pay more attention to articles about the area.\nRemembering a Programming Language that Helped Shape the Digital New York Times An interesting history tidbit. And a good lesson on why custom-built languages and DSLs are a blessing and a curse.\nüìö Guns, Germs and Steel I‚Äôve had this book on my Audible account since\u0026hellip; 2014 I think. And actually, I also have the print copy. It was recommend to me by my thesis advisor, and it is indeed a very interesting subject, but there are points when the Audible version is as dull as watching paint dry. I haven‚Äôt read the print version, but consider that before audiobook.\nFinal Tagless seen alive This is a response to John de Goes‚Äô talk The death of final tagless. I don‚Äôt have a definite opinion here. I like free monad approaches, since they make interpreters easy to understand and optimisable ‚Äúeasily‚Äù, on the other hand Zio looks clean, but that‚Äôs as far as I go: I don‚Äôt have a strong opinion either way on final tagless, judge yourself from both sources\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/04/2019-9-readings-of-week-x4.html/","tags":["ReadingsOfTheWeek","Python","Akka","Alloy","Maths","Drawing","Books","plan9","spark","Data","scala","Rust","Fractals","Games"],"title":"2019-9 Readings of the week (x4)"},{"categories":null,"contents":"This edition has Software engineering, formal methods, fraud, Scala. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nMessaging startup Slack is secretly an acronym for\u0026hellip; No spoilers, you\u0026rsquo;ll need to click. It may or may not surprise you\nBeautiful, Simple, Testable Functional Effects for Scala Next thing I write in a functional style in Scala, it will be using Zio for sure. This was a follow-up to a talk given at Skills Matter, and shortly followed by a podcast interview in Scala Love. Haven\u0026rsquo;t watched the talk yet, but the podcast was good.\nApple highlights best photos shot on iPhone around the world They look good. And that may be an understatement.\nFormally Specifying UIs If you\u0026rsquo;ve been following my readings of the week you\u0026rsquo;ll know I\u0026rsquo;ve been converted into a fan of formal methods. And alloy is pretty cool.\nBuilding the Hangman Game using ZIO An approachable example (in addition to the details in the post above by John himself) based in a talk John gave, detailed by Abhishek Srivastava.\nRevolut insiders reveal the human cost of a fintech unicorn\u0026rsquo;s wild rise This week the CFO of Revolut resigned his position, after (possibly) an investigation about fraud. That was an amber flag, but reading how Revolut\u0026rsquo;s CEO treats employees\u0026hellip; As a worker in the same space (tech) that\u0026rsquo;s a red. I had been using Revolut for more than a year (before I used Monzo) and I\u0026rsquo;ll be using N26 as soon as I get my card. By enrolling by the N26 link here I think I get some kind of affiliate return, I\u0026rsquo;m not sure.\nThe hard part in becoming a command line wizard In the end, it\u0026rsquo;s the hard part in becoming a wizard in anything. Math, programming, playing the ukulele.\nCasper‚Äôs clever little nightlight I don\u0026rsquo;t read many hardware breakdowns, but somehow I clicked on this one and now I want one of these nightlights.\nüìö The Storytelling Animal: How Stories Make Us Human I was attracted to the premise of this book, but it felt pretty underwhelming. It has pretty high reviews, so it may have been just me.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/03/2019-8-readings-of-week.html/","tags":["ReadingsOfTheWeek","Data","scala","Alloy","Books","iPhone"],"title":"2019-8 Readings of the week"},{"categories":null,"contents":"Formal methods, Scala, productivity. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n\nSolving Knights and Knaves with Alloy Once you start your journey down the formal methods rabbit hole (which I started with TLA+) you can never stop. This is a very good introduction to Alloy, a modelling language which seems well suited for data structure descriptions (not procedural/step-time models)\nSeeking the Productive Life: Some Details of My Personal Infrastructure As much as I don\u0026rsquo;t like Stephen Wolfram, his obsessive take on being productive echoes mine. And that worries me.\nEncryption Key Hierarchies in Alloy Next after the intro above, this is a short post about how you would set up a reasonable hierarchy of keys in an organisation. Something like \u0026ldquo;Infrastructure team owns infrastructure keys, developers own GitHub\u0026rdquo; but with more layers. Then you can automatically check somebody has access to stuff, etc. Neat.\nIs your Scala object always a singleton? The guys at SoftwareMill (excellent technical blog and people) stumbled upon this. The kind of bug that could defeat you, but they succeeded, and documented it for the rest of us.\nProving Games are Winnable with Alloy And the final instalment in this week\u0026rsquo;s formal method extravaganza, how to prove a randomised game (say, Zelda) can be winnable using Alloy.\nDon\u0026rsquo;t Let the Internet Dupe you, Event Sourcing is Hard Yep, can totally agree, I\u0026rsquo;ve hit some of the roadblocks and fun moments the author shares. As usual, some HackerNews comments can be enlightening.\nOn Being A Senior Engineer There are many definitions of what being senior is, but you can\u0026rsquo;t go wrong trying to follow these suggestions\nHold the front pages: meet the endpaper enthusiasts I\u0026rsquo;m pretty sure you didn\u0026rsquo;t know there are collectors of endpaper.\nBeating hash tables with trees? The ART-ful radix trie A synopsis of a data structure paper, about ART radix tries. They are kind-of-like tries, but try to use less memory.\nScala pattern matching: apply the unapply In case you didn\u0026rsquo;t know how pattern matching works (hint: unapply), this post will tell you.\nbuffer-expose emacs package A package released late last week, it helps you navigate your open buffers in a visual way. Pretty neat, and even with my usual 20+ buffers seems to work seamlessly.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/02/2019-7-readings-of-week.html/","tags":["ReadingsOfTheWeek","emacs","Data","scala","Alloy","TLA+"],"title":"2019-7 Readings of the week"},{"categories":null,"contents":"A couple of days ago I installed Hive from Homebrew on my Mac. Sadly, when I tried to run the hive command, I got the weird-looking error\n Photo by¬†Annie Spratt¬†on¬†Unsplash\n  Exception in thread \u0026quot;main\u0026quot; java.lang.ClassCastException:¬†class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to¬†class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader¬†and java.net.URLClassLoader are in module java.base of loader 'bootstrap')  That looked like a JVM incompatibility, so I switched from GraalVM (the one I use by default) to Java 8 (I have aliases jgrce, jgree, j8 and j11 to switch JVMs). Still, the same error regardless. Weird. Maybe Java 11 (the other JVM I have installed)? Nope, same error.\nA quick Googling confirmed that this was related to Hive picking up Java 11, but only working with 7, 8 or 9 (not sure about 9). This in turn is due to the Hive boot scripts looking for the latest JRE which is at least 7, like the hive command here:\nJAVA_HOME=\u0026quot;$(/usr/libexec/java_home --version 1.7+)\u0026quot; \\¬†HIVE_HOME=\u0026quot;/usr/local/Cellar/hive/3.1.1/libexec\u0026quot; exec \\ \u0026quot;/usr/local/Cellar/hive/3.1.1/libexec/bin/hive\u0026quot; \u0026quot;$@\u0026quot;  This will pick 11, which no longer has URLClassLoader (I think this was changed in Java 9). So, won\u0026rsquo;t start.\nSadly the only reasonable fix is modifying the scripts after installation, unless you want to just uninstall Java \u0026gt; 1.8. For me this was not an option, so I just modified the scripts by removing the JAVA_HOME condition (since I set my JAVA_HOME globally when I switch between JVMs). And crossing fingers to remember I did so next time I upgrade HomeBrew.\n","permalink":"https://mostlymaths.net/2019/02/apache-hive-and-javalangclasscastexcept.html/","tags":["Data","Mac","Big data","Hive"],"title":"Apache Hive and java.lang.ClassCastException on start"},{"categories":null,"contents":"Software engineering, adtech, psychology, python. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nFinding Lena Forsen, the Patron Saint of JPEGs I have written about Lena Forsen (previously Soderberg) before. This is an article explaining the story behind the classic picture, the issues that have arisen with it after the years and a bit of the take of the subject, Lena.\nIncrementally migrating over one million lines of code from Python 2 to Python 3 Did you know, Dropbox (the client) is written in Python? Well, I did, but wasn\u0026rsquo;t aware of its scale. And, now it\u0026rsquo;s mostly Python 3, which is good to know. Bonus points for Dropbox for using pytest as well.\nHow Criteo is trying to navigate GDPR Since I work in adtech, I need to keep up with what\u0026rsquo;s up and how everything is going. This article explains a bit the impact of GDPR on Criteo, one of the largest players in programmatic advertising in Europe. By the way, Criteo have a superb engineering blog, although it can be a bit hard to read through an adblocker. By the way, the linked post is behind a paywall. Paste the URL of the link on Google and click on the first search result to be able to read it if interested.\n10 Reasons Why GTD Might Be Failing The title of the linked article should end in for you. It lists the common problems a GTD newbie-intermediate can face. Been there, done that. Still am, probably.\nReflecting on My Failure to Build a Billion Dollar Company The story of GumRoad, the publishing site. A very interesting view on startups.\nStranglerApplication One of Martin Fowler\u0026rsquo;s refactoring approaches. I\u0026rsquo;m pretty sure you\u0026rsquo;ve done this, turns out it has a name.\nThe de Havilland Comet The story of the first passenger jet disasters, and why they happened.\nSimple dependent types in Python They may be a bit too simple for what you may be looking for, but the potential is there. Also, linked to the following, which I found ideal.\n1-minute guide to real constants in Python There\u0026rsquo;s actually a Final type coming, someday, to Python, which will make constants real constants. Looking forward to that.\nThe Dunning-Kruger effect, and how to fight it There is a quote in this interview of David Dunning which is just brilliant:\n The first rule of the Dunning-Kruger club is you don‚Äôt know you‚Äôre a member of the Dunning-Kruger club. People miss that.‚Äù\n üìöAtomic Habits This week I have finished Atomic Habits (affiliate link). I didn\u0026rsquo;t expect much, after having read so many productivity books during my life. And indeed, there was nothing new I hadn\u0026rsquo;t read before, but the presentation, examples and overall feel of the book have been excellent, I have rated it 5 stars in Goodreads, which is not something I do frequently (once per year, approximately).\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/02/2019-6-readings-of-week.html/","tags":["ReadingsOfTheWeek","Data","Python","GTD","Maths"],"title":"2019-6 Readings of the week"},{"categories":null,"contents":"Software/data engineering, psychology, formal systems. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\n Major Broccoli\n  Playing with Rust I\u0026rsquo;ve known Pere for several years, and I\u0026rsquo;m glad to see his views on Rust. Looks like not every Scala developer has to move from Scala to Haskell.\nTry out walrus operator in Python 3.8 I am the egg man, they are the egg men, I am the PEP 572: Goo goo g\u0026rsquo;joob. Well, or not. This feels very un-pythonic, and we all know the amount of flak BDFL got for that. But oh well, it\u0026rsquo;s in Python 3.8-dev. Let this serve as the weekly reminder that pyenv is excellent.\nCognitive Journaling: A Systematic Method to Overcome Negative Beliefs Last year I had been journaling on and off, and this year I have been consistent, every day so far since New Year. This has interesting approaches to understand your mind better.\nHow Jeff Bezos Turned Narrative into Amazon\u0026rsquo;s Competitive Advantage This idea is gold, but the HackerNews comments are better than the original article.\nModel Metropolis I read about Forrester\u0026rsquo;s Urban Dynamics in the excellent Thinking in Systems from Donella Meadows. And this also talks about SimCity, what else could I want?\nA Humility Training Exercise for Technical Interviewers The idea presented here is powerful: learn to remove biases from your interviews. As an occasional interviewer (and interviewee), I can totally see how this can help.\npandas blog ‚Äì Pandas Extension Arrays Extension arrays show a lot of promise, and right now there is work underway for Pandas extension arrays based on Arrow (fletcher). Although the cool work will happen when the underlying memory layout and building blocks of Pandas are actually Arrow\u0026hellip; And that is underway as well.\nDemystifying JOIN Algorithms A very good explanation of basic join algorithms, with a pseudocode that looks pretty much like Python\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/02/2019-5-readings-of-week.html/","tags":["ReadingsOfTheWeek","Python","Rust","Maths"],"title":"2019-5 Readings of the week"},{"categories":null,"contents":"Sorry for the delay, Sunday was my birthday (also, Elmo‚Äôs, and The Day The Music Died as well) and I spent the day without access to a computer.\n Software/data engineering, psychology, formal systems. Expect a similar wide range in the future as well. You can check all my weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nThe Art of Decision-Making An overview of (what looks like) pop-sci books on decision making. There are some interesting ideas, especially regarding aspiration vs ambition.\nThe Soviet license plate game and Kolmogorov complexity Excellent post as usual by John D. Cook mixing something interesting with a bit of mathematical analysis (which is also obviously interesting). Also makes Soviet license plates sound more interesting than they should.\nSpark surprises for the uninitiated I‚Äôve known about the pain of non-deterministic Spark operators (went down some of the codebase rabbit holes while investigating a weird predicate push down rule I suspect is conceptually wrong). This post will actually get you scared: how do you test this?\nRegrettable Code, Episode 1 A history about profiling a Python application and the accumulation of small decisions that lead to a large performance bottleneck.\nHigh-Performance in Python with Zero-Copy and the Buffer Protocol I wasn‚Äôt aware of the buffer class/protocol in Python, but it looks like something I should be aware of.\nSimulating blobs of fluid A long long time ago, I can still remember, I loved creating visualizations and animations. I still do, I just don‚Äôt have the time. Otherwise, I‚Äôd implement this.\nAsk HN: Top three questions for a startup before accepting a job offer? Not the first time a similar question has been asked in Hacker News, but it‚Äôs good to keep a few of this stored for future reference.\nRay: Application-level scheduling with custom resources Dask and Ray are next in my list of stuff I want to try. I love Spark, and love Scala, but the more tools in my belt, the better an engineer I can be.\nRust on iOS An updated tutorial on using a Rust library in a Swift application for iOS. I have tried, it actually works. I need a time machine or something.\nThread Pool Best Practices with ZIO The idea reminds me of how the Go (Golang) scheduler handles the mapping between goroutines and OS threads.\nThe Kubernetes Scheduler An awesome post about the Kubernetes scheduler and its internal workings, with partial TLA+ specs of the moving pieces. It may be a bit over-the-top if you don‚Äôt know a lot about K8s internals or any TLA+, but if you know a bit of two, you‚Äôre in for a treat.\nShadows used to peer around corners Technique to peek behind corners from a still picture.\nQueueing theory: The science of waiting in line Another one by John (I think he has won the readings of this week? There‚Äôs no prize, though). I‚Äôm a mathematician by training, so I didn‚Äôt get to study some of the cool (and, according to CS major friends, boring) stuff I love to hear about, like\u0026hellip; queuing theory.\nNewsletter? These weekly posts are also available as a newsletter. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here.\n","permalink":"https://mostlymaths.net/2019/02/2019-4-readings-of-week.html/","tags":["ReadingsOfTheWeek","Spark","Kubernetes","Python","scala","Rust","Maths"],"title":"2019-4 Readings of the week"},{"categories":null,"contents":"Software/data engineering, history, formal systems. Expect a similar wide range in the future as well. You can check all weekly readings by checking the tag here . You can also get these as a weekly newsletter by subscribing here.\nFermentation and Daily Life I‚Äôm not a fan of fermented food, but my girlfriend is. The article is interesting even for me.\nWhy Are Young People Pretending to Love Work? The ‚Äúgrind and hustle‚Äù gets old pretty quick.\nüìö Specifying Systems The book for learning TLA+ (and, free to download from the link above). I‚Äôm reading it right now, step by step. You can also get a paperback version from Amazon (affiliate link) but it\u0026rsquo;s kind of expensive.\nThe Perils and Pleasures of Bartending in Antarctica It kind of makes sense.\n‚ÄúO Uommibatto‚Äù: How the Pre-Raphaelites Became Obsessed with the Wombat Whomwhat?\nWhy Don‚Äôt People Use Formal Methods? As you may have realized, I‚Äôm interested in formal methods and verification. I‚Äôm not the only one, and since I now pay more attention to articles on the subject, I find more articles to share. Hillel is the author of Practical TLA+ (affiliate link), the book that finally got me to write specs.\nThe 1859 Carrington Event The idea of this happening ‚Äúnow‚Äù is actually scary.\nAsk HN: What are your ‚Äúbrain hacks‚Äù that help you manage everyday situations? You may pick up one or two tricks that can be useful.\nWhat if the Placebo Effect Isn‚Äôt a Trick? Here, take this sugar pill. You‚Äôll be cured.\nKafka at Criteo Slides from Slideshare. The scale is astounding. Note that the engineering blog at Criteo is top notch, but your adblocker is probably going to give you a hard time reading it.\nWhen Rust is safer than Haskell I‚Äôm closer to doing useful stuff in Rust than in Haskell, so it‚Äôs always good to know Rust has some nice tricks up its sleeve.\nInductive invariants More TLA+ goodness, from Lorin Hochstein.\nSpark Barcelona Meetup: Speeding up PySpark with Arrow This Thursday I‚Äôm speaking about how PySpark got faster by using Arrow internally. If you are around Barcelona please join us! Note that the slides for this talk are not up yet!\nüìö Meditation for Fidgety Skeptics by Dan Harris (note there are affiliate links in here) This is the follow-up to 10% Happier. MfFS is good, offering a more practical take than the previous one. As books to stand on its own, 10% Happier is better though.\nüìΩ 10 tips for failing badly at microservices This is a very fun talk about what you should do if you want to prevent (in an ironic way) your company from moving to a microservices-based architecture. You may get flashbacks to the Simple Sabotage Field Manual from the CIA.\nNewsletter? I‚Äôm considering converting this into a weekly newsletter in addition to a blog post. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here and if enough people join I‚Äôll send these every Sunday night or so.\n","permalink":"https://mostlymaths.net/2019/01/2019-3-readings-of-week.html/","tags":["ReadingsOfTheWeek","Spark","Rust","TLA+","Productivity"],"title":"2019-3 Readings of the week"},{"categories":null,"contents":"Software/data engineering, languages, writing. Expect a similar wide range in the future as well. You can check all weekly readings by checking the tag here.\nGoodbye, Mid-Range Shot I love a good data visualization, for a long while, long, long time ago I was a paid subscriber to Nathan Yau‚Äôs Flowing Data. As usual, a short and interesting visualization where we can discover something about the world.\nSpeed up your Python using Rust I need to try this ASAP. Write dylibs with Rust that you can use straight from Python (via the cpython crate).\nBuild Your Own Shell using Rust I‚Äôm a lot into Rust lately, and here you can find out how to call subprocesses, how to handle errors, awaiting\u0026hellip; It has a little bit of everything, even if you don‚Äôt intend to write a shell.\nIntroduction to TLA+ Model Checking in the Command Line If you‚Äôve been following my twitter or blog, you‚Äôll know I‚Äôm really liking TLA+ for formal verification. It‚Äôs not like I have a lot to verify day-to-day as a big data engineer, but as soon as there are ‚Äúbig data‚Äù microservices around, TLA+ rocks to confirm all the Lego pieces fit as I think they fit. Cutting the story short, TLA+ runs on the TLC Toolbox, which is a Java application which is not super-modern-looking. If you‚Äôd rather use Sublime/Atom/Emacs/Vim/ed using TLC from the command line is possible and not hard. Take heed of Ron Pressler\u0026rsquo;s comments on Reddit, though.\nFrom Data Types to Session Types: A Basis for Concurrency and Distribution The concept of session types seems very interesting. In a sense, Rust‚Äôs ownership/lifetime concept can model part of what session types cover.\nHow the Artificial Intelligence Program AlphaZero Mastered Its Games I‚Äôve been playing go, on and off (right now is on) for almost half of my life. Although I knew the basics already (I know some deep learning y‚Äôknow), this is a good write up anybody could understand.\nHigh-Performance Functional Programming Through Effect Rotation I try to stay away from the more crazy levels of category theory inspired programming (as in, I use 0 of it and have no huge interest), but this post (Scala) about how to optimize stacked monad transformers was very interesting.\nSoftwareMill blog: Free and tagless compared - how not to commit to a monad too early I heard Adam talk about Free \u0026amp; Tagless at the Scala Exchange 2017 (IIRC), and it was one of the clearest expositions I had seen. This post is probably another, also from him. Totally recommended, with the bonus of getting to understand tagless encoding for ‚Äúfree‚Äù\nUsing spaced repetition systems to see through a piece of mathematics I‚Äôm a big fan of spaced repetition in general and Anki in particular. Michaeel (Nielsen) uses it regularly for deeper understanding. If you want more ‚Äúsocial proof‚Äù, Derek Sivers and Gwern Branwen also recommend it dearly.\nThe three-page paper that shook philosophy‚Äîa hacker‚Äôs perspective When you can put a name on something, it becomes easier to handle. Gettier cases are such. Go read this.\nMethods for Array Initialization in Rust Just when I thought Scala offered too many ways for doing a thing, there comes Rust.\nExperience report: organising a conference I couldn‚Äôt attend Chris‚Äô LambdAle last year (I will try this), but having helped organize PyData Barcelona, all he mentions are very valid concerns and tips.\nAutomatic categorization of text is a core tool now It sounds obvious, but getting obvious staring you at the face without realizing is a problem.\nRust Performance Pitfalls I‚Äôm still far from seeing performance issues in any Rust I have written (mainly because it‚Äôs a very small amount) but it‚Äôs good to know where I can stumble.\nThe Puzzle of Proto-Elamite I love language history. If you do so too, you‚Äôll enjoy this.\nUnderstanding Rust Lifetimes Nailing this is the main issue with Rust. This is a good introduction to lifetimes.\nüìö The Haiku Handbook _Note this is an Amazon affiliate link._I have always liked Haiku (poems, the operating system is ok), and wanted to have a more formal model on them, to be able to write some someday. This is a very well-written book that reads quickly (to be fair, I skipped the chapter on Teaching)\nNewsletter? I‚Äôm considering converting this into a weekly newsletter in addition to a blog post. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here and if enough people join I‚Äôll send these every Sunday night or so.\n","permalink":"https://mostlymaths.net/2019/01/2019-2-readings-of-week.html/","tags":["ReadingsOfTheWeek","Go","Basketball","Python","scala","Languages","Rust","NLP","Maths","TLA+"],"title":"2019-2 Readings of the week"},{"categories":null,"contents":"If you know me, you\u0026rsquo;ll know I have a quite extensive reading list. I keep it in Pocket, and is part of my to do stored in Things3. It used to be large (hovering around 230 items since August) but during Christmas it got out of control, reaching almost 300 items.\nThat was too much, and I set myself a goal for 2019 to keep it trimmed and sweet. And indeed, since the beginning of the year I have read or canceled 171 articles (122 in the past week, 106 of which were read). That\u0026rsquo;s a decently sized book!\nTo help me in this goal, I\u0026rsquo;ll (or at least I hope) be writing a weekly post about what interesting stuff I have read the past week. Beware, this week may be a bit larger than usual, since I wanted to bring the numbers down as fast as possible. NOTE: The themes are varied. Software/data engineering, drawing, writing. Expect a similar wide range in the future as well.\nThe Nature of Infinity, and Beyond ‚Äì Cantor‚Äôs Paradise A short tour through the life of Georg Cantor and his quest for proving the continuum hypothesis. In the end, he was vindicated.\nStatistical rule of three What is a decent estimate of something that hasn\u0026rsquo;t happened yet? Find the answer here.\nApache Arrow: use of jemalloc A short technical post detailing why Arrow moved to jemalloc for memory allocation.\nSubpixel Text Encoding This is\u0026hellip; unexpected. A font that is 1 pixel wide.\nSolving murder with Prolog I have always been a fan of Prolog, and this is a fun and understandable example if you have never used it.\nWhat Parkour Classes Teach Older People About Falling Interesting. I\u0026rsquo;m still young, but I\u0026rsquo;ll keep this in mind for the future.\nImplementing VisiCalc The detailed story about how VisiCalc (the first spreadsheet) was written.\nThe military secret to falling asleep in two minutes I was actually doing something similar since I was like 12. It might be a stretch to say 2 minutes, but works.\nIndex 1,600,000,000 Keys with Automata and Rust Super interesting (and long) post about how FSA and FST are used for fast search in Rust (I\u0026rsquo;m a bit into Rust lately). Also, BurntSushi\u0026rsquo;s (Andrew Gallant, the author) cat is called Cauchy, something I appreciate as my cat is named Fatou.\nHow to Draw from Imagination: Beyond References An excellent piece on gesture drawing and improving your technique.\nAnatomy of a Scala quirk All languages have their WAT, it\u0026rsquo;s harder to find them in Scala though.\nChaotic attractor reconstruction An easy example in Python of Takens\u0026rsquo; embedding theorem\nHello, declarative world An exploration between imperative and functional, and how declarative fits the landscape\nPython with Context Managers Although I have written tons of Python, I never took the time to either write or understand how context managers work. This one was good.\nRaymond Chandler\u0026rsquo;s Ten Commandments For the Detective Novel You never know when you may write a detective novel. Ruben and the case of the dead executor\nSeven steps to 100x faster An optimisation tour of a piece of code written in Go, from data structures to allocation pressure.\nWriting a Faster Jsonnet Compiler A semi-technical post by Databricks about Jsonnet and why they wrote their own compiler. Serves as an introduction to Jsonnet (\u0026ldquo;compilable JSON\u0026rdquo;) as well.\nBonus Monoid font and Poet emacs theme\nToday I switched from solarized dark and Fira Code Pro to the above. It looks interesting\n Poet emacs theme\n  Newsletter? I‚Äôm considering converting this into a weekly newsletter in addition to a blog post. These days (since RSS went into limbo) most of my regular information comes from several newsletters I‚Äôm subscribed to, instead of me going directly to a blog. If this is also your case, subscribe by clicking here and if enough people join I‚Äôll send these every Sunday night or so.\n","permalink":"https://mostlymaths.net/2019/01/2019-1-readings-of-week.html/","tags":["Programming","ReadingsOfTheWeek","emacs","Data","Scala","spacemacs","Maths","Drawing","Productivity"],"title":"2019-1 Readings of the week"},{"categories":null,"contents":"The year has ended, what has been going on?\nWork During the first half of this year I have been leading a migration to Spark of several systems, one relatively straightforward and the other based on GraphFrames and a graph with ~1 billion nodes. The results so far seem excellent. The second half of the year has been mostly GDPR compliance improvements (I\u0026rsquo;ve read the whole law\u0026hellip; twice!), looking for additional large-scale data providers and preparing our systems for global scale (around 6x event data capabilities). Has been fun and challenging.\nLife  In February I moved from East Finchley to Chiswick. This meant I became a Friend of Kew Gardens, and have been there almost every weekend I\u0026rsquo;ve been in London. And you could catch me a bit earlier at The Coffee Traveller, enjoying a latte with a carrot cake muffin.  \n In February, we spent a few days in Puigcerd√† for my birthday. Not as nice as we expected. The food was good, though (as expected). In March we visited Edimburgh again, Laia was attending EdiYarn Festival. I spent the days at Waterstones, eating cupcakes and getting my reading list under control. In May I attended AWS Summit in London. Was ok-ish. Lack of coffee made us grumpy. In June I attended SoCraTesUK 2018 in Dorking, together with Carlos. I had an excellent time there, and will repeat next year if possible. We presented together Welcome to Apache Spark. I also learnt some Cobol.  \n In June as well, I presented How does that PySpark thing work? And why Arrow makes it faster? at the Python Barcelona meetup. I think people enjoyed it.  \n At the end of June we visited Bath for Laia\u0026rsquo;s birthday. Nice town, but a bit packed with tourists. We were lucky England was playing some soccer match and could visit the Roman baths without people. In July we published the first podcast of PyBCN (in Spanish). It\u0026rsquo;s not monthly, next one was in\u0026hellip; December¬†üòÜ In August we roasted a bit under the heat wave hitting the UK by visiting Mayfield Lavender field. In September I attended Scala Italy in Florence, where I got the opportunity to visit Osteria del Cinghiale Bianco again. Excellent.  \n In September I presented How does that PySpark thing work? And why Arrow makes it faster? at the Spark London meetup, feedback was positive as well. In October, I attended Spark Summit Europe in London. Met a lot of people and had a terrific time.  \n In October we took a few days off so we could disconnect, and spent them on Hay-on-Wye, as some tradition we follow says. We bought a bunch of books (I think there are no books by Roger Zelazny left there) and I did nothing. Bliss. Also, best scones ever. In November I helped a bit from afar with the organisation of PyDay 2018. I couldn\u0026rsquo;t attend, but looked excellent. We also told the world PyBCN is now an organisation you can become a member of. In December, I attended Scala Exchange for the third time, and gave a lightning talk about TLA+ (Formally Verifying Complex Systems Using TLA+). Looks like people enjoyed my talk, and I had an excellent time as usual.  \nI made minor contributions (typos, small fixes) to several open source projects (Spark, typeshed, Monix, bloop,\u0026hellip;), and also created a couple for my enjoyment: experimenting with Processing in Scala, sbt-ifttt and rb-zsh-theme.\nLearning This year I got a bit deeper into functional Scala, using GraphFrames and (in general) graph operations on big data. Got acquainted and got to hate Apache Airflow. I improved my knowledge of Akka (adding clustering and sharding to the \u0026ldquo;could do\u0026rdquo;). I also learned TLA+ and I plan to dive deeper into this rabbit hole the coming year. Started learning Rust. Made some minor stuff using HyperApp, and have been considering learning PureScript so I can write something close to \u0026ldquo;enjoyable\u0026rdquo; Javascript. I have also started playing the ukulele.\nReading My top pick for the year is without any doubt Thinking in Systems: A Primer¬†among books I read this year (19 books). Didn\u0026rsquo;t read much non-fiction, and can\u0026rsquo;t recommend any this year. According to Pocket (which I started using around June, after the GDPR fiasco of Instapaper) I read the equivalent to 18 books in blog posts since then.\nMusic/events This year I attended a couple concerts, both in London: Hayseed Dixie and Steve\u0026rsquo;n\u0026rsquo;Seagulls. I ended the year listening to a lot of covers by Leo Moracchioli¬†and progressive metal/instrumental metal like Polyphia (which eventually become boring) and Intervals¬†(which are better). All the links in this section are good renditions by each on Youtube\nGadgets Main one is that Apple finally upgraded the MacBook Air so I can have one with 16GB of RAM, so I got that one as soon as I could. It also implied getting a USB C hub and I also got a power brick, both from Anker, so I could simplify my desktop cable tangles (also several USB A to C and USB C-C cables). In no particular order, I also got\n An acoustic ukulele (soprano) and soon after, I got this electric travel ukulele (concert). To go with it I got an AmPlug (clean)  \n A mountie very early in the year. Sadly it doesn\u0026rsquo;t work with my new Air, but with the old one it was a blast. A Brydge keyboard for my iPad (heavy, but excellent) A SoundCore Motion Q¬†speaker from Anker. We\u0026rsquo;re getting another one soon to get stereo. Excellent. A Microsoft Wedge Mouse. I saw a picture and when I saw the price (just 17‚Ç¨) I got one. It works very well, and is very small. And works with a rechargeable AA battery, which I like as form factor. A eInk display for my Raspberry Pi Zero W. An hourglass. I love hourglasses. You can hear the sand from this one. A cardholder. I already had a wallet by Bellrow, and they deliver quality. A Luna Display¬†(so far a bit disappointed with the inability to map correctly my keyboard layout between Mac and iPad, so can\u0026rsquo;t type at all, but the stream quality is very good) A bunch of twisty puzzles. I didn\u0026rsquo;t have any 2x2 and I really like it now. Also, magnetic 3x3 are excellent.  \n The Little Lisper for my birthday  \n An excellent compact fountain pen from Kaweco (the liliput) To go with it, I got a 0.7mm pencil from them as well (the classic brass) I got also a 2mm titanium pencil from Kickstarter A knucklebone from AroundSquare. Excellent for manipulating while thinking A new spinning top, the Rain Drop from NWTops (to join last years\u0026rsquo; Yakima) Several (1, 2, 3, 4) cardistry decks. The Mandala is incredibly gorgeous, the Edge is a design I love (I have the deck as well) and when I saw the trainers I knew I wanted a couple, just because.  And we got mugged!\n\n","permalink":"https://mostlymaths.net/2019/01/2018-year-in-review.html/","tags":["Trips","Python","Christmas","Time Management","iPad","Maths","Books","Spark","Open source","Scala","Mac","TLA+","Github","iPhone","YearInReview"],"title":"2018: Year in Review"},{"categories":null,"contents":"This is how I handle the dreaded GTD (Getting Things Done) weekly review when using Things 3.\nRequirements This post will only make sense if\n You are a user of¬†Things3, and heavy on Getting Things Done Shortcuts app¬† You have or can install the shortcuts¬†_Weekly Review¬†and¬†Update weekly review hash_ You have Drafts or Bear app (either could be used, the shortcut linked below uses Drafts)  Initial setup (around 10-30 minutes depending on the amount of projects you have) Create a note in Drafts (you can put it in the note archive) with some text, does‚Äôt matter what you write. I used the letter a when I created these shortcuts and the weekly workflow.\nGet the document id from the draft (with the draft open, press the i Information button, select UUID and press copy) and set it up on all the shortcuts, as the UUID in the action Get Draft Contents.\nRun the shortcut Update weekly review hash. This will open your draft and add a new line below it, should look similar to 54f74fbfb94518a527a36474dc904c25 (this is the text you introduced, hashed). Copy this and add it to the end of the Notes section of any project (or, if you fancy, task) you want to be included in your weekly review in Things3. You only need to do this long manual part once. Note that you can‚Äôt add areas to review (since this is based on notes and areas don‚Äôt have notes).\nFinally, add your Things3 authorization token to the Weekly Review shortcut.\nUsage When the time to review arrives, run the shortcut Weekly Review. This will open Things3, searching for any project containing the hash in your draft. Switch to selection mode, select a bunch of projects (I usually do it in blocks of 5-10), press the 3 dots ‚û°Ô∏è¬†Share ‚û°Ô∏è Copy link. Then press the Shortcuts ‚Äúgo back‚Äù link at the top left of your device to go back to Shortcuts.\nThe Weekly Review shortcut will now work with your clipboard contents to modify these projects. First, you‚Äôll get a notification telling you how many projects are going to be reviewed. Once you press OK, the first one will open in Things3. Adjust the project as needed (edit the title, schedule it, add tasks\u0026hellip;) and then delete the hash from the end of the notes section (you can do this later, but I find it easier at this point). Once finish, press the Shorcuts ‚Äúgo back‚Äù button to go back to Shortcuts. This will bring you back to Things3, but at the end of the notes section you will have a different hash. This is as what it should be üòÉ¬†Press the Shorcuts ‚Äúgo back‚Äù again, and this procedure will repeat for all the projects you ‚Äúshared‚Äù in the previous step.\nStep wise it looks like:\n Run Weekly Review Select some projects \u0026hellip; -\u0026gt; Share -\u0026gt; Copy link Go back to shortcuts via the quick link Say OK to the amount of projects to review Review the project Delete the hash from notes Go back to shortcuts You are back on Things. You can still edit the project if you have anything to add or do Go back to shortcuts  And here‚Äôs a video so you can see it in action:\n  By deleting the previous hash you ensure already reviewed projects don‚Äôt show again if you exit the workflow from Shortcuts and need to run Weekly Review again. Also makes the review process start-stoppable, so you can do a few projects today, a few tomorrow and then ‚Äúfinish‚Äù.\nIn writing, it sounds slow, but it‚Äôs super fast in practice (weekly review took me around 2 hours before, now takes me around 30-45 minutes, the amount of projects I have has increased, not diminished). The main advantage I have is that I can specify which projects are to be reviewed and which not beforehand (for instance, if I decide a Someday/Maybe project should move to action state, I just add current week‚Äôs hash to its notes and is ready to be reviewed).\nOnce there are no projects left to review, run Update weekly review hash, which will set you up for next week‚Äôs review.\nKeep in mind though you need to remember to add this week‚Äôs hash to any new project you create. Usually this just means open another project, copy the hash from it and add it to the notes section. Usually I do this as part of my daily inbox purge: I create new projects outside of any area (or more like, in the area I consider to be the project inbox), and when I clean my inboxes I add the hashes.\n","permalink":"https://mostlymaths.net/2018/12/things3-weekly-review-mode-shortcuts.html/","tags":["Ô£ø iOS","GTD","Productivity"],"title":"Things3 Weekly Review mode shortcut(s)"},{"categories":null,"contents":"This week I have been working a lot with a relatively large dataset on a Spark shell. It was a graph with 1 billion nodes and 2 billion edges that I wanted to analyse with GraphFrames (the successor of GraphX on Spark).\nThis is quite large: before running the graph algorithms I did some exploratory analysis, and each step took at least 10 minutes. Checking stage/task progress bars or generated analysis plans is only interesting for the first fee\u0026hellip; I wanted a way to get a subtle notification when the process finished. This way I could work on something else while the process is doing its thing, and I could come back for the next step as soon as the data is ready.\nI have most of my notifications deactivated, though. No emails, Twitter, WhatsApp. Nothing shows on my Mac screen, few show on my phone or watch, and only a handful are allowed to vibrate (none to make a sound). What could I do to get a notification? Even if I overrode some of my settings, I needed something that either could work cross-device or could make my watch vibrate, since it‚Äôs the only device I have always with me.\nWell, IFTTT can actually do that. IFTTT is a service to plumb external services with iOS/Android devices, to build workflows. It also has a handy webhook you can use as a trigger for workflows. And the IFTTT app can send notifications, to the phone or watch. Ticks all the boxes.\nTo use the webhook (a POST endpoint) from Scala I used a library I had never used before: scalaj-http It seems highly convenient for these quick-and-dirty ‚Äúmake a request‚Äù in a program that includes no other http library.\nWhen I have some action I expect to run for a while, I‚Äôll finish the command with ; notif(‚ÄúProcess X finished‚Äù) This way, when the command finishes my wrist will gently buzz and I‚Äôll know I can go back to work more on it.\nIt is worth noting that this would also work for a long running bash or sbt command (I‚Äôm looking at you, Spark test suite), or compiling boost or anything else that can, basically, run curl against an endpoint at the end of the process.\nBy the way, to run a spark shell with this library, use\nspark-shell --packages org.scalaj:scalaj-http_2.11:2.3.0` Remember that multiple packages are separated by commas in case you also happen to, you know, use GraphFrames.\nOh, and if you happen to want notifications after an sbt task, you can use my sbt-ifttt plugin.\n","permalink":"https://mostlymaths.net/2018/05/notifications-from-spark-on-apple-watch.html/","tags":["Ô£ø Watch","Spark","Open Source","Scala","sbt","Ô£ø iPhone"],"title":"Notifications from Spark on an Apple Watch (via IFTTT)"},{"categories":null,"contents":"Even though I have been a long time user of oh-my-zsh on zsh (moved from plain bash to zsh like 10 years ago), I have been minimal on my use of its theme capabilities. I have used the default theme forever: robbyrussell. But recently I was showing my friend @craftycoder the tweaks I have on my system (fzf, autojump, etc) and he showed me this theme, agnoster.\nIt had several pieces I liked:\n Powerline-style prompt Git status Virtualenv detection  I wasn‚Äôt sold on some of the default decisions, so I decided to completely tweak and remove stuff I didn‚Äôt need. You can have a look here.\nWhat did I want to modify?  Too long branch names. Looks very nice with master but is a bit more troublesome with feature/SAS-4028/kubernetes/poc I don‚Äôt care that much about the path. Current directory is enough Usually I like knowing in which git project I am in better   Path I played around with several options to make the path look as I would like. I started with the shrink-path Zsh plugin, but I didn‚Äôt totally like how it looked. I cobbled together a bit of awk to get 2 or 3 characters out of each piece of the path instead, it didn‚Äôt look much better but was taking much more space. Ended up with just current dir, this is excellent actually.\nBranch name Paths at work are of the form {kind}/{ticket number}/{description}. I don‚Äôt want to know all the pieces. Kind is any of feature, hotfix (very rarely) or occasionally might be something else. It could be shortened to just a few letters. In general, I like seeing the full ticket number (no specific reason). I don‚Äôt need to know the full description, it can be shortened to 4 or 5 characters. Awk to the rescue. I love awk. With it I reduced the branch names to what I wanted, additionally I wrote a small checker that makes Spark‚Äôs style pull request naming also be shortened. You can check the awk approach here.\nGit project Knowing the project and current folder is everything I need to know. If I need to know more, I just pwd.\nError under last command, root, background processing I don‚Äôt like my prompt to change shape. I changed the error reporting to switch colours of the current directory to red. And dropped background processes and root reporting, since I‚Äôm never root on my machine, and never run anything in the background unless it needs to be globally.\nUser information I‚Äôm usually pretty sure which user I am, so\u0026hellip; Removed it, I prefer a shorter prompt if possible.\nSome helpers I added a couple of helpers, reusing some of the code/ideas: jump to Github and jump to JIRA. You can see them in the repository.\n","permalink":"https://mostlymaths.net/2018/04/modifying-agnoster-theme-for-zsh.html/","tags":["Ô£ø Mac"],"title":"Modifying the agnoster theme for zsh"},{"categories":null,"contents":"A few days go I played a bit with a naive implementation of Bloom filters in Python. I wanted to time them against just checking whether a field is in a set/collection. I found something slightly puzzling: it looked like the in worked too fast for smaller lists. And I wondered: maybe small lists are special internally, and allow for really fast lookups? Maybe they have some internal index? This raised the question: how does in find stuff in sequences?\nInstead of reading the documentation I delved into the cpython source. Skipping the documentation was a bad idea, since it is not only pretty comprehensive but explains everything‚Ä¶ if you know what you are looking for. But a dive into this big pile of C was more fun. I was also stupid enough to not Google the answer until I was editing this post‚Ä¶ When writing this, I found out this excellent Stack Overflow answer covers more or less what I explain here.\nThe in keyword (defined here) is actually a shorthand for running __contains__ from the target object, you probably know this already. Your class will be able to provide in if you add this magic method, you can read about this in the first chapter of Fluent Python. But tracing this inside cpython is a bit cumbersome and got me diving into interesting pieces of the code. By the way, how the Python compiler works is documented here.\nFirst, after we have parsed the code and generated a parse tree from our text, we go to the abstract syntax tree. Converting the string in as part of some node of Python source in this tree into an In here:\n And now, what does actually in do? Well, we need to move forward in the compilation chain, and check compile.c:\n This is inside a function called cmpop, which is called when we find the COMPARE_OP opcode. This is the opcode we‚Äôd see by disassembling anything running in or == or any other comparison operator (all comparison operators are in the same basket, see here). We can follow the route through ceval.c now:\n So, we are calling this PySequence_Contains thingy. A bit more grep and we can find it defined in abstract.c:\n And now we can see what it does:\n Get a pointer to the sequence‚Äôs base sequence methods in the C struct slot tp_as_sequence If there is a sq_contains method pointer there, invoke it and return Otherwise, use iterative search  Hey, where is my __contains__? The magic happens on new object/class/type definition: typeobject.c The base object all classes extend from looks like the following struct (from object.h):\n This means that, technically, all objects have a field in their defining struct for sequences: tp_as_sequence. This is populated when we define a new class (which internally is known as type) in typeobject.c. Slots are populated from what is essentially a dictionary of methods by invoking fixup_slot_dispatchers. This maps the python name __contains__ to the corresponding slot in the struct, sq_contains and defines which function sets it up, slot_sq_contains:\n Built-in objects (and likely libraries with C extensions) implement these directly in C, and point its slot to the C method:\n Finally, this method looks for a method defined in the class and called __contains__. If it is None (that is, it is defined and is None), object is not a container, that‚Äôs it. If it is not defined (hence the null, and this one is actually puzzling\u0026hellip; reduces to it not being provided when defining the class\u0026hellip; I think), Python falls back to iterating for search using __iter__ (which is what eventually gets called under PySequence_IterSearch). If this is also not valid or available, an error returns, following a chain of -1 in the method lookups.\nIf you have been paying attention you‚Äôll see that we are actually deferring to iterative search in two places: when defining the slot in sq_contains but also when invoking PySequence_Contains. I‚Äôm not 100% sure about why this is the case, and experimenting with the REPL does not get you very far, since you can never be sure if you are hitting PySequence_Contains -\u0026gt; PY_ITERSEARCH_CONTAINS or PySequence_Contains -\u0026gt; sq_contains -\u0026gt; PY_ITERSEARCH_CONTAINS without changing the messages (and I don‚Äôt feel like recompiling Cpython). Weirdly, the second case should be faster since it is going straight for the method via the slot without needing an extra method lookup.\nAs expected, dictionary lookup is fancier. It is a common and known performance improvement in Python to change lists or other sequence-like datatypes for dictionaries, since they show the best performance for most operations. Since internally in Python everything from methods/functions to classes is implemented in one way or another as dictionaries (or reusing the machinery that is built for dictionaries), anything that speeds dictionaries up, speeds the whole of Python code. Of course, dictionary lookup is usually fast no matter the language: hash table lookup in general (leaving aside how collision resolution might be implemented in lookup) is O(1) fast. Note that below we have the macro: #define PyUnicode_CheckExact(op) (Py_TYPE(op) == \u0026amp;PyUnicode_Type)\n There even is a specialised method for cases when the hash key is known (not sure of the use case, since magic methods are hardcoded in the object structs, maybe it‚Äôs used to optimise tighter loops?).\n And if you wonder how key in dict works, it is of course by introducing the method in the struct for sequences. The snippet below is from dictobject.c, as the methods above.\n And here finishes my exploration of cpython to figure out how in contains. Not sure about you, but I had a lot of fun.\n","permalink":"https://mostlymaths.net/2018/04/how-does-in-keyword-work-in-python.html/","tags":["Python","C","github"],"title":"How does the 'in' keyword work in Python?"},{"categories":null,"contents":"I ran into this problem with sbt dependency resolution around 7 weeks ago. I was in a hurry, so I commented out the offending import (since it was not in the subproject I was working on, so was not needed for the run I was in) sent my commit to the heavens and CircleCI was happy.\n[trace] Stack trace suppressed: run last service/*:update for the full output. [error] (service/*:update) coursier.ResolutionException: 1 download error [error] Caught java.io.IOException:¬†Server returned HTTP response code: 416 for URL:¬†https://repo1.maven.org/maven2/org/graylog2/gelfj/1.1.14/gelfj-1.1.14.jar¬†(Server returned HTTP response code: 416 for URL:¬†https://repo1.maven.org/maven2/org/graylog2/gelfj/1.1.14/gelfj-1.1.14.jar)¬†while downloading¬†https://repo1.maven.org/maven2/org/graylog2/gelfj/1.1.14/gelfj-1.1.14.jar  I was not happy though. For the next weeks (sounds like a lot, but it was more like 2 commits), every time I had to work on this project I was commenting the import to get it to compile/run/test. Until I was fed up enough to check what the problem was.\nWhat is response code 416 This is Range Not Satisfiable. This means that either the file we are requesting does not have this range available: it is shorter, or the range is malformed, or who knows. The expectation should be that under a 416 error, a full request is issued, but this was not the case with Coursier (I created the issue and submitted a PR to fix it, should be fixed in the next release).\nSo‚Ä¶ Maven Central is not able to answer range queries? Some edge case is being hit? And, what are range queries used for? This one is easy, for resuming partial downloads.\nThe likely culprit was me (or my network) stopping sbt while it was fetching the libraries, at some point in the past‚Ä¶ maybe. There is a partial download somewhere. Easy fix: clean up the partial download that is lying there, then update. Problem is, somewhere can be more than one place with coursier. Also, I wasn‚Äôt sure where the problem was coming from.\nWhat to remove In my case, I had to remove the coursier local cache at \\~/.coursier/cache because this is where the partial download for gelfj was. But it might have been any of .ivy2/cache or .m2/cache. Maybe, even, sbt cache at .sbt/ . Or the ensime cache.\nReproducing, fixing I managed to reproduce it relatively easily. Open any location in your .coursier/cache/v1 folder containing a JAR file. Move said jar to blah.jar.part. This way, it has full size as a partial download, and the requested range in a partial download request will be invalid (actually this was what was happening in my case: Coursier died just before moving .part to .jar). If you run sbt update under coursier on any project using this JAR, resolution will fail with a 416.\nFixing it was straightforward (the code base for coursier seems easy to search) by adding a check for this return code in the area that resets the connection if the returned headers are not valid.\nTo test the functionality I used sbt-plugins/publish-local to create a SNAPSHOT build I could set in my .sbt. Once I got the bug manually tested I ran the tests suites. I wanted to add a test, but this seemed untestable under the current suites, so I pushed and waited. The lead maintainer gave me some pointers on how to create a test using the current systems (I got close but didn‚Äôt work in the end), and then, a PR by wisechengyi added several helpers for testing a PR he created in a similar situation, so I could add a test to mine. And done!\n","permalink":"https://mostlymaths.net/2018/03/coursier-resolution-failing-with-http.html/","tags":["opensource","scala"],"title":"Coursier resolution failing with HTTP method 416 in sbt"},{"categories":null,"contents":"Down into some net rabbit hole, I stumbled upon a review of Work Clean. I chuckled: a productivity book, philosophizing about how cook‚Äôs approach to preparation (mise en place) would fix all our problems? Bring it on, I have a long commute.\nActually, I found the book surprisingly good if you stick to the practical side and discard the hyperbole. As an occasional home cook with a big dose of planning and OCD built into me, I got the point.\nHere I‚Äôll share some of the key takeaways I got. I recommend you get the book, by the way.\nCommit to being honest with time. Plan daily. If you are anything into GTD (David Allen‚Äôs Getting Things Done), daily planning, weekly reviews and in general a big amount of overhead in your system is probably already a given. But this is probably #1 in my book. If you plan your day (preferably the evening before or at least, before really starting it) you‚Äôll have a better sense of where you stand and how you are doing with your day. Proactive, not reactive.\nImmersive focus vs process time  Remember, anything that needs your input or feedback on a project to keep it moving forward is process work.\n This is a distinction I had never paid attention to. Process time is work you can ‚Äúpay in advance‚Äù. In a kitchen, this would be starting the oven so it‚Äôs hot when you need it, while you chop veggies. Roasting bell peppers: they‚Äôll roast while you prepare something else. Process work was just scrubbing and placing into the oven.\nIn more mundane, office style work, this would be part of delegating, communicating and unblocking your peers. Start the day unlocking and unblocking the work of others. Communicating, requesting what you need lets you keep the day going.\nAlways be unblocking Try to unlock all your projects, goals, missions. The question to ask is what is keeping me from pushing forward? What is the show stopper?\nLikewise, try to unblock (specially if you are the blocker) your colleagues. If you work in an Agile environment you‚Äôll be familiar with the standup process, where a daily status meeting is quickly held by members of the team, and is when any blockers (operational, logistic, personal) are raised.\n(or you can also take the Always be knolling approach)\nCounting mistakes: keeping a mistake log Kaizen is a fabled Japanese term in the manufacturing/productivity world. It is translated usually as constant improvement. But there is nothing to improve if you don‚Äôt know where you are failing.\nKeeping a mistake log is the way to continually improve. Find where you failed (no need to be anything life threatening: if you misplace your keys, it‚Äôs a failure), log it and strive for improvement. We do this constantly at work: any failure generates a postmortem, and from it we plan to prevent the same mistake from happening again.\nDistraction routines Another interesting approach. What to do when you can‚Äôt concentrate or need a break from your current project? In other words, have tasks, projects or goals for when you don‚Äôt feel like working more on what you are doing now. Who has not sorted their closet to avoid other work? This is the same, but without avoiding the important work. It‚Äôs only a break.\nFinisher Try to finish everything you start. The more projects you have lying around unfinished, the larger burden you‚Äôll feel. If you can‚Äôt finish something, prepare the task for picking it up. Write down the next steps, prepare any tools needed. Schedule a follow up session.\nThe approach to routines Routines, for the author are not actions (nor habits) but placeholders for actions. You can have a commute routine: you are sitting, bring so and so devices, can do so and so. You can fill this routine with several different actions.\nHaving a clear idea of which kind of actions can be fillers for each of your routines is key to optimizing your time (if you want to).\nConclusion It may not have been a groundbreaking read, but I was surprised by the interesting ideas and the exposition. Focusing on cooks was kind of a fun take for a productivity book, and what made me pick what I would have otherwise skipped. Pick it up, you may get some interesting idea.\n","permalink":"https://mostlymaths.net/2018/03/book-review-work-clean.html/","tags":["Productivity","Books","Review"],"title":"Book Review: Work Clean"},{"categories":null,"contents":"I had always wanted to play with Processing (after leafing through The Processing Handbook¬†and Visualizing Data some years ago). My general dislike for Java or the JVM made me just play a short amount of time with processing.js something around 2011 (there was a native processing.js application for iOS, I used it for a while on my iPad and iPod Touch).\n Zoomin\u0026rsquo;\n  But, times have change and I‚Äôve been working with Scala for 2 years already. Since Processing is built on top of Java, using it from Scala should be easy (or doable), but finding details (specially not involving using IntelliJ or other IDEs) is tricky. I could not find anything useful so I had to patch it up from several sources.\nThese are the steps I had to follow to get it running on Mac OS, with Java 8 and Scala 2.12 (the version of Scala is not that important though, and after all is set in the SBT build).\nClone my sample project You can find a minimal sample project here. I‚Äôm using Spire for its implementation of complex operations (also, I have wanted to try this library for a while), so this comes as an extra dependency in addition to the OpenGL bindings for Java.\nYou can run sbt update while you do all other steps, since fetching the dependencies can always take a while.\nThis will draw the Mandelbrot set using the Distance Estimation Method. I first found this algorithm in The Beauty of Fractals and have liked ever since. It is the algorithm used for the header on this blog and on my LinkedIn profile. A pity it‚Äôs not as easy (or even possible) to derive for entire transcendental functions, otherwise I would have used it for my paper.\nIt\u0026rsquo;s a straight implementation to show a bit of Processing and have a nice image, but it has no antialiasing, no controls for iterations or parameter tweaking. Zoom and adjustments are automatically picked by a really dumb scaling (it shows as you start zooming) and there is no colour palette (nothing prevents adding it except that it would add complications).\nIt\u0026rsquo;s not the nicest Scala ever. Processing is based on Java, and to get some things working mutability seems to be the best approach. For now.\nInstall the native libraries for jogamp Jogamp is the set of multimedia API bindings for Java (binds to OpenGL, for instance, with the jogl sub-package). For Processing we need to install the native libraries (jnilibs in the case of Mac OS, dlls for Windows, so for other Linux systems) into our Java classpath.\nTo do so, first download the full jogamp 7zipped package from here. On uncompress, move all jnilibs in the lib/macosx-universal folder to somewhere in your Java library path so Java can find them (or, alternatively, change your path). You can easily look which paths form it by firing a Scala REPL and running\nSystem.getProperty(\u0026#34;java.library.path\u0026#34;) In my system this points to\n~/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java and I put them in the first (since it seems user specific)\nDownload Processing You need the core library from Processing in jar format to use in your builds. Just download the processing app, and get core.jar from the Contents/Java folder in the application bundle. Place it into your lib folder.\nAlthough I could add it to the Github project (this core is LGPL), I prefer leaving this as a manual step to make sure anyone trying always has the latest version of Processing.\nReady to go\nsbt run If everything went fine you should now see the following (after some time computing):\n The beetle\n  And, if you click randomly a few times\n More zoomin\u0026rsquo;\n  You can also try to find the magical command that gets you a coloured gradient\n Shiny!\n ","permalink":"https://mostlymaths.net/2018/03/processing-and-scala.html/","tags":["Scala","Visualization","Fractals","Maths","Processing"],"title":"Using Processing from Scala"},{"categories":null,"contents":"A few months ago I stumbled into the problem of Akka logging, specifically ClassNotFoundException when using akka.event.slf4j.Slf4jLoggingFilter, just by following the details of the Logging - SL4J section of Akka documentation.\n Make it so\n  Of course, the error source is obvious in hindsight, but in the moment the fact that this was a multiproject build with several dependency paths made me miss a crucial reason for longer than I want to admit:\nYOU NEED TO ADD THE SL4J IMPORT IF YOU WANT TO USE SL4J FOR LOGGING!\nAdd this to your dependencies (I\u0026rsquo;m assuming you have a val for akkaVersion to DRY):\n\u0026#34;com.typesafe.akka\u0026#34; %% \u0026#34;akka-slf4j\u0026#34; % akkaVersion","permalink":"https://mostlymaths.net/2018/02/classnotfoundexception-for-akka-logging.html/","tags":["Scala","Actors","Akka"],"title":"ClassNotFoundException for Akka logging"},{"categories":null,"contents":"Almost two months ago (time sure flies) I attended for the second time the conference Scala eXchange, one of the largest Scala conferences in the world, and which happens to be 1 tube stop from the office you can find me from time to time in London.\nAlso happens to be an excellent conference, and I‚Äôm repeating next year (yes, I already got my tickets). For those who don‚Äôt know, Scala eXchange is a 2-day (plus an unconference day) conference in central London, bringing most of the library developers you love to talk about cool stuff.\n Stop. Scala Time\n  Keynote: The Maths Behind Types with Bartosz Milewski We started with the big category theory guy. In case you don‚Äôt know, Bartosz is the author of the widely loved series of videos on Category Theory for Programmers. Haven‚Äôt watched them yet (I don‚Äôt have fond memories of Category Theory when I was studying abstract algebra), and from what I heard from people who have, I had the luxury of seeing a short intro to almost half of the series in just a conference session. I got away with a bit better understanding of the relationship of the vague notions I remember from CT (universal properties/objects, final objects, etc) with type theory. All in all, very interesting and a good start.\n Bartosz Miljewski\n  Beware! There\u0026rsquo;s a functor behind you!\nCoffe break! I caught up with the Scala Madrid gang, since they had a stand to promote the meetup. Got a free copy of Dave Gurnell and Noel Welsh Advanced Scala with Cats at the Underscore booth and drank a lot of coffee. I suspect I also stumbled on Jon Pretty and caught up on what he was going to present, but might have actually happened a few coffees later.\n The Bear and the Dotty\n  Free Monad or Tagless Final? How not to commit to a monad too early by Adam Warski This was the first time I saw Adam presenting, and was well worth it. My knowledge of tagless final encoding is\u0026hellip; shallow, to say the least (and not like my knowledge of free is excellent, but is better) and I left this talk feeling like I learnt a lot. The best way to leave a talk, I think. I also found later that Pere has a comparison of them, also adding the Eff monad to the mix. Be sure to check his company‚Äôs (SoftwareMill) blog for a wealth of interesting posts. As well as subscribe to ScalaTimes, which they curate weekly.\n ‚ô¨ So Tagless can\u0026rsquo;t you see, I want to break Free¬†‚ô¨\n  Farewell Any =\u0026gt; Unit, Welcome Akka Typed! with Heiko Seeberger I had read stuff by Heiko (for instance, a post on using akka-testkit), and had started having a look at the new typed APIs, but seeing it live-coded by the person who wrote a big part of it is priceless. Now, I need to rewrite my unfinished, unpublished ad server in akka-typed! I had already seen Daniela‚Äôs talk (was on the same slot) A pragmatic introduction to Category Theory at Scala World earlier in the year (and, IIRC with longer time so it was almost a workshop, enjoy the video) so I skipped it. But can recommend, was excellent.\n To Akka or not to Akka\u0026hellip; Actually, there\u0026rsquo;s no question\n  Lunch break Had lunch with a Scala friend (hi there Carlos!) while explaining which talks I attended and exchanging impressions on the ones he attended. Also discussing freelancing/contracting, situation in Spain‚Ä¶ Standard stuff.\n Meow-some\n  Keynote: Architectural patterns in building modular domain models with Debasish Ghosh It may have been my usual after-lunch sleepiness, but I didn‚Äôt enjoy this talk, even if it seemed interesting overall. Might need to rewatch the video to get a second impression.\nShapeless is dead! Long live shapeless with Miles Sabin This was a bit too deep into the internals of shapeless, but Miles is a great speaker so it was quite fun, even if I didn‚Äôt get a lot of mileage out of it (yet).\n Turning the problem around?\n  Introduction to Freestyle and Freestyle RPC with Raul Raj√° After getting a better grasp on the free vs tagless dichotomy earlier in the day, I got to enjoy Raul‚Äôs presentation on the library he has written with the other folks at 47 Degrees (they are also the organisers of Lambda World and LXScala and maybe others). The gist of this library, don‚Äôt bother with free or tagless: use freestyle and you can switch from one to the other as you see fit with ease.\n He walked around as I was shooting this picture\n  Lightning sessions: Optic algebras This is the only talk I remember, by Jesus Lopez. It was very interesting, but would love to see a full talk on it. I got into the wrong room for the second lightning, and chose wrongly for the third, so won‚Äôt even mention.\nKeynote: The Magic behind Spark with Holden Karau I‚Äôve had the pleasure of hearing Holden speak something like 6 times already, and she always delivers fun talks. I mostly knew this one, since it was a Scalafication of the keynote she gave on PyData Barcelona 2017 (which focused on the Python side of things, you‚Äôll also see me introducing her first time in the morning, by surprise, before coffee‚Ä¶). You won‚Äôt see garden gnomes the same after this talk.\n Take the red pill\n  Freestyle, Free and Tagless: Separation of concerns on steroids with Micha≈Ç P≈Çachta This one was mind blowing, enjoyed a lot Micha≈Ç ‚Äôs style. After the warmup on free/tagless/freestyle the day before, I finally got the gist of why we bother with all these programs-as-data-kind-of-functional-encodings. Ticked for several rewatches. You can find the slides here.\n But, which is the Good, the Bad, the Ugly, Micha≈Ç?\n  Building scalable, back pressured services with Akka, with Christopher Batey This was an interesting, technical talk about services, TCP and backpressure. A bit too close to metal for what I do currently, but good to be aware of. Also, Christopher gave an excellent presentation, first time I‚Äôve seen him, will repeat.\nImpromptu: Using dependent types to build a better API for async call graphs with Jon Pretty I had seen a previous version of this talk at the London Scala User Group meetup, and understood nothing. This time though I got it (not sure if Jon did anything magical with the talk or it was me knowing more), and it has gotten me thinking about similar, graph-related problems and the approach taken (use the types, Luke!) Also, Heiko raised an issue in the repository (since, the code fits in a slide!) and I wrote the small PR to address it. Now I want to do something more useful for the library than that though!\n Standing room for Jon!\n  A reactive database of facts with Peter Brachwitz I wasn‚Äôt overly interested in any of the talks in this slot, so went with this, somehow ‚Äúdatabase of facts‚Äù in my head sounded like Prolog, which made it interesting. It was not (for me), it was more like how to access Datomic with Scala/Akka and doing it properly. Not specially useful for me, but probably is for someone else.\n??? I sincerely don‚Äôt remember which talk I attended in this block. I‚Äôm pretty sure it was not Peter Hilton‚Äôs How to name things, since I saw that one last year (was great). It might have been Refinement types in practice with Peter Mortier, but don‚Äôt remember anything except vaguely mentioning refined types to a coworker for an API we have. Okay, I just checked the video and definitely it was Peter‚Äôs. You can find the slides here.\nKeynote: Composing programs by R√∫nar Bjarnason Coauthor of The Red Book¬†of Scala (beware, affiliate link), and an excellent explainer. This was an outstanding close to a very categorical conference. Even though I‚Äôm a mathematician, my working knowledge of category theory has improved 100x after learning Scala and seeing how my colleagues here approach problems in a very categorical, functional, typed way of seeing the world.\n Wat\n  Unconference Last year we had a PR hackathon, where together with Carlos we contributed a WIP for regexes to scala-native. This year we had more of a workshop/live coding event, where we could choose among subjects. I don‚Äôt remember all of them. Raul was there for Freestyle (missed on this one). There was one about writing stuff for Minecraft in Scala\u0026hellip; Well, I attended what I think were the coolest: how to actually use Akka Typed, with Heiko and a tour of typelevel libraries and how type classes help in the implementation with Travis Brown. They were oh-so-interesting.\nNext year, again and more.\n","permalink":"https://mostlymaths.net/2018/02/scala-exchange-2017.html/","tags":["London","Category Theory","Conferences","Spark","Scala","Maths"],"title":"Scala eXchange 2017"},{"categories":null,"contents":"I am trying to make these posts a tradition (even if a few days late). I thought 2016 had been a really weird and fun year, but 2017 has beaten it easily. And I only hope 2018 will be even better in every way. For the record, when I say we, it means Laia and me unless explicitly changed.\nWork Everything work related has gone up. More work, better work, more interesting work. Good, isn‚Äôt it?\nAs far as my consulting job in London, the most relevant parts would be:\n Lead a rewrite and refactor of the adserver (Golang) to improve speed and reliability. Migrated a batch job from Apache Pig to Apache Spark to be able to cope with larger amounts of data from third parties (now we process 2x the data with 1/10th of the cost). Planned an upgrade of our Kafka cluster from Kafka 0.8.2 to Kafka 0.10.1, which we could not execute as well as planned because the cluster went down. Helped save that day together with the director of engineering when that happened. Was part of the hiring team, we‚Äôve had one successful hire this year (passed probation, is an excellent team member and loves weird tech). We hope to enlarge our team much more in the coming year. Put a real time service in Akka in production, serving and evaluating models generated by a Spark batch job.  We also moved offices, now we have a free barista ‚Äúon premises‚Äù. Free, good quality coffee is the best that can be done to improve my productivity.\nIn April I got new business cards (designed by Laia, you can get your own design if you want, contact her):\n  I kept on helping a company with its SEO efforts, and as usual patience works. Search traffic has improved 30% year-to-year, so I‚Äôm pretty happy with it. Let‚Äôs see what the new year brings.\nI became technical advisor of a local startup (an old friend, PhD in maths is a founder and works there as data scientist/engineer/whatever), trying to bring data insights to small and medium retailers. I help them with technology decisions where I have more hand-to-hand experience, or know where the industry is moving.\nLife Traveling up and down as usual (2-3 weeks in London, then l‚ÄôArbo√ß, then maybe somewhere else‚Ä¶) sprinkled with some conferences and holidays.\nRegarding life, the universe and everything, what I‚Äôve done and where I‚Äôve been\n In February we visited Hay-on-Wye again, for my birthday In March I convinced Holden Karau (was easy: she loves talking about Spark :D) to be one of our great keynote speakers at PyData Barcelona 2017 In late March we visited Edinburgh and Glasgow In early May I attended PyData London to be able to prepare better for ours. Met some great people there. A bit later in May I visited Lisbon for LX Scala, thanks Jorge and the rest for the great work And at the end of May, we held PyData Barcelona 2017, where I was one of the organisers. We had more than 300 attendees, enjoying a lot of interesting talks. Thanks to all attendees and the rest of the organising committee\u0026hellip; We made a hell of a great conference    Mid-June, I gave my first meetup presentation, Snakes and Ladders (about typing in Python as compared with Scala) in the PyBCN meetup In late June, we visited Cheddar and Wells   Wells cathedral\n   In September I visited Penrith for the awesome (thanks Jon) Scala World 2017. Looking forward to the 2019 edition. In early October we visited San Sebastian for the Python San Sebastian 2017 conference. We ate terribly well there (we can recommend Bodeg√≥n Alejandro as one of the best places to eat anywhere in the world now) Mid-October we visited Bletchley Park. Nice. In late October we (Ernest Fontich and myself) submitted our paper Normal forms and Sternberg conjugation theorems for infinite dimensional coupled map lattice. Now we need to wait. In November we visited Brussels (Ghent and Brugge too), and took an unofficial tour of the European Council with a friend who works there. In December I attended for the second time Scala Exchange, and the extra community day (excellent tutorials by Heiko Seeberger and Travis Brown). Was even better than last year (maybe because I knew more people?) and I already got my tickets for next year.    In December we attended a wine and cheese pairing (with Francesc, our man in Brussels, and Laia) at Par√©s Balt√†. They follow biodynamic principles (no herbicides, as natural as they can get, etc) and offer added sulfite free wines, too. They are excellent: neither Laia nor I drink, and we bought 4 bottles of their wines and cavas.  Last year I decided to start contributing to open source software this year, and I managed to become a contributor to the following projects:\n Apache Spark PureConfig ScalaFix ScalaFmt (well is still pending review and I need to work a bit more on it\u0026hellip; had forgotten!) Impromptu (a very small thing in a very interesting library, PR merged as I write these lines, technically it was my first PR in 2018) Scala Native (the merit goes to Guillaume Mass√©, I just wrote a POC) Spark-Testing-Base   I wanted to contribute to the Go compiler code base, but didn‚Äôt find an interesting issue. Maybe this year.\nLearning  This year I didn‚Äôt push courses/learning as strongly as last year\u0026hellip; Or at least this is what I thought before writing this post.\n In January I enrolled in the Functional Programming in Scala specialisation in Coursera. Only course left is the Capstone project, I will be finishing this January if nothing goes wrong During Spring I took Udacity‚Äôs Deep Learning Nanodegree Foundation In May I took a spoon carving course with Forest+Found (they are the authors of The Urban Woodsman and The Wild Dyer)     \n In August I took Apache Kafka Series - Learn Apache Kafka for Beginners, with the rest of the courses in the series waiting for me having more time available. In September I tried to learn knitting and lace, but it does not seem to suit me. In September I enrolled in a weekly Taichi and Qi Gong course by Mei Quan Tai Chi. Will repeat for the next term In December I started learning about Cardistry    Reading I have read slightly less than last year (36 books vs 44 last year), and the main victim has been fiction. Haven‚Äôt read much, and the best\u0026hellip; has been the re-read of Zelazny‚Äôs Chronicles of Amber. Still excellent. I have enlarged my collection of Zelazny books, now I have more than 30.\nAs far as non-fiction goes, I have specially enjoyed:\n Essentialism: given how many things I do at once, this book felt quite refreshing Rich dad, poor dad: Nothing too fancy, just common sense. Invest on having assets (money-generating items) instead of liabilities (money-sucking items, like the house you live in) 10% Entrepreneur: Links very well with the above. Being a 10% entrepreneur is a natural way to invest in your assets. The Checklist Manifesto: Checklists are a way to automate your life. I have read several books around this concept (‚Äúcreating and tweaking systems‚Äù, as a concept) and it resonates with me. If I can automate (even if I‚Äôm the machine), it‚Äôs a neat win. The Subtle Art of Not Giving a F*ck: Recommended read. For no particular reason. I‚Äôve heard that the audiobook version is great, too.  Music/events  This year I have listened mostly to Sonata Arctica. We attended their concert in Glasgow (March) and it was awesome, they are really good live. This was a build up for KISS at the O2 in London (May) which was totally terrific. And followed by Bat Out of Hell (opening day!) in London. It was great, and probably the closest I‚Äôll ever be to listening Meat Loaf live. Lately I‚Äôve been listening to a very short playlist I have by Loquillo, and also Anachronist.\nWe have also attended a performance by Penn and Teller (excellent), and IIRC we have also watched just one screening: The Last Jedi (meh, but Laia liked it).\nGadgets This year I have gotten hold of a lot of gadgets. I mention only the terribly useful or interesting\n From last year, iPhone 7 ‚Äúsmall‚Äù. Not happy with it. Battery life sucks big time, I got a external Mophie battery for it. Mid-year: Apple Watch Series 2. Pretty cool, and more useful than I expected. Late this year: AirPods. THEY ARE AWESOME Laptop foldable cooling support. While taking the deep learning course my Air got very hot, and I needed some way to get it as cool as possible. Nutribullet. My morning driver is banana, Kit Kat chunky, milk, golden flax seed, guarana. Icebreaker merino underwear. I sweat a bit, and get easily chaffed on the side of my legs (where it contacts my underwear). Not any more: not only is wool better at sweat-handling, but the fabric also feels better on the skin. And not, does not feel hot in the summer. Double Edge Shaving. I hated shaving (and actually just kept my beard trimmed so it was never a real beard or a clean shave\u0026hellip;) and this razor (not this one specifically, safety razors are pretty much all the same) has changed that. Now I shave regularly and enjoy it a lot (together with this soap and this after shave balm) Chilly bottles. They work really well to keep drinks cold or hot. I‚Äôll be getting their food container soon. Plenty of lightning cables. You can never have enough of these. I also got this great multi-device charger, ideal for traveling. Compact wallet. I‚Äôve been shown the ads so many times I finally moved from my Tyvek wallets to one from Bellroy. It is very good. Book darts. Small bookmarks that don‚Äôt get lost, look great and can double as line markers. Also, they don‚Äôt add bulk to a book, so you can have many in the same book without damaging it at all. They are great, I‚Äôm getting a second tin in my next Amazon order of stuff. Two frames from an artist I saw showcased in our previous office (they had exhibits downstairs). Blue Plaque Doors and Hatchard‚Äôs, by Luke Adam Hawker.  On the fun side, I also have a spiral didgeridoo, a proper Scottish bagpipes, a Lego Mindstorms I have not played with yet :( and an Arduboy. Oh, and a Raspberry Pi Zero Wireless.\n","permalink":"https://mostlymaths.net/2018/01/2017-year-in-review.html/","tags":["London","emacs","Linux","Music","Trips","Python","Christmas","Time Management","Ô£ø iPad","Maths","Books","Programming","Spark","SEO","Scala","Productivity","github","Kafka"],"title":"2017: Year in Review"},{"categories":null,"contents":"It would probably be an understatement to say I\u0026rsquo;m not a gamer. Last console I got was a Game Boy, 22 years ago (IIRC). Never got a gaming PC.\nI have 4 games on my Mac, and one is ASCII based. But my main source of mindless leisure for the past 7 years, aside from reading, has been playing with some iDevice. From an iPod Touch back then to my current iPhone and iPad Pro, playing, for me, has been Apple. Mostly strategy games, occasionally getting some simulator or arcade depending on how good it looked and how well designed for touch it seemed.\nRecently, though, I got a MFI (Made for iDevices, I guess) Bluetooth controller (affiliate link to Amazon: SteelSeries Nimbus). It has made playing the games it is compatible with impressive. Case in point, yesterday I finished playing the outstanding Forma.8 Go an open world exploration-driven platformer. I had started playing it several months ago, and stopped by the frustration at my inability with touch controls. Mind you, they are well designed, it\u0026rsquo;s just that I could not adjust to them. Playing with a controller was a totally different experience, much more enjoyable (looking at you, Downwell).\nIt is rechargeable (have been using it for a couple of weeks and so far the battery has not depleted\u0026hellip; as I said, I\u0026rsquo;m not a huge gamer) and works with iPhones, iPads, Apple TVs and even with Mac\u0026rsquo;s, although for older games you will need several tricks (first, a converter from MFi to HID you can compile from this github repository, and depending on the game a HID remapper tool like Enjoyable, with these two I could almost play Reassembly‚Ä¶ I will try to play following another path, but with this I could play old DOS based games instead).\n Nimbus SteelSeries MFi Controller\n  Sadly, not all games support controllers, they have to be specially programmed for it. For the ones that support it though, playing with a controller is way more fun, which has made the purchase totally worth it, even if I play less than 2h/week on average. Be sure to check which games are available (and which you already own and like!) before getting it to avoid a letdown. Oh, and in case you are wondering, neither PES 2018 nor FIFA 18 support it, sadly. NBA 2K18 seems to do, but I have not purchased it yet to try. Some of the GTA titles do, as well as the iOS classics Thomas was Alone and Galaxy on Fire 2.\nIn case you prefer different kinds of controllers, there are plenty to choose from. Some convert your iPhone in what looks like a weird PSP, or have a clip to hang your phone. Can\u0026rsquo;t vouch for them: the Nimbus feels high quality.\n","permalink":"https://mostlymaths.net/2017/11/nimbus-steelseries-mfi-controller-for-christmas.html/","tags":["Ô£ø iPod","Ô£ø iPad","Games","Ô£ø iPhone"],"title":"Want to play? Get a MFi controller for Christmas"},{"categories":null,"contents":"I\u0026rsquo;m not sure how useful this Docker \u0026ldquo;trick\u0026rdquo; is, since it happens in a very niche situation.\nAt work, we have several instances running a suite of Docker containers, with some non-trivial amount of environment variables, port configurations, volumes and links among them. This is set up really easily using ansible: writing link/port/volume mappings in ansible (using the docker, container or docker-container modules, depending how long ago we set it up). The syntax is similar to docker-compose, but scripted for ansible.\nThe problem arises when you are logged in on one of the machines and you want to change (or add) one parameter to one of the currently running containers. Re-running the ansible script in full is not always an option (for reasons I don\u0026rsquo;t want to get into), so up until now we had to painfully rewrite the docker run command from the ansible set up, by hand. Which is terribly error prone. And a pain. And in general very much a process you don\u0026rsquo;t want to follow, ever. We were very close to writing a short python script to convert the yaml specifications from python into docker run commands when we found out a relatively less painful way of doing it.\nWe jokingly call it the Indy swap\n\nIt\u0026rsquo;s quite easy, and is best described using a checklist to avoid messing up.\n First, you figure out what you want to do. For instance, map a port Change to super-user Get the container id from docker ps Use your favourite remote editor to inspect the file /var/lib/docker/containers/{container_id}/config.json to figure out what you need to add service docker stop Edit the file in step 4 to add/remove any extra setting service docker start Voil√†   Steps 5-7 are the actual Indy swap, if we are not fast enough the healthcheks in our elastic load balancers will mark the instance as failing and stop it. Yes, we could disable the check while we do this, but where\u0026rsquo;s the thrill, then?\nBy the way, the file in 4 will be a JSON file with the settings of the container. Any saved edit needs to be done with the docker service closed (since the file is in use otherwise). The format of adding ports, volumes or links is pretty self-explanatory as long as you have already a port, link or volume set up in the instance. Otherwise, check the configuration of any other running container having that. I suggest opening it in 4 with the editor already so you can up-arrow just after stopping the service without needing to find it, and also having planned the changes beforehand (or having done them in a config.json1 you then swap)\nOh, and don\u0026rsquo;t do this in production. Oh, of course you won\u0026rsquo;t because you are not using Docker in production, are you?\n","permalink":"https://mostlymaths.net/2017/08/change-parameters-of-docker-container-docker-run.html/","tags":["Programming","Docker","Trick"],"title":"Change the parameters of a docker container without knowing the docker run command used"},{"categories":null,"contents":"A few weeks ago I needed to parse configuration files in Scala for a Spark project and decided to use PureConfig. It is incredibly lean to use, needing minimal boilerplate. I recommend you check it out (give also a look at CaseClassy, which I haven\u0026rsquo;t had time to test yet).\nEverything seemed straightforward enough, and I got it working pretty quickly (as in, it compiled properly). The surprise? spark-submit failed with a conflict with Shapeless (lacking a witness). This is due to Spark 2.1.0 needing Breeze, which in turn needs Shapeless 2.0.0 (which is pretty old). Problem is, Spark\u0026rsquo;s required library prevented PureConfig from pulling the correct version. D\u0026rsquo;oh!\nThere is an easy fix, though, if you are using sbt-assembly you can shade dependencies, by adding something like the following to your assembly.sbt file:\nassemblyShadeRules in assembly := Seq(ShadeRule.rename(\u0026#34;shapeless.**\u0026#34; -\u0026gt; \u0026#34;new_shapeless.@1\u0026#34;).inAll)","permalink":"https://mostlymaths.net/2017/05/shading-dependencies-with-sbt-assembly.html/","tags":["spark","scala"],"title":"Shading dependencies with sbt-assembly (in particular, shapeless in Spark 2.1.0)"},{"categories":null,"contents":" Some of the links are affiliate links to Amazon. I only recommend what I use.\nAt last February. Finished my PhD dissertation, so can add Dr. in front of my name when ordering a Gatwick Express train ticket. Also makes for a cooler email signature. So far has been the only differences I‚Äôve seen in the year\nWork February-December Started working as a consultant in London, almost the day after delivering the PhD presentation. Not a big cause-effect relationship, though. Have done and learnt a lot of different things since then:\n Learnt how horrible Pig Latin is for MapReduce jobs. Reference Programming Pig Learnt lots of ins-and-outs of setting up single machines for services and clusters for machine learning in AWS. Improved my knowledge of Spark (which was with the Python API) by learning Scala. Delivered a few small machine learning jobs in Spark/Scala. Can recommend Advanced Analytics with Spark (still reading but liking it a lot so far). Wrote some production-level Go for backend services, reviewed a ton more (not the main Go developer). Got a copy of The Go Programming Language in paperback for the kicks, sits side to side with The C Programming Language I‚Äôve had since forever. Wrote a ton of production-level Python for backend services (some machine learning related, some data pipeline related, some just service related) and reviewed some little bits (acting as the main Python developer). Skimmed Fluent Python (futures, specially). Will dive into it completely in 2017. Learnt to use Docker (and Ansible, even if not directly related) properly. Used Apache Kafka (consumers and producers in Go, Scala and Python), Aerospike (in Go and Python) and RabbitMq (in Python) Did a lot of fine-tuning of the queries, tables and key distribution of a Redshift (PostgreSQL) cluster (20% space saving). Went on a machine cleaning spree on AWS, shutting down (with refactors where needed) or downscaling systems. We saved something like 30-35% of costs doing this. Discovered how much I enjoy spinning tops to unfocus a few seconds and clear my mind to tackle a problem.   \nApril-December Worked on some search engine optimisation analysis for a French company. Still ongoing, trying to get a 25% raise in organic search (right now at 10%)\nAugust-December Started working on a personal project: an adserver for this blog, with a multi-armed bandit approach to serve relevant Amazon affiliates product ads. You can read up a little more about it in this post I wrote on LinkedIn.\nLife February-December. Spent 3 weeks out of every 4 in London.\nAttended loads of meetups (member of the London Scala User Group, Spark London, London Python‚Ä¶ you get the idea), ate loads of pulled pork burgers, duck crackling burgers, pork burgers, etc. Also visited some museums. Caf√©s in London museums are pretty good.\nAlso attended several meetups in Barcelona, when I happened to be here (Barcelona Python Meetup, Barcelona Spark Meetup, Golang Barcelona).\nBecame kind of a regular at the Caf√© at Foyles in Charing Cross (awesome coconut and lime slice) and the Caf√© at Waterstones in Hampstead (best scones I\u0026rsquo;ve eaten in London).\nFebruary Visited Ll√≠via. Lovely small town, will repeat.\nFebruary Attended Lineapelle Milano 2016\nJune Visited Hay-On-Wye, famed by its second-hand bookstores and eggs Benedict. Will repeat. Probably kidnap Jasper Fforde to get him to write Paint by Numbers\nJuly Took a course in wood carving in London. Will repeat.\nSeptember Holidays in Collioure. Will repeat\nShould have done it sooner June Learnt to touch type and moved to using the Colemak keyboard layout, practiced at Keybr. Makes a huge difference to speed, accuracy and ergonomy. Should have done this way earlier in my life.\nJune Started eating parsnip, suggested by our product owner. Never had before, I\u0026rsquo;m liking it.\nSeptember Learnt to prepare brown butter thanks to Ruhlman\u0026rsquo;s Twenty. Ideal for some desserts, caramel sauces and mashed vegetables.\nOctober Discovered I actually like sweet potatoes, specially as French fries.\nLearning March-June Earned a postgraduate degree on Big Data and Data Science from the University of Barcelona.\nFebruary-December Attended the Spark, Emacs, Scala and ScalaX Bytes meetups every time I was in town. More sparingly attended the Data Science London, London Machine Learning, Python London, Go London User Group and Apache Kafka London, among a few other meetups I only attend on a interesting-talk basis.\nJune Took (as in, finished some) the Coursera courses about Scala. Will finish the rest eventually.\nNovember Attended the Big Data Ldn 2016 and the Amazon Web Services Enterprise Summit London\nDecember Attended Scala Exchange 2016 London and Scala Exchange Hack day, where I got an introduction into contributing to Open Source. Trying to help with scala-native right now. Got a T-shirt with the text Scala contributor, which is nice.\nReading This year I read 44 books, most of them non-fiction and mostly about self-improvement and data science.\nI recommend Chronicles of Amber by Roger Zelazny as fiction and Never Split the Difference by Chris Voss as non-fiction. Technical, I‚Äôd recommend The Software Craftsman: Professionalism, Pragmatism, Pride by Sandro Mancuso\nMusic March-June Enjoyed the hillbilly covers of Hayseed Dixie and almost attended a concert in Canterbury\nSeptember-December Discovered Sonata Arctica and really enjoyed its songs. Specially partial to FullMoon and What did you do in the war, dad?\nOctober Attended the Boxes tour concert of The Goo Goo Dolls in London (luckily they played most of the classics)\nNovember Attended the first concert of the Chimera Orchestra in London\nDecember Got these active-noise cancelling earphones for Black Friday. Work wonders to quieten a noisy office.\nGadgetry Aside from the ANC earphones mentioned above, this year I got\n Mechanical keyboard. Great key feel and travel, but very noisy. Got complaints in the office. Also weights a ton (and a half) Portable foldable keyboard. Surprisingly good key feel and shape. Works excellent, aside from being unable to pair to more than 1 device at once. Spiraliser. Great for potato spaghetti. Got it in December and only started using it in Christmas, is going to make most of my solid vegetables this 2017 iPad Pro with Pencil. After trying the Pencil with Procreate in an Apple Store I knew I needed one. Also, this way Laia got a not-too-old iPad Air, too. Got the largest, works great. Then I got an iPhone SE and recently (due to Laia‚Äôs Android phone dying for Christmas) an iPhone 7. Space pen. I love pens. I thought I was going to give up on notebooks after the Pro and Pencil, but‚Ä¶ Always carry this sturdy little beast in my pocket together with the excellent Canson A6 notebook. Its paper can easily take watercolour. Also practicing shorthand on it. Memo bottle. I got a very compact backpack (so that I‚Äôm not that guy on the tube) and this water bottle fits perfectly when I need to bring water along. A little bit on the pricey, hipstery side but works well. External micro USB disk. Oh, I love this thing. Before I used my 1TB external disk for everything (since I have a 128GB Air). Which included all git repositories, meaning that when it was time to leave (or fire drill) I needed to close iTerm, emacs, SourceTree\u0026hellip; not anymore. I have it always plugged, effectively doubling my hard drive space.  Weird Introduced our company into the misteries of the Catalan tradition of the Caga Ti√≥. Brought them one for Christmas.\n","permalink":"https://mostlymaths.net/2016/12/2016-in-review.html/","tags":["Go","2016","Data","Python","scala","Maths"],"title":"2016 in Review"},{"categories":null,"contents":" I\u0026rsquo;ve been looking for the perfect, really portable Bluetooth keyboard for several years. Typing on the go, or having a truly mobile office in your pockets is a really interesting concept for a consultant like me. You never know when opportunity or need may arise.\nA year and a half ago I ordered what it looked like the perfect keyboard for that setup, but (even though it was supposed to arrive 3-4 months later) I\u0026rsquo;m still waiting. Instead, I got this stupidly cheap (around 25 $/‚Ç¨/¬£, this is an affiliate link) keyboard. See it below, with a pound and an iPhone SE for scale\n\n\nThe pros:  Folds in half. When folded, fits, barely, a large trouser pocket if you are slim. If you are wearing a jacket you can put it in a jacket pocket. Weights very little Great tactile feed. Has some scissor switches that feel sharper than the (from my feeling) decently good switches in 2013\u0026rsquo;s Macbook Airs. Quite pleased with it (not as good feedback as my mechanical one with brown cherries, but this weights 20 times less or so) Seems to have a decently long battery life Disconnects on fold, starts up on unfold. A magnetic latch keeps it closed neatly Has arrow keys and F keys Good range  The cons:  Can only be paired with one device at a time. So far this means that when I decide I want to pair it with my Mac instead of my iPhone, I need to forget the device and pair again. Not a big deal since I usually only want it for the phone or iPad, and repairing is fast With a Colemak layout, the O is a small key, and a problem for me is that B is a left hand key and for me is a right hand key. Alt acts like alt, no matter the operating system (you can change it with a key combination). On Mac you can tweak it, on iOS can\u0026rsquo;t Fn and Ctrl feel wrong as they are placed, should be swapped   Would I recommend it? Definitely. It has great feel and is a great price for quality keyboard. Oh, and this post was written all on it so I get used to the misplaced B. You can get one for Christmas from here (I\u0026rsquo;d get a few cents if you do so, thanks in advance!)\nAnd if you want to learn Colemak I learnt using Keybr, and have had a lot of fun playing this online typing game, Z-Type. Both links are non affiliated and I have no relationship with them aside the learning or fun.\n","permalink":"https://mostlymaths.net/2016/11/my-portable-bluetooth-keyboard.html/","tags":null,"title":"My portable Bluetooth keyboard"},{"categories":null,"contents":"This has been the first time I could attend¬†the Apache Kafka meetup in London.¬†Previous meetings had me in Barcelona or flying. First realisation: it is a¬†surprisingly crowded meetup! Clearly, everyone is using Kafka, even if it is not¬†clear from the outside. Oh, and the food was pretty good, too. Thanks to the¬†sponsor (which I have sadly forgotten).\nI really enjoyed this one. The speaker was Jay Kreps, CEO and co-founder¬†of Confluent (and author¬†of I Heart Logs), so, basically, a Kafka top committer¬†himself. He delivered the same presentation he gave¬†in Reactive Summit 2016, but since I wasn\u0026rsquo;t in the¬†former I could enjoy it this time. It was a hand-drawn presentation (I suspect¬†using¬†Paper¬†for iOS), hitting all the supposedly good points of technical presentations¬†(short slides, don\u0026rsquo;t read them, etc). It was also quite deep, explaining¬†what/how and why we should¬†use¬†Kafka Streams for¬†our real-time data pipelines.\n\nJay, presenting. This architecture needs some Kafka\nThe key takeaway is that if you are already using Kafka as your real-time data¬†hose-and-bucket, you can reuse this cluster (and all its goodies: partitions,¬†groups, offsets) for processing the data as it comes, withouth needing an¬†additional framework (Flink, Spark, Storm\u0026hellip; you know the tune). Also, if you\u0026rsquo;drather write Perl than Java and this is preventing you from using the KStreams¬†API, behold! Even if they don\u0026rsquo;t have an official Scala API, wrapping it is¬†extremely easy.\nYou can view (and download) the slides¬†from¬†here,¬†and watch Jay in video from Reactive¬†Summit here.\n","permalink":"https://mostlymaths.net/2016/10/apache-kafka-london-meetup-distributed.html/","tags":["London","meetup","scala","Kafka"],"title":"October Kafka London Meetup - Jay Kreps: Distributed stream processing with Apache Kafka"},{"categories":null,"contents":" At Affectv we use a wide range of editors: Sublime, Atom, Emacs, Pycharm, IntelliJ\u0026hellip; Actually only two people use the same editor! As such, from time to time I see things in other people\u0026rsquo;s editors that I would like to have as well. So, yesterday I decided to improve on some configuration settings on Spacemacs.\nClick for multiple-cursors I saw this on Jordi\u0026rsquo;s Sublime, and it is much more comfortable than using more-like-this or similar helper functions, even if I need to use the trackpad to do so. After all, a multi-cursor edit (proper edit, not as a substitute for a macro) is rare enough that I can tolerate leaving the home row. Easy enough to configure thanks to Magnar Sveen.\n(global-unset-key (kbd \u0026quot;M-\u0026lt;down-mouse-1\u0026gt;\u0026quot;)) (global-set-key (kbd \u0026quot;M-\u0026lt;mouse-1\u0026gt;\u0026quot;) 'mc/add-cursor-on-click)  \nMinimap Also from Sublime, I used to have this on my old emacs setup. As simple as adding minimap to the list of additional packages and configuring its property group. See animation below.\ndotspacemacs-additional-packages '(helm-dash key-chord pig-mode mmm-mode minimap origami ansible)  Folding I have always loved how clean vim\u0026rsquo;s folding works, and how Sublime has this nice folding. Then I found origami-mode and my emacs-life was complete. I tweaked a little the folding functions so that minimap was updated on fold (for some reason it is not, I guess minimap is tied to the \u0026ldquo;modified\u0026rdquo; hook or similar). I bound z and Z (and A-z which maps to √¶ in Colemak) to the basic fold operations.\n(eval-after-load 'origami '(progn (defun rb-show-only (buffer point) (interactive (list (current-buffer) (point))) (progn (origami-show-only-node buffer point) (minimap-new-minimap))) (defun rb-toggle-rec (buffer point) (interactive (list (current-buffer) (point))) (progn (origami-recursively-toggle-node buffer point) (minimap-new-minimap))) (define-key evil-normal-state-map \u0026quot;√¶\u0026quot; 'rb-show-only) (define-key evil-normal-state-map \u0026quot;Z\u0026quot; 'origami-toggle-node) (define-key evil-visual-state-map \u0026quot;Z\u0026quot; 'origami-toggle-node) (define-key evil-insert-state-map \u0026quot;C-Z\u0026quot; 'origami-toggle-node) (define-key evil-normal-state-map \u0026quot;z\u0026quot; 'rb-toggle-rec) (define-key evil-visual-state-map \u0026quot;z\u0026quot; 'rb-toggle-rec) (define-key evil-insert-state-map \u0026quot;C-z\u0026quot; 'rb-toggle-rec) )))  For some reason just advising the functions with after didn\u0026rsquo;t work, this is not great but does work. I left the Z bindings as they are, since I have not used them yet, and will probably delete them if I keep not using them.\n\nNote (2018): I moved to use yafolding (specifically yafolding-toggle-all and yafolding-toggle-element) at the end of 2017. Although origami is very good, yafolding works seamlessly under more languages. I bound Return in normal mode to toggle element and C-return to toggle all, as well as unbounding all the default bindings.\nExecution overlays in Ensime (Scala) I saw this for Cider in the emacs church meeting from August, and heard¬†@fommil (I think it was him) mention that it was coming to ensime. And indeed it was. And it\u0026rsquo;s easy enough to use C-c C-v C-r (thing of it as extended command, eval, region to remember), given an open inferior Scala interpreter. Symbol prettify does not apply to overlays, so you need to customise the arrow used therein.\n\n","permalink":"https://mostlymaths.net/2016/09/more-emacs-configuration-tweaks.html/","tags":["emacs","scala","spacemacs"],"title":"More emacs configuration tweaks (multiple-cursor on click, minimap, code folding, ensime eval overlays)"},{"categories":null,"contents":" A couple of days ago I attended (first time I managed in almost 6 months) the London chapter of the Emacs Church (also known as the local meetup for emacs lovers). In this event we were shown (John Stevenson was the presenter) how to use emacs effectively for Clojure development (using Cider) and I saw in real life Spacemacs.\nIn case you don\u0026rsquo;t know, Spacemacs is a \u0026ldquo;distribution\u0026rdquo; of Emacs prepared (is open source, of course) to be easy to setup, and somehow specially prepared for former Vim users to move to Emacs. For instance, on startup asks if you want to be in Emacs mode, evil mode or hybrid (Emacs mode keys in vim insert mode) by default.\nAs you may remember, I\u0026rsquo;ve been using Emacs with evil for around 3 years already, and have been pretty happy with it. I\u0026rsquo;m not so happy about the state of my .emacs file: currently it is 2652 lines long (of course around 400 or 500 of those are generated automatically by custom). Too big and unwieldy. And I\u0026rsquo;m too lazy to move all the nuts and bolts to something more lightweight and sane.\nI thought that trying out Spacemacs could be the perfect excuse to clean the mess off my .emacs file, since I could carefully move piece by piece whatever I needed as I needed it (like I usually do when upgrading computers).\nFor a start, the beginning was a good experience. Since by default it includes most of the fancy stuff I use normally (helm being the biggest, fanciest helper I need, I only needed to tweak helm-files and switch-buffer, and add recentf) and I no longer use mu4e on a day-to-day basis, I could easily switch to it.\nIt\u0026rsquo;s actually really easy to try Spacemacs alongside your normal emacs: just download it and from the spacemacs folder run something like\nHOME=~/fromsource/spacemacs /Applications/Emacs.app/Contents/MacOS/Emacs or the equivalent in your environment. Caveat: multi-term/ansi-term won\u0026rsquo;t work as expected (best solution is to actually move to using Spacemacs as default). Aside from that I have had no other big issues, and recently moved to Spacemacs to be the main Emacs and if needed I can run my old configuration with the HOME trick.\nOne thing I have not figured out how to exactly do \u0026ldquo;the Spacemacs way\u0026rdquo; but I needed no matter what is having my set of normal Emacs keybindings in evil insert and normal modes. Hybrid mode covers insert more or less nicely, but some commands I need them as they are because not only are they part of my muscle memory, but I also happen to like them and use them everywhere (OS X input fields, terminal windows). I tried to set this up in many places in the .spacemacs file (the user-config section, using the \\-init or \\-after macros of package initialisation\u0026hellip;) And finally this made it work, so, in case you need to modify evil insert or normal key maps in Spacemacs:\n(eval-after-load \u0026#39;evil \u0026#39;(progn (define-key evil-normal-state-map (kbd \u0026#34;SPC\u0026#34;) \u0026#39;ace-jump-mode) (define-key evil-insert-state-map (kbd \u0026#34;C-a\u0026#34;) \u0026#39;move-beginning-of-line) (define-key evil-insert-state-map (kbd \u0026#34;C-e\u0026#34;) \u0026#39;move-end-of-line) (define-key evil-insert-state-map (kbd \u0026#34;C-k\u0026#34;) \u0026#39;kill-line) (define-key evil-insert-state-map (kbd \u0026#34;C-w\u0026#34;) \u0026#39;kill-region) (define-key evil-visual-state-map (kbd \u0026#34;C-a\u0026#34;) \u0026#39;move-beginning-of-line) (define-key evil-visual-state-map (kbd \u0026#34;C-e\u0026#34;) \u0026#39;move-end-of-line) (define-key evil-normal-state-map (kbd \u0026#34;C-a\u0026#34;) \u0026#39;move-beginning-of-line) (define-key evil-normal-state-map (kbd \u0026#34;C-e\u0026#34;) \u0026#39;move-end-of-line) (define-key evil-normal-state-map (kbd \u0026#34;C-k\u0026#34;) \u0026#39;kill-line) (define-key evil-normal-state-map (kbd \u0026#34;C-y\u0026#34;) \u0026#39;yank) (define-key evil-insert-state-map (kbd \u0026#34;C-y\u0026#34;) \u0026#39;yank) (define-key evil-insert-state-map (kbd \u0026#34;C-t\u0026#34;) \u0026#39;transpose-chars) (define-key evil-normal-state-map (kbd \u0026#34;C-w\u0026#34;) \u0026#39;kill-region) (define-key evil-visual-state-map (kbd \u0026#34;C-w\u0026#34;) \u0026#39;kill-region) (define-key evil-visual-state-map (kbd \u0026#34;SPC\u0026#34;) \u0026#39;ace-jump-mode)))  Something I found surprising though is the load time: Spacemacs does not load packages on startup and my .emacs setup did, and they roughly start up at the same speed. Somehow I expected a faster startup time.\nWorth also downloading the latest emacs port for homebrew, which fixes some annoyances with powerline colours as well as being quite more up to date than Carbon Emacs.\nNow the only big thing left I have is reconfiguring multiple-cursors and my definitions of more-like-this and all that to be a happy Spacemacs user.\n","permalink":"https://mostlymaths.net/2016/08/moving-from-emacs-to-spacemacs.html/","tags":["Programming","emacs","spacemacs","vim","Productivity"],"title":"Moving from Emacs to Spacemacs"},{"categories":null,"contents":"Started a long time ago. It was supposed to be about a phenomenon leading to chaos: separatrix splitting. I got a research grant. I worked on holomorphic dynamics. Travelled. Presented. Too many roadblocks with the separatrix problem. Switched topics. Welcome to a different new world, infinite dimensional dynamical systems. I read the literature. Researched, proved some things. My grant ran out. I worked. A lot. Too many times I considered giving up. Kept thinking of the sunk cost. My advisor and my girlfriend helped me keep at it. I pushed on.\n All this happened in early February, and since then many more things have happened. Right now I\u0026rsquo;m working part in London and part at home as a mix of software and data engineer, with a dash of devops to make it more spicy. Truly a jack of all trades (but I specially like the data part).\n","permalink":"https://mostlymaths.net/2016/04/ruben-berenguel-phd-in-mathematics.html/","tags":["Data","Maths"],"title":"Ruben Berenguel, PhD"},{"categories":null,"contents":"Back in the days of yore, when I was switching between my Windows machine and a Linux machine, I remember having SyncTeX active in my Windows machine. It was a wonderful experience: SyncTeX lets you click anywhere on a generated file from LaTeX and gets back to your editor, to the place generating where you clicked. This was extremely useful, specially later on when you need to adjust many formulas to fit and you need a bit of back-and-forth-ing.\nThen I got a Mac, and since Preview is so handy I slowly forgot about SyncTeX. Time went on, and I merrily kept on editing LaTeX files as usual. I even managed to deliver my PhD dissertation a couple weeks ago, the formal speech will be in a month or two (come at your own risk). AucTeX‚Äôs preview saved most of the days, so I slowly even forgot SyncTeX existed. Shame on me indeed.\nThe other day I got an annotated PDF from one of my advisors, and I just couldn‚Äôt open the annotations. I tried all programs I had for Mac, and no luck: annotations weren‚Äôt showing, just saw the icons. Surveying for some command-line tool to extract annotations (just in case) I found pdf-tools, a replacement for DocView based on Poppler. It had the awesome ability of actually displaying annotations, with it it was pretty clear the annotations were broken in that PDF. I got a new set of PDFs from my advisor with the annotations in place, though. While waiting for it to arrive‚Ä¶\nI saw SyncTeX was an option of pdf-tools. I had been using that, hadn‚Äôt I? So, I activated SyncTeX in AucTeX (it is TeX-source-correlate-method, see here) and indeed: I could have two frames, one with the actual LaTeX sources and the other with a PDF, and go from one to the other. Even hyperreferences in PDF work. See (well, click on the full-screen mode to see it larger or you won\u0026rsquo;t see anything) here:\n  Getting pdf-tools to work wasn‚Äôt incredibly tricky (given the hoops you need for some packages, sometimes). Just\nbrew install pdf-tools and after reading\nbrew info pdf-tools I was told to run\nemacs -Q --batch --eval \u0026#34;(package-install-file \\\u0026#34;/usr/local/Cellar/pdf-tools/0.60/pdf-tools-0.60.tar\\\u0026#34;)\u0026#34; and this does the trick (well, change emacs for your actual emacs, which likely is /Applications/Emacs.app/Contents/MacOS/Emacs) You‚Äôll also need to add to your .emacs file (or temporarily in your *scratch* buffer)\n(setenv \u0026#34;PKG\\_CONFIG\\_PATH\u0026#34; (concat \u0026#34;/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig\u0026#34; \u0026#34;:\u0026#34; \u0026#34;/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig\u0026#34;)) (getenv \u0026#34;PKG_CONFIG_PATH\u0026#34;) and run\n(pdf-tools-install)  as advised in the package‚Äôs README. And that\u0026rsquo;s it, open a PDF and activate pdf-view-mode to check everything is in place. Well worth it!\nNote:  Post-2018 you are better served by installing spacemacs, which comes with pdftools already set up for your enjoyment\n","permalink":"https://mostlymaths.net/2015/11/synctex-and-pdf-view-mode-for-emacs.html/","tags":["emacs","LaTeX","Research","Maths","spacemacs"],"title":"SyncTeX and pdf-view-mode for emacs"},{"categories":null,"contents":"Thermometers are already hitting 29¬∞C with temperature feelings around 32 or 33. It‚Äôs this time of the year when I need cold drinks to keep me alive. I‚Äôm not a big soda fan (except when I‚Äôm on Finland in the Nordic Go Academy¬†camp, they are so stocked on soda that I‚Äôm dragged in,) so my go-to drink is usually freshly squeezed lemonade with some ice cubes and sometimes a pinch of soda to make it fizz (and make it less acid.) Oh, and quite a bit of sugar. Even if I like sweet drinks, this has less sugar than a normal soda anyway.\n\nA drawing I did 2 years ago.\nMore recent drawings on Sketchedlife.net\nBut when I need a caffeine punch, my summer treat is cold-brewed yerba mate. You may know yerba mate as the typical Argentinian ‚Äúherbal tea‚Äù, which is exactly what it is. You can have a quick look at Wikipedia to know what it is and how it works.\nFondness for yerba mate is an ‚Äúacquired taste,‚Äù much like coffee or beer. It is bitter, grassy, weird. Then you start to appreciate it and then, suddenly, you crave it. Adding sugar makes the process faster, if you have a sweet tooth. From a personal point of view, the first time I tasted mate I thought it tasted like grass (much like nowadays when I drink green tea, even if I kind of like green tea.) Then one summer my shoemaking teacher brewed some cold and sweet mate with lemon juice, and it tasted great. I was a convert from then on, and have kept drinking since then.\nDuring winter, I like my mate (which I don‚Äôt drink that often during cold weather, though) warm, drank as is custom in a hollowed and treated gourd. But during summer, there are few things that taste as good as some cold brew (or hot and then cooled down) mate with lemon (known in some parts of South America as¬†terer√©.)\nCold brewing, now that I mention, is the process of ‚Äúbrewing‚Äù something using only cold water. It is getting increasingly popular as a way of preparing coffee, specially in places where getting some good espresso is hard. To cold brew some coffee just pour a decent amount of ground coffee (a cup for each 4-5 cups of water, IIRC) in a bottle, fill with water and let it rest in your fridge for a couple days (stir a few times during the process.) After two days you‚Äôll have a very good tasting cold coffee. For an extra flavour kick, before drinking I pour cold brew coffee through my Aeropress. And beware of not drinking the sludge at the bottom!\nYou can cold brew almost anything that can be tasted, so in addition to caffeinated stuff you can use fruits or herbs. In this case, they are known as Aguas frescas and we also prepare them at home so we have always something cold and natural to drink. Our favourite so far this summer is 2 sliced oranges, 15 hibiscus flowers for 2 litres of water and 24 hours of chill time. Add a little sugar to taste. In close fight, the peel without any white of a grapefruit and the pulp of that same grapefruit with 2-2.5 litres of water. Hibiscus is optional, sugar is mandatory afterwards. It\u0026rsquo;s bitter, powerful and refreshing.\nFor cold brewing yerba mate, you follow the same basic procedure: some amount of mate, some amount of water and some lemon or orange if you like the taste. My personal amounts (nothing prevents you to change it depending on your love for bitter/citrus tastes)\n 3 tablespoons of yerba mate The skin of half a lemon, with the least amount of ‚Äúwhite‚Äù you can manage Half a lemon in dices, peeled (with the least amount of ‚Äúwhite‚Äù, again) Around 1 litre of warm (around 50 or 60 degrees Celsius so the brewing starts a little quicker) water Once lukewarm, put in the fridge for a day or two (once it reaches its taste peak it won‚Äôt get much tastier anyway)  With this amounts I usually add 1 teaspoon of sugar per glass to get it sweet enough. Be sure to remove the white from the lemon, it will be quite bitter if you don‚Äôt.\nYou can purchase yerba mate from Amazon, or if you live close to some South American market, you‚Äôll definitely find some there. Which also lets you purchase your winter supplies: a gourd and a bombilla (the metal straw used to drink) in person, so you can ask for best sizes, materials and even ask about preparing. I have tasted Taragui and Rosamonte, and they are very good, most mates are pretty similar anyway. Once you get used to the taste though, getting some really good mate pays off. It\u0026rsquo;s also pretty good to have a good quality electric kettle. By the way, if you prefer sweet mate in the winter, add sugar to the heated water instead of adding sugar to the gourd.\n","permalink":"https://mostlymaths.net/2015/06/cold-brew-yerba-mate.html/","tags":["Coffee","Drawing","Recipes"],"title":"Cold Brew Yerba Mate"},{"categories":null,"contents":" I have ve always loved maps. I guess it goes well with liking drawing and maths, there‚Äôs a deep connection (the pun is intended) between the subjects. As a map lover, when we decided to relocate to a somewhat more countryside town, I wanted better-looking maps to wander around the area. I checked government-issued maps, but they were either too large (scale 1:25000) or didn‚Äôt show the area I was interested (for the 1:10000 maps.) Thus I did what any other nerd would do: roll my own map as I wanted it.\nThe end result looks like this (downscaled to 20%)\n  The real map is 1.4 √ó 1.2 metres\nGetting the data My first idea was to follow the steps of Dominik Schwarz in his quest for printing a huge map of the world, and harvest images from Google Maps and get away with it. But one of the fundamental parts of my map was supposed to be having all walking routes visible and available. Google Maps won‚Äôt show that, or at least not everything. Specially among vines or forests. What‚Äôs the point of living close to the Pant√† de Foix (the Foix Dam) and not being able to walk there?\n Castellet, just beside Pant√† de Foix\n  Hence, I turned to our trusty government, and in particular to the Catalan Cartographic and Geologic Institute (from now on the ICC, which is the Catalan acronym.) They have a powerful online map application, with good quality satellite imagery, elevation data, toponymy‚Ä¶ All is available online. And a free download. You only need to register, and seem to be limited to one download at a time. No big issue, although I needed to get 16 satellite tiles.\nThere is a huge amount of data available for download. Since my knowledge of technical map stuff ended at knowing that the technical term for what I wanted to do is GIS , I wasn‚Äôt really sure what files I needed and what I could do with them on a Mac without having to pay for a dedicated app.\nThe first step was finding a free app that could ‚Äúdo maps.‚Äù After some Googling it was pretty clear it had to be QGIS (formerly known as Quantum GIS) which is free, open-source and available cross-platform. It was quite straightforward to install on Mac, just needing some extra libraries to work with the satellite image files I was using. Once I had it, the real ‚Äúnightmare‚Äù started, where I had to decide what kind of files I needed and what they were good for. This is where ICC helped, since they have documentation for all their file types, not only explaining what they have but also what they are useful for.\nFor a starter I downloaded all satellite imagery with a scale of 1:2500, generated on 2014. Recent enough. This was the easy one:\n Download each file Unzip it In QGIS, Layer‚ÜíAdd Layer‚ÜíAdd Raster Layer (or Shift-Cmd-R)  Since the files are already geolocated data (the format is SID, which is why I needed a special plugin to handle it) in just a few minutes I had a satellite view of the area, automatically placed and multi-scale. Not bad for a few minutes of downloading and goofing around.\nThen the real work started: I wanted street names, road names and features. How? I‚Äôm pretty sure there are many ways, but the one I found most straightforward was:\n Download Topography-base maps, with a scale of 1:2500 in SHP (Shapefile) format In QGIS, Layer‚ÜíAdd Layer‚ÜíAdd Vector Layer (or Shift-Cmd-V) Select full folder, Arc/Info binary format and browse to it Select the files you really want  ICC provides a lot of files for each map tile at that resolution. Lots of stuff I didn‚Äôt really want. I chose only toponymy, elevation lines, hydrography and roads. Why?\n I needed toponymy layers to set labels to features Elevation looks cool (even if I disabled it for the final generated map) With hydrography I could change the colour from the satellite imagery to a more bluish tone in water areas (since the Foix dam is quite greenish) Roads was the main reason I was doing this  Adding some text Once I had everything in place I wondered: Where are the labels?\n Double-click a toponymy layer Labels‚ÜíLabel this layer with‚Ä¶  Here some of the huge power of QGIS started to appear. Most ‚Äúvariables‚Äù in the map can be controlled via either fields in the data layer OR functions applied to these fields. So, I could easily label by a data column, like TEXT_TOP (which had the common name of the feature, like Pant√† de Foix.) But I also could set the size of the font to the one defined in the datafile. And I could even choose the font according to the feature type (or in my case, the font defined in the data file: the data provided by the ICC had font size and font family for the features) with a function.\nCASE WHEN \u0026#34;FONTNAME\u0026#34; LIKE \u0026#39;Times New Roman\u0026#39; THEN \u0026#39;Georgia\u0026#39; WHEN \u0026#34;FONTNAME\u0026#34; LIKE\u0026#39;Arial\u0026#39; THEN \u0026#39;Futura\u0026#39; WHEN \u0026#34;FONTNAME\u0026#34; LIKE \u0026#39;Arial Narrow\u0026#39; THEN \u0026#39;Futura\u0026#39; WHEN \u0026#34;FONTNAME\u0026#34; LIKE \u0026#39;Courier New\u0026#39; THEN \u0026#39;Inconsolata\u0026#39; END  The language seems to be QGIS specific, but has SQL-like LIKE. Single quotes denote strings, double quotes denote fields, just like in SQL. Important to remember, since it‚Äôs very easy to mix one with the other without realising. I set all labels to show, even colliding labels. I didn\u0026rsquo;t want to miss a castle or church because it was too close to a large street. I\u0026rsquo;d rather have overlapping labels in this case.\nThen I decided I wanted something more: I wanted icons to show what each feature was. Icons like what you have in a normal map, where churches are indicated by a cross and castles by a tower. The layer I was working with (the toponymy layer) only had type codes for its features, so I couldn‚Äôt really tell what a 23 was. Church? Castle? Farm?\nSymbols‚Ä¶? Labels\u0026hellip;? To do this, I needed to download an auxiliary file (which the ICC already told me about when I clicked ShapeFile as type of download) having the list of code together with human-readable definitions. It is loaded as a single-file ShapeFile layer, but has no ‚Äúvisible data.‚Äù Instead you need some magic.\n Open a toponymy layer Select Joins Add a join layer with codis_topo (the source, in this case the layer I just added) and selecting as join field the type code (in this case, CODI_TOP) I disabled caching and added a custom name to the newly created column, the join    A join\n  With this at least I‚Äôd know, since the type was now human-readable. I still didn‚Äôt know how to add icons, but I could edit the name and add a letter to denote what it is (or I could even add some text.) The labelling function is then\nCASE WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%capella%\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%monestir%\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%monestir%\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%tedral%\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Esgl√©sia\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Convent\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Temple\u0026#39; THEN CONCAT( \u0026#39;‚Ä† \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Arc\u0026#39; THEN CONCAT( \u0026#39;Ô¨Ç \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%ducte\u0026#39; THEN CONCAT( \u0026#39;Ô¨Ç \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Font, bullidor, deu\u0026#39; THEN CONCAT( \u0026#39;∆í \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%toll,%\u0026#39; THEN CONCAT( \u0026#39;‚âà \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%astell,%\u0026#39; THEN CONCAT( \u0026#39;ƒ¶ \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Talaia, torre de defensa, torre de guaita\u0026#39; THEN CONCAT( \u0026#39;ƒ¶ \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%rica (en%\u0026#39; THEN CONCAT( \u0026#39;ƒ¶ \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Muralla\u0026#39; THEN CONCAT( \u0026#39;= \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;GR (Sender de Gran Recorregut)\u0026#39; THEN CONCAT( \u0026#39;GR: \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;PR (Sender de Petit Recorregut)\u0026#39; THEN CONCAT( \u0026#39;PR: \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Pou%\u0026#39; THEN CONCAT( \u0026#39;≈Ø \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;%pont%\u0026#39; THEN CONCAT( \u0026#39;œÄ \u0026#39;, \u0026#34;TEXT_TOP\u0026#34; ) ELSE \u0026#34;TEXT_TOP\u0026#34; END  This, basically adds a weird symbol to the text, so, for instance, bridges have a œÄ symbol in front. Not great, but I actually printed it like this for a starter and it looks pretty decent. Here you can see a zoom in and the general view:\n The general view\n   A zoom\n  In the zoom you can see the glyphs for a fountain (Font d‚ÄôHorta and Font de Mas Carl√∫s), a church (Sant Pere) an aqueduct (de les Aig√ºes de Vilanova i la Geltr√∫) and a bridge (de la font d‚ÄôHorta.) This was nice but non-optimal. I wanted symbols! So, how do you get symbols if you have a toponymy layer with lines, not feature points?\nSymbols First, duplicate the layers holding the labels. It can be done without duplicating, but it introduces a layer of complication for the human‚Ä¶ So, if your computer doesn‚Äôt mind the extra layers, it is easier for you as human to have a separate layer for the labels and a layer for the icons.\nOnce you have duplicated the layer, change its style to rule-based, and add marks following rules with the add sign. For instance, this is the rule I use for Castell (castle):\nCASE WHEN \u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Castell,%\u0026#39; THEN 1 ELSE 0 END  with SVG marker svg/fortress2.svg\nNOTE: if you are using only one condition, for rule-based markers you can just keep it at\n\u0026#34;coditopo_03ca_CONCEPTE\u0026#34; LIKE \u0026#39;Castell,%\u0026#39; since it will just return 0 or 1 as needed. You\u0026rsquo;ll only need CASE when you have several types going to the same marker. Since I just copy-pasted most of my code I didn\u0026rsquo;t mind the extra cruft. Thanks to Nathan Woodrow, one of QGIS\u0026rsquo; developers for pointing it out on twitter.\nTo add this as image you need to select Marker, then SVG marker. I found very nice SVG icons here, so I use this opportunity as credit (since the printed map is just for my personal use.) And indeed, you need to add as many rules as icons you have. That‚Äôs life. A GIS professional probably knows other ways, I‚Äôm just a newbie. Once you have all the rules you want, you can copy-paste them in all the layers. Actually, I think all this map business would have been easier merging all vector layers before doing anything else, but since I didn‚Äôt do it from the beginning it was hard to do it now. You can find how to merge vector layers in this StackOverflow question.\n This is how Style should look like with rule-based\n   And this is what a specific rule looks like\n  ¬†After adding markers you‚Äôll need to tweak them. I did one part in SVG (adding stroke to the shapes and changing colours directy in the file so I didn‚Äôt need to bother in QGIS) and some others relating to placement (middle point and then changing size and baseline of the icon.) I also did some changes editing the file directly in Emacs, since QGIS files are just XML and replacing is much faster without clicking anything, once you know how the fields are named. The end result? Here you can see the same area as above with icons.\n A zoom in with markers in place\n  Nice, don‚Äôt you think?\nSo, how do you print it? This is actually very very easy. To print you need a New print composer from the Project menu. This is a set of rules to print some map. So, you choose the paper size and then add pieces to the layout. The basics are a map, a scale and some text, or at least this is the bare minimum I wanted.\nOnce you have the map area you can change scale, drag around and change many things, it‚Äôs awesome. I decided to use 1:10000 since fitting the whole map in the map area I chose was 1:9556 and I‚Äôd rather have a round number and lose some map around the borders. Ready to export to PDF and bring to a printing place. You can also generate a JPG file, but beware of trying to open a 176 Mb with an iPad (even if it is an Air.) It won‚Äôt zoom. On the other hand, for my Mac it was much easier to open and zoom/navigate a huge JPG rather than a huge PDF file. Also keep in mind large maps take a long time to export: if you are making tests disable as many layers as you can really manage.\n The map composer reminds me of Scribus\n  Since I wanted a portable version of the map to have on my iPad Air, I decided to split it using ImageMagick in 9 tiles I could easily zoom in any app. IM has the nice ‚Äúcrop‚Äù feature that can generate tiles, like:\nconvert -crop 4x3 MEGAMAP.jpg megamap/tiles%03d.jpg  The problem is that this takes way, way longer than expected, because the image is too big. The fastest way is instead to use the stream command to generate raw RGB data and convert that to JPG. So, repeating 9 times stuff like:\nstream -extract 5566x3937+11132+7874 MEGAMAP.jpg t9.rgb convert -depth 8 -size 5566x3937 rgb:t9.rgb t9.jpeg  Since I only needed to do it this time I didn‚Äôt bother to code it as a bash for loop or anything. Whereas convert was taking more than 12 hours to do anything, stream took 3 minutes, counting the time I needed to compute the pixel shifts and the conversions. And probably even the time it took me to create a index.html with the pieces to zoom.\nWhat‚Äôs the takeaway of this post? Doing maps is fun, and using QGIS is not that hard as it may seem. And yes, I have an awesome big map now.\n","permalink":"https://mostlymaths.net/2015/06/using-qgis-to-create-custom-map.html/","tags":["emacs","QGIS","L'Arbo√ß","Ô£ø iPad","Ô£ø Mac","DIY","Maps"],"title":"Using QGIS to create a custom map"},{"categories":null,"contents":"A few weeks ago I started trying a pre-beta release of Dyalog APL (now available as \u0026ldquo;full beta\u0026rdquo;) for Mac. Fellow Mac users, looks like we are in for a treat after so much time of only having GNU APL and the pretty expensive APLX. Now Mac APL lovers, users and aficionados will have a competitive, commercial option. At last!\nI started with the usual 1+1, ‚ç≥ 10 , ‚ç¥ ‚ç≥ 10 to check it worked as expected. Then I moved on to a simple ‚Äúhello world,‚Äù my Mandelbrot one-liner, which is probably the most complex piece of APL I\u0026rsquo;ve written. But it didn\u0026rsquo;t work at the first run (I had actually found it out back when I was writing it, since it didn\u0026rsquo;t work on TryAPL.) So I set to find out what the issue may be and learn a little more about APL while at it.\nAccording to ISO/IEC 13751 (Programming Language APL, Extended) there is no clear guideline about what to do with _exponent-overflow_¬†(or exponent underflow for that matter.) This is relatively usual in ISO specs for programming languages, and is a common pitfall when switching implementations.\nCase in point, GNU APL returns infinity on overflow (for instance, you can try 3*1000 to see the difference) whereas Dyalog APL returns Domain error. Of course, both are valid and depending on your code and computation one can be much handier than the other.\nMy code initially was (copy-pasting it should work, but it is showing more spaces than needed):\n ‚çâ\u0026rsquo; *\u0026lsquo;[‚çé\u0026rsquo;1+0\u0026lt;|z\u0026rsquo;,(‚àä150‚ç¥‚äÇ\u0026rsquo;‚Üêc+m√óm\u0026rsquo;),\u0026lsquo;‚Üêc‚Üê(¬Ø2.1J¬Ø1.3+(((2.6√∑b-1)√ó(¬Ø1+‚ç≥b))‚àò.+(0J1√ó(2.6√∑b-1)√ó(¬Ø1+‚ç≥b‚Üê51))))\u0026rsquo;]\n The right-most area assumes GNU style, i.e. infinity. Which in a sense behaves like NaN in C: since it is not really a number, the comparison works and I get a nice image after indexing and rotating.\nTo make it work on Dyalog, the simplest way is adding an intermediate matrix, fixing points that diverge¬†(copy-pasting it should work, but it is showing more spaces than needed)\n ‚çâ\u0026rsquo; *\u0026lsquo;[‚çé\u0026rsquo;1+2\u0026lt;|z\u0026rsquo;,(‚àä130‚ç¥‚äÇ\u0026rsquo;‚Üê(d√ó4\u0026gt;|d)+4√ó4\u0026lt;|d‚Üêc+m√óm\u0026rsquo;),\u0026lsquo;‚Üêc‚Üê(¬Ø2.1J¬Ø1.3+(((2.6√∑b-1)√ó(¬Ø1+‚ç≥b))‚àò.+(0J1√ó(2.6√∑b-1)√ó(¬Ø1+‚ç≥b‚Üê51))))\u0026rsquo;]\n And this did the trick, and I leaned some more about how APLs work.\n","permalink":"https://mostlymaths.net/2015/04/handling-of-exponent-overflow-in-gnu.html/","tags":["Programming","Fractals","apl"],"title":"Handling of exponent overflow in GNU APL and Dyalog APL (on Mac)"},{"categories":null,"contents":"The links to Amazon and The Book Depository are affiliate links. If you purchase like 50 copies I may afford a coffee :D\n\nFrom Flickr\nIt all started after reading If you can‚Äôt choose, pick at random at Aeon.co. It delves into how choosing at random can be best in some cases. Give it a read, it is interesting. Among the HackerNews comments about this submission there were some mentions about choosing at random in real life, and to the novel The Dice Man (Amazon | Book Depository). I got interested in the idea.\nMy late afternoon routine usually consists of reading and probably playing with some iPad game. Since I‚Äôve worked as an editor in an app review site, I have quite a wide array of games always installed on my iPad (current count: 106 games.) I ended up playing mostly the same games though, which is kind of stupid with such a wide array of options. Here randomisation entered: I generated a random number to choose a folder (well, a sheet in the ‚Äúgames‚Äù folder) and another one to choose a game within that folder. This way I got more varied entertainment (nice) and one day I picked up a backgammon app. And why not? Let‚Äôs play some backgammon, if it was good enough for Conway, I‚Äôm sure I can enjoy it eventually.\nExactly at the same time I was reading a lot of literature on improvement, to see what I could do to improve my go playing abilities. Anything from chess improvement books, psychology of practice, calculation when playing draughts. So a natural next step was to pick a few backgammon books and see if there was some lesson I could cross-reference to go. I could always just improve my backgammon and have some good games.\nI quickly found out that backgammon is in the ‚Äúsame‚Äù set as chess. Even though not formally solved, the best computer opponents can slice through human players like a hot knife through butter. More interesting for me, backgammon engines are self-trained time-difference neural nets. You can read about seminal paper on this method by Tesauro, here. An advantage of having ultra-strong computers is that they can analyse your games and pinpoint which moves were good and also how bad the move was compared to perfect (well, computer-perfect) play.\nSo, I downloaded one of the best apps in the app store and started playing, all the while reading Bill Robertie‚Äôs Backgammon for Winners (Amazon | Book Depository). It works as a good introduction to the game all the while giving a lot of great pointers about strategy. At this point I should tell a little about how backgammon is played.\nIn backgammon your goal is to move all your 15 checkers to your ‚Äúhome.‚Äù The starting position has them spread out in a specific patter over the 24 positions of the board. Here you can see a diagram of the starting position. Black moves from 24 towards 1, white moves from 1 towards 24 (of course white sees it otherwise!)\n\nIf you want to create diagrams with TeX, check¬†this package\nThe 6 places closest to your home are known as your home board, and correspondingly the 6 further away are your opponents‚Äô home board.\nTo move your checkers you throw two dice, and can use either number on any checker (or both to one.) A lone checker on the board is named a blot, and if an opponent lands a checker on it (lands directly, not jumping) makes it go back to the bar. Then you need to re-enter the playing field, from the bar to the inner board of your opponent. If a position has more than one checker, it is known as a point (short of made point) and your opponent can‚Äôt land on it, needing to jump over it. So, the main strategy involves making points strategically, so you reduce your opponent mobility, and knowing when it is worth leaving a blot somewhere. A row of 2 or more points in succession are known as primes, and prime-making is a fundamental strategy. The best of course is to make all points in your home board and then hitting your opponent: since all points are closed there is no way to re-enter from the bar. But strategies are varying depending on how the rolls go, and as such several kind of ‚Äúgames‚Äù (in chess lingo they have open and closed games, in go we have moyo games and territory games‚Ä¶ backgammon has also different kinds depending on strategy picked.)\nRules are simple (verbalising them is the hardest part, I have just found :D) but make up for a very interesting and fast-paced game. Oh, before I forget there are two more things. Backgammon is played in matches for points, because a backgammon game can end with 3 different results: A normal win is scored when you just get all your checkers to home and your opponent also got some to hers. A gammon (which scores twice) happens when you get all and your opponent got none to home, and a backgammon (scores thrice) when there are still enemy checkers in your home board when you finish. In addition to the different game results, a game changer (and something I really like about backgammon) is the doubling cube. The game starts with a dube numbered in powers of 2 from 2 to 64 between the players. When a player feels ahead, he can pick it up and offer a double. Then, the opponent can accept (hence, they play the game for 2‚Äì4‚Äì6 points instead of 1‚Äì2‚Äì3 points) or reject it (resigning for just 1 point.) The player who accepts now owns the cube and can double at her own discretion. The process could go up indefinitely, but of course it doesn‚Äôt. The doubling cube just works perfectly to shorten matches and games, greatly speeding play.\nBack to reading suggestions, Bill Robertie‚Äôs Backgammon for Winners (Amazon | Book Depository) has enough strategy to get you covered, but eventually you‚Äôll find yourself needing something more, and I can heartily recommend Magriel‚Äôs Backgammon (Amazon). Huge book, very interesting and well-written. I have read it 1.5 times already, and there‚Äôs still lots of things I get wrong in my games.\nIf you have never played backgammon I recommend you pick some free app and start playing in your computer, tablet or smartphone. I personally can recommend Backgammon NJ which is available for Android and iOS and GNU Backgammon for Mac (or Windows, or Linux.) I actually don‚Äôt recommend playing on a real board. You‚Äôll get slogged by counting where 6 goes from here to there, computers make it easier by showing all valid moves. It took me 4 months and several hundred quick games against computers until I got good at ‚Äúmoving‚Äù so I know by sight where moves go.\nIf you are looking to play with real people, once you have picked up rules and have some knowledge, head over to Dailygammon. It is 100% free, turn-based play, and has an awesome feature that lets you play much faster than usual. You roll and move, and then the computer assumes your opponent did the best move for their roll, gives it to you and lets you enter more moves. If your opponent is good (so, he actually picks the best move when offered) games are really fast, since you are effectively playing in parallel. And if he does not, the game is ‚Äúas slow‚Äù as any turn-based. Neat, isn‚Äôt it?\n","permalink":"https://mostlymaths.net/2015/03/picking-up-backgammon.html/","tags":["Go","Thoughts","Games","Backgammon"],"title":"Picking up Backgammon"},{"categories":null,"contents":" Is this line noise?\n\n‚çâ\u0026#39; *\u0026#39;[‚çé\u0026#39;1+0\u0026lt;|z\u0026#39;,(‚àä150‚ç¥‚äÇ\u0026#39;‚Üêc+m√óm\u0026#39;),\u0026#39;‚Üêc‚Üê(¬Ø2.1J¬Ø1.3+(((2.6√∑b-1)√ó(¬Ø1+‚ç≥b))‚àò.+(0J1√ó(2.6√∑b-1)√ó(¬Ø1+‚ç≥b‚Üê51))))\u0026#39;] Nope. This is not line noise, but a complete APL program to display the Mandelbrot set in glorious ASCII, with asterisks and spaces just like Brooks and Matelski did a long time ago while studying Kleinian groups (it\u0026rsquo;s a short paper, read it someday). I\u0026rsquo;ll explain in (a lot, I hope) detail this line in a few moments. So, what\u0026rsquo;s APL first?\n\nAPL is literally A Programming Language. Funny, isn\u0026rsquo;t it? Its origins can be traced back to a way to formalise algorithms created by Kenneth Iverson while at Harvard. It is famed as a very cryptic language, for a reason. Its fundamental functions are unicode chars, and at first it feels extremely weird.\nI got interested in it after finding an iOS interpreter for J, a programming language developed as a successor to APL, also by K.I. It just got away without Unicode, leaving only cryptic dygraphs, like \u0026lt;.@o. (from a Wikipedia example of high precision computing.) J is very cool, in that it offers a terse syntax to operate with matrices and vectors, very much like Matlab (Octave in my case) or R. But I felt I\u0026rsquo;d rather check the first idea, before diving into the even weirder syntax of J. So, it was APL.\nThe first problem was finding a good APL interpreter. Most were paid (and extremely expensive) and I could only find 2 APL interpreters working in Mac OS. One is NGN APL an implementation focused on node.js Also usable on a browser, so it is cool. But I\u0026rsquo;d rather get a little closer to the system\u0026hellip; And decided to use Gnu APL instead. Of course, using an emacs mode for gnu-apl. Caveat: make sure to add\nexport LC_ALL=es_ES.UTF-8 export LANG=es_ES.UTF-8 to your .zshrc or similar, without it you\u0026rsquo;ll need to add a hook to gnu-apl mode reading\n(set-buffer-process-coding-system \u0026#39;utf-8 \u0026#39;utf-8) to make sure emacs and apl talk in utf-8. Without it, there are no commands to send to the interpreter!\nSince I\u0026rsquo;m also a heavy acme user, and acme is well-known in its unicode support, I used it instead to develop that line above. But emacs works correctly, I just like having things to tinker with acme.\nGetting back to the line-noisiness of APL, first you need to know that precedence is right-to-left, so\n3√ó3+1  in APL yields 12 instead of the expected 10. You can change this with parentheses. Now that I have taken this out, we can analyse the line above. Instead of explaining it from right to left, I\u0026rsquo;ll explain how I proceeded to develop it.\nIterating the quadratic polynomial (‚àä150‚ç¥‚äÇ\u0026#39;‚Üêc+m√óm\u0026#39;) Succintly (I could explain a lot of the mathematics behind, but I just want to do a picture today) to draw the Mandelbrot set we need to find complex points c=x+iy (remember: you can think of a complex point as a point in a plane, like a screen: it has an x coordinate and a y coordinate) such that computing\n$$f(z)=z^2+c$$\na lot of times with z=c is eventually a point outside a circle of radius 2. For instance, if c=1 this would be:\n $$f(1)=1^2+1=2$$ $$f(f(1))=f(2)=2^2+1=5$$ $$f(f(f(1)))=f(5)=25+1=26$$  And so on. In this particular case, after the first iterate we could stop. Remember that to do so, the product c¬∑c is the product of complex numbers.\nSo the first part I wanted to get out of my way was generating this iteration. There are several ways to do it in APL, but a very cool way I found was to first generate the required computation like above. How?\n\u0026#39;c+m√óm\u0026#39; computes exactly this, if m=c or if m is any other iterate, like m=f(f(f(c))). In APL speak, making m hold the same as c would be\nm‚Üêc and with right-to-left priority,\nc+m√óm‚Üêc means \u0026ldquo;assign to m the value of c, multiply m by m (remember: it\u0026rsquo;s the same as c) and add c.\u0026rdquo; Likewise,\nc+m√óm‚Üêc+m√óm‚Üêc ends is computing the 2nd term in the list above, if c is 1. So we have a pretty clear idea of how it should look like:\nsomething‚Üêc+m√óm‚Üêc+m√óm‚Üêc+m√óm‚Üêc+m√óm‚Üêc+m√óm‚Üêc+m√óm‚Üêc+m√óm‚Üêc This is essentially \u0026ldquo;many times\u0026rdquo; the string c+m√óm. There\u0026rsquo;s a very, very easy way to repeat something in APL. For instance, 3 ‚ç¥ 1 (read 3 reshape 1) creates a vector with three ones, 1 1 1. Reshape essentially multiplies or trims vectors. But\u0026hellip; 3 ‚ç¥ 'tomato' is \u0026lsquo;tom\u0026rsquo;. The reshaping also cuts, of course! What we need is to make APL treat the string c+m√óm as one element. This is done with the next instruction in the Mandelbrot line, as you may guess: encapsulate.\n‚äÇ\u0026#39;‚Üêc+m√óm\u0026#39; ensures APL treats it as one element, so\n20‚ç¥‚äÇ\u0026#39;‚Üêc+m√óm\u0026#39; generates a neat and long string of what the iterates should look like. To make sure the final string makes APL-sense, first we enlist with ‚àä: turns the vector of repeated iterates into just one iterated element, like a long string all together. This could actually be removed, but it allowed me to learn a new function and I think it\u0026rsquo;s pretty interesting. To end in a proper way, we add to the string a receiver variable z and fuse the strings with ,.\nI know this was long, but the iteration was the trickiest part!\nGenerating the grid of points \u0026#39;‚Üêc‚Üê(¬Ø2.1J¬Ø1.3+(((2.6√∑b-1)√ó(¬Ø1+‚ç≥b))‚àò.+(0J1√ó(2.6√∑b-1)√ó(¬Ø1+‚ç≥b‚Üê51))))\u0026#39; Since APL is cool with matrices (and complex numbers!) we can assign to the initial c a whole matrix of complex points (our screen pixels) and then we\u0026rsquo;ll have all the data required for the picture.\nThis weird piece is just a compact way of generating a grid. To make it easier to understand,\n‚ç≥5 (that\u0026rsquo;s read as iota 10) generates the sequence 1 2 3 4 5. To create a matrix we need two sequences (one for the $x$ coordinates and another for the $y$ coordinates.) For the complex numbers we can do\n0J1 ‚ç≥√ó 5 which yields 0J1 0J2 0J3 0J4 0J5. As you may guess if you\u0026rsquo;ve been following, 0J1 is just the complex number $i$. For some weird reason APL uses the j letter instead of $i$. No big issue. Now we have the $x$\u0026rsquo;s which go from 1 to 5 and the $y$\u0026rsquo;s which go from $i$ to $5i$. Whichare then all the complex points in the plane we are creating? This means adding one of each $x$ to each $y$, to get a grid. Similar to a multiplication table, but with sums instead of products. APL magic to the rescue, there is a function for that\u0026rsquo;s\n(‚ç≥5) .+ (0J1√ó(‚ç≥5)) returns\n1J1 1J2 1J3 1J4 1J5 2J1 2J2 2J3 2J4 2J5 3J1 3J2 3J3 3J4 3J5 4J1 4J2 4J3 4J4 4J5 5J1 5J2 5J3 5J4 5J5  which is pretty close to what we need. To plot the Mandelbrot set we are only interested (mostly, and in this particular instance) in points with real coordinate $-2.1\u0026lt;x\u0026lt;0.5$ and complex coordinate $-1.3\u0026lt;y\u0026lt;1.3$ (just to make it square which is easier to reason). So, the next long APL blurb just adds a matrix similar to the one above to a complex point, generating the grid of points we want, and assigns it to c. Almost done!\nComputing and plotting ‚çâ\u0026#39; *\u0026#39;[‚çé\u0026#39;1+0\u0026lt;|z\u0026#39;, After we have the set of points in c, we merge this string (with comma) to the iteration we developed above. At the far right of the iteration we find this piece:\n\u0026#39;1+0\u0026lt;|z\u0026#39;, As you may guess, this adds to the string we have constructed the term 1+0\u0026lt;|z which from right to left does:\n Compute the norm (distance to the origin) of the final iterate, which was assigned to z at the end of the iteration, the norm is computed with | Check if this is larger than 4. This generates a matrix of 1s and 0s (for booleans) Add 1 to all entries of this matrix (so we have a matrix full of 1s and 2s  Note: The first version of this code had 0\u0026lt;|z, which works well for rough images of the Mandelbrot set, since most iterates are eventually INFNAN, which is a funny number in programming, since it is positive, smaller than 0, different from itself, etc. This is cleaner though.\nWe have a neat string which can generate a matrix of 1s and 2s and represent the Mandelbrot set. How do we make this string compute something? Meta-magic\n‚çé (known as execute) takes a string and computes it as an APL function. Just like eval in Lisp, Javascript or Python.\nRepresent it neatly ‚çâ\u0026#39; *\u0026#39;[stuff] Since a matrix can be used to index a vector, we use this newly computed matrix as indexes (i.e. between square bracket) with the vector ' \\*' so we get almost a Mandelbrot set. But since I was slightly lazy when generating the grid of points, it is transposed. ‚çâ (transpose) fixes it and finishes the line and the program.\nConclusion Writing this line of code took me quite a long time, mostly because I was getting used to APL and I didn\u0026rsquo;t know my way around the language. Now that I\u0026rsquo;m done I\u0026rsquo;m quite impressed, and I\u0026rsquo;m looking forward to doing some more fun stuff with it. And if possible, some useful stuff.\n","permalink":"https://mostlymaths.net/2014/01/the-mandelbrot-set-in-one-line-of-apl.html/","tags":["Programming","Emacs","Fractals","Acme","Maths","APL"],"title":"The Mandelbrot set in one line of APL"},{"categories":null,"contents":" A few months ago (woah, so long already) I had an impulse buy: I purchased a circular slide rule from Etsy. It was cheap, and I had always wanted one, so‚Ä¶ I just bought it (a neat addition to my Addiator.)\nI guess if you are geeky enough to read mostlymaths.net, you know how a slide rule works. Although I knew how to use it, getting to grips with it took a little while. Just to make sure you follow along here\u0026rsquo;s a brief explanation.\nIn a normal rule (as pictured below) you can measure a distance, add the distance to another one and get a new distance. 4 and 4 are 8, see?\n A slide rule works exactly the same, but the scale on the rule is logarithmic. This means that if you measure the distance between 1 and 3, and add it to the point 3, you get 9 (which is 3 times 3.) This is because in a linear scale distance measures the difference ($b-a$) and in a logarithmic scale it measure ratios ($b/a$)\n Usually you will do this using a piece labeled the same as the slide rule:\n In a normal slide rule (the long wooden or aluminium thing) you have several scales, all placed together with an indicator to know where to measure. In the simplest setting a slide rule is basically what is shown above: a way to fix a distance and displace it along. You could do it with your fingers, even.\nIn a basic model of circular slide rule (like the KL-1) you have something that works much like this. See the picture below:\n If you look carefully you\u0026rsquo;ll see a marker (which is place just below a knob, and fixed in the glass cover) and a red marking needle (it\u0026rsquo;s hard to see, but it\u0026rsquo;s red.) In this picture you\u0026rsquo;ll also see the logarithmic scale (below, from 1 to 9) and a square scale just on top (from 1 to 90.)\nThe black knob (on top of the fixed marker) displaces the scale, leaving the red marking needle wherever it is (it moves the paper where the scale is written) and the red knob (the other one) moves just the needle, hovering above the paper.\n If you set the black marker on 1 by moving the black knob and then the red marker on (for example) $\\sqrt{2}$ (which is the number just below 2 in the square scale) you are fixing the ratio $1-\\sqrt{2}$ (roughly $1-1.4$)\n If you now twist the black knob, you are moving the scale while the distance black-red remains perfectly fixed. So if you place the black marker above 2, you are \u0026ldquo;adding\u0026rdquo; the ratio of $\\sqrt{2}$ and 2, which means $2 \\cdot \\sqrt{2}$ (roughly 2.8):\n So, no mysteries in how this works! In the back there are a few trigonometric scales (known in the slide rule lingo as the S and T scales, for $sin$ and $tan$):\n For the $sin$ and $tan$ scales, you place the cursor (the red marker) in the degrees scale (the one from 10 to 90) and you read the sin of it on top. For $tan$, you need to check the degrees in the spiraling scale in the center, and read the $tan$ of the angle also on top.\nWhat\u0026rsquo;s it good for? Such a small circular slide rule has a fairly low precision (2 digits more or less.) This essentially makes it pretty much useless for me, since I have more or less the same precision in mental division or multiplication.\nAnyway, I have used it several times when checking traffic numbers for websites, when estimating daily visits from monthly or bimonthly numbers. Once you set the number of days as ratio, it\u0026rsquo;s pretty fast.\nAn interesting use would be for quick currency conversions while abroad (you fix the ratio and can easily convert from currencies) but since I travel mostly in Europe, I can\u0026rsquo;t use it for this (Norway, Iceland, Great Britain and Denmark are good targets still.)\nPeople still use slide rules though: nomographs (what the sin and tan scales are, actually) are a quick way to compute things, and are used in aviation, electric engineering and other fields where speed is interesting and 5 digit precision is not as important.\n","permalink":"https://mostlymaths.net/2013/11/my-russian-kl-1-circular-slide-rule-and.html/","tags":["Geek","Maths"],"title":"My Russian KL-1 Circular Slide Rule (and a small intro to slide rules)"},{"categories":null,"contents":"A few days ago I found myself with a problem. I wanted a reddit button in one of our websites, and our technical guy wanted it to be asynchronous. After a little poking around and deciding that reddit doesn\u0026rsquo;t offer asynchronous buttons, I rolled my poor man\u0026rsquo;s version: wrap it in a $(document).ready() It\u0026rsquo;s not asynchronous, but at least it won\u0026rsquo;t block page loading.\nBoth happy, we deployed and I tested. Worked well, no problem. Well, actually, yes. A problem shared by all reddit buttons, one that was very troublesome here in mostlymaths (back when I had a share on reddit button just beside the post title.)\nWhen setting up the button you select the target reddit you\u0026rsquo;d rather have your users send your content. In a page about Apple stuff, it would be r/apple. The problem is though that your users are free and can do whatever they want. So they go and submit to r/technology. Fine, r/technology is cool enough, lots of readers. Trouble is, when a user arrives from r/technology to your blog, after clicking on the link\u0026hellip; He will see your widget with an ugly submit text, and no upvotes or downvotes:\n\neven though your post has quite a few votes already in r/technology. The trouble comes from setting the target subreddit beforehand: if the url is not in this subreddit, reddit looks nowhere else. Of course, you\u0026rsquo;d rather have:\n\nwith the real counter. After all, this means making the experience completely seamless:\n Reddit user sees a cool link to your content in r/whatever. Clicks Lands on your page Upvotes (or downvotes)  instead of\n Reddit user sees a cool link to your content in r/whatever. Clicks Lands on the page Tries to upvote, needs to submit instead Is forced to submit to r/whatever, gives up (or not)  An easy way to solve this problem is to check the referring URL. If it matches a subreddit, we can set the target of our widget to that subreddit instead of the default one. All reddit readers happy!\nThere\u0026rsquo;s another issue, though: users not arriving from reddit.\nA random user landing in your awesome post, which has a bazillion points in r/whatever likes your content, and wants to upvote it. But, alas! He sees the dreaded submit button, because our default is r/apple. Or worse, sees 0 (or even a negative number!) because it has been downvoted in our target subreddit.\nThis can also be solved. Reddit offers a clear-cut json API, allowing jsonp callbacks. This means that we can write a small piece of javascript that will check whether our post has been submitted to another reddit AND change the target to that one! All reddit users happy!\nBelow you can find the code. Fork it, use it, whatever. Be happy. If something breaks or doesn\u0026rsquo;t work as expected it\u0026rsquo;s not my fault: use cases may vary.\n","permalink":"https://mostlymaths.net/2013/09/a-slightly-better-reddit-upvotedownvote.html/","tags":null,"title":"A Slightly Better reddit Upvote/Downvote Widget (button)"},{"categories":null,"contents":"\nVia pixelfrenzy@flickr\nBeware! The software described here is just for personal and very light use. Its use beyond purely recreational value is against Google Search terms of service, and I don\u0026rsquo;t want you or anyone to step that line. Any use of this code is at your own risk.\nWell, after this scary paragraph, lets get to the real meat. Which boils down to just a few lines of bash.\nI\u0026rsquo;m a command line interface geek. I enjoy tools like taskwarrior or imagemagick. And every time I have to chew some data, I go down the command line route. In the last months I have found the incredibly effectiveness of awk, sed, head, tail and tr to convert what some web service spits into useful data I can feed to R to do something useful.\nToday I was thinking about search rankings, and wondering if I could write a small tool that eased my occasional curiosity. Yes, I have done this by hand: search for some keyword and look through 8 pages of results looking for one of my websites. I don\u0026rsquo;t do it very often, but sometimes it has to be done. And since I love automating things and the command line, I wrote the following blurb. I don\u0026rsquo;t claim it is beautiful, but it works:\n#/bin/sh `````` \\# Perform a web search in Google via the command line. Usage: `````` \\# automatic.sh \u0026quot;search term\u0026quot; domain pages¬†`````` \\# domain stands for what goes after the dot in \u0026quot;google.\u0026quot; and¬†`````` \\# defaults to com. Pages is the number of search pages to¬†`````` \\# process. Defaults to 1, since this script fetches \\# 100 results per page. `````` domain\\=${2\\-com} pages\\=${3\\-4} span\\=$(seq 0 1 $pages) for num in $span do iter\\=$((num\\*100)) `````` \\# This sets the user agent to Lynx, a command-line web browser to \\# let google know it's better if there is no javascript and fluff \\# laying around. wget --header=\u0026quot;User-Agent: Lynx/2.6 libwww-FM/2.14\u0026quot; \u0026quot;http://www.google.$domain/search?q=$1\u0026amp;start=$iter\u0026amp;num=100\u0026quot; -O search$num -q \\# Comments about this piping: \\# The sed 'E'xtended command looks for patterns like \\# href=\u0026quot;/url=something\u0026quot;, with the goal of grabbing that something: \\# that's the result URL from the search. It captures this group \\# and rewrites it as \u0026quot;SearchData, something\u0026quot; with several new lines \\# for readability (in case you remove the grep pipe.) \\# The grep is just used to prune all lines that are not search \\# results, and then awk is used to print the search result number \\# and the URL sed -E \u0026quot;s/\u0026lt;\\[^h\\]\\*href=\\\\\u0026quot;\\\\/url\\[^=\\]\\*=(\\[^\u0026amp;\\]\\*)\u0026amp;\\[^\\\\\u0026quot;\\]\\*\\\\\u0026quot;\u0026gt;/\\\\n SearchData, \\\\1 \\\\n\\\\n/g\u0026quot; search$num | grep \u0026quot;SearchData\u0026quot; | awk \u0026quot;{print $iter+NR \\\\\u0026quot; \\\\\u0026quot; \\\\$2}\u0026quot; done `````` \\# The script leaves a lot of files named \u0026quot;search??\u0026quot; laying in the directory it \\# is executed. In some sense this is a feature, not a bug. You can \\# then do something with them. If you don't want them laying around, \\# add rm search$num before done.  To find the search standings of a particular page for a particular term, just pipe through grep or ag:\n./automatic.sh \u0026ldquo;learn to remember everything\u0026rdquo; | grep \u0026ldquo;mostlymaths\u0026rdquo;\nFor extra fancy points you can use this to create reports inside Acme, if you are so oriented.\n","permalink":"https://mostlymaths.net/2013/05/find-search-engine-rankings-via-command.html/","tags":["Command Line","Linux","Data","SEO","ag","Mac","DIY","acme"],"title":"Find Search Engine Rankings... via the Command Line"},{"categories":null,"contents":" Note: It\u0026rsquo;s best to open the videos in full screen. Also I have added a few line breaks¬†or readability¬†in the code snippets that will make them not work correctly. It\u0026rsquo;s not hard to find where they are, if you run into any problems let me know.\nIf you\u0026rsquo;ve been following this blog, you\u0026rsquo;ll know I\u0026rsquo;ve been using Acme and related Plan 9 from User Space utilities lately. One of its pieces is the plumber. And knowing what it does may be tricky:\n Plumbing is a new mechanism for inter-process communication in Plan 9, specifically the passing of messages between interactive programs as part of the user interface. Although plumbing shares some properties with familiar notions such as cut and paste, it offers a more general data exchange mechanism without imposing a particular user interface.\n From Plumbing and other utilities by Rob Pike\nWhat is the plumber? It\u0026rsquo;s somewhat hard to explain at first. I\u0026rsquo;ll try to give you a simple example from Mac OS. In Mac OS you can find a command line utility named \u0026ldquo;open\u0026rdquo; (/usr/bin/open). From its manual entry you can read:\n open \u0026ndash; open files and directories\n Simple and easy. And it just does what you\u0026rsquo;d expect:\n open something.jpeg will open this image in Preview (or its default opener) open afile.txt will open this text file with its default opener, too. open http://web.something will open the webpage in the default browser.  I think you get the idea. Open just opens something. If you use the command line in Mac OS, you have probably used it on and off to quickly open images or pdfs. I know I have.\nThe Plan9 plumber is like open on steroids. Why?\nPlumbing superpowers The strength of the plumber is two sided:\n Completely configurable System wide (kind of)  Completely configurable The plumber works with rules, and you can just write your own cool roles in a file ~/lib/plumbing What does a rule look like? Here is a rule to open an image using the Mac OS open utility:\ntype is text data matches '\\[a‚àízA‚àíZ0‚àí9\\_‚Äì./\\]+' data matches '(\\[a-zA-Z¬°-ÔøΩ0-9\\_\\\\-./\\]+) `````` \\\\.(jpe?g|JPE?G|gif|GIF|tiff?|TIFF?|ppm|bit|png|PNG)' arg isfile $0 plumb start open $file  Rules work in a trigger-and-fire way. A set of tests make the trigger, if the text you pass to the plumber matches, the rule is fired. In this case:\n The type of the data has to be text (in fact is the only type the plumber handles) The content of the message has to match this regular expression [1] The content of the message has to match this regular expression, with groupings The argument group $0 (the whole regexp match) has to be a file, then the variable $file holds its full path THEN we run \u0026ldquo;open $file\u0026rdquo;   [1] This is needed. From the plumb manual section 7 (man 7 plumb¬†or right click plumb(7) inside acme):\n The first expression extracts the largest subset of the data around the click that contains file name characters; the second sees if it ends with, for example, .jpeg. If only the second pattern were present, a piece of text horse.gift could be misinterpreted as an image file named horse.gif.\n This relatively simple example is big enough to allow us to make pretty cool things with the plumber. Although this example only allows us to type plumb filename.jpg and the image will be opened via \u0026ldquo;open\u0026rdquo;.\nBut we may get as fancy as we like, for example:\n\\# isbn10 search through Amazon type is text data matches '(\\[0-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\] `````` \\[0-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\])' plumb start open 'http://www.amazon.com/s/?field-keywords='$1   Type has to be text, as always Match exactly 10 digits (Plan9 regexes don\u0026rsquo;t have brace count) Then search the ISBN through Amazon  Now we can run plumb 0836213122 to find what book this ISBN points to. Neat, isn\u0026rsquo;t it? Well, it just gets better.\nSystem wideness of the plumber When I say the plumber works system wide, I mean that in the Plan9 ecosystem (or in plan9ports) anything the plumber recognises as \u0026ldquo;special\u0026rdquo; can be easily plumbed. For example, I\u0026rsquo;m typing this in acme, thus I can right-click this ISBN (0836213122) to switch to Chrome and find what this book is. And if I\u0026rsquo;m in a 9term window, I can middle click-and-release to get the same. It\u0026rsquo;s neat, but of course it gets neater: right clicking in an expression filename:lineno gets you to this match, making grep a whole lot more useful.\nFor me, its main strength is inside acme, since it is almost the only piece of Plan9 I use with regularity (I use zsh which is pretty good as it is.) As such, using the plumber we can add even more awesomeness to this editor:\ntype is text data matches 'ag:\u0026quot;?(\\[a-zA-Z¬°-ÔøΩ0-9\\_\\\\-./\\]+)\u0026quot;?' arg isdir . plumb start zsh -c 'ag --nogroup --nocolor --search-files \u0026quot;'$1'\u0026quot; '$dir'¬†`````` | plumb -i -d edit -a ''action=showdata filename='$dir'/ag/'$1' '''  This lets me write ag:word or ag:\u0026ldquo;something longer\u0026rdquo; to search for word or \u0026ldquo;something longer\u0026rdquo; recursively in the current working directory using The Silver Searcher.\nThe Silver Searcher is a source code file searcher, similar to ack. Ack and tss are both faster than grep because they omit .ignore, backup and non-source files. Of course this can be overriden, but since I usually work only with source when using grep, it is a great tradeoff.\nThe --search-files is a hidden option, without it line numbers are not rendered when ag is ran from another program (see this github issue).\nOr I can add the following to use my wikipedia quick searcher script (based on this neat commandlinefu hack):\ntype is text data matches 'def:\u0026quot;?(\\[a-zA-Z¬°-ÔøΩ0-9\\_\\\\-./\\]+)\u0026quot;?' plumb start zsh -c 'wikiCLI.sh '$1'¬†`````` | plumb -i -d edit -a ''action=showdata filename='$dir'/wikipedia/'$1' '''  So I can write and use¬†def:europium¬†in case of need. Of course, it is far more handy to use acme\u0026rsquo;s 1-2 chords for this: select europium with button 1, select wikiCLI.sh (the name of my script) with button 2 and without releasing, tap button 1\u0026hellip;\nAs you can guess, this won\u0026rsquo;t work in a 1-button Mac laptop without external mouse, since you can\u0026rsquo;t press button 1 while pressing button 2\u0026hellip; After all, button 2 is button 1 while pressing Alt. To make it work, I patched devdraw in plan9ports:\ndiff -r 1bd8b25173d5 src/cmd/devdraw/cocoa-screen.m \\--- a/src/cmd/devdraw/cocoa-screen.m Tue Mar 19 14:36:50 2013 -0400 +++ b/src/cmd/devdraw/cocoa-screen.m Sat Apr 06 20:02:44 2013 +0200 @@ -847,7 +847,9 @@ case NSFlagsChanged: if(in.mbuttons || in.kbuttons){ in.kbuttons = 0; \\- if(m \u0026amp; NSAlternateKeyMask) + if(m \u0026amp; NSControlKeyMask) + in.kbuttons |= 1; \\+ if(m \u0026amp; NSAlternateKeyMask) in.kbuttons |= 2; if(m \u0026amp; NSCommandKeyMask) in.kbuttons |= 4;  And now you can press Ctrl while having Alt pressed to send a \u0026ldquo;button 1\u0026rdquo; chord. Simple and innocuous patch.\nFinal remarks As you can see, the plumber can be useful in every day tasks, enhancing acme. Together with the ability to execute text, the plumber makes acme and incredibly different text editor. It\u0026rsquo;s not vim, it\u0026rsquo;s not emacs. It is acme, in its own right a very powerful piece of software. I hope these posts I\u0026rsquo;m writing lately are making you have an itch to use acme and have a look at what Plan 9 has to offer.\n","permalink":"https://mostlymaths.net/2013/04/just-as-mario-using-plan9-plumber.html/","tags":["plan9","grep","ag","acme","diff","github"],"title":"Just as Mario: Using the Plan9 plumber utility"},{"categories":null,"contents":" Text editors. You hate them or love them. Praise them with religious zeal, and attack them with the same power. I\u0026rsquo;ve been an emacs user for the last 8 years, getting as deep as I could without checking the source. And the past few months I have started using evil-mode in emacs, to get some taste of vim in my daily editing (mostly text objects.)\nThere\u0026rsquo;s still a third contestant in editor-land, for me. It is Acme, the odd editor from Plan9 from Outer Space, the even-more-odd operating system from Bell Labs. There\u0026rsquo;s no need to install Plan9 and fight against your current hardware. If you are in any kind of Unix derivative (Mac OS, Linux) you can install Plan9 from User Space, a port of most of Plan9 to work in user space (as you may guess.) Plan9 is a whole different thing from other Unix systems, and Acme is an incredibly different beast from any other editor you know.\nI can start with a screenshot of it:\n\nThis is how this post looks like. You can see an adict window by the side\nThis is Acme. I hope you like this shade of yellow and this shade of blue. There\u0026rsquo;s no way to change it without getting into the source code and recompiling. It may be sound odd, but I kind of like it. It\u0026rsquo;s refreshing. In emacs and vim it is very easy to get a beautiful colour scheme (I use solarized-dark everywhere I can,) but this means you can choose. And choosing means a decision, with pros, cons and whatever. Just screw it and pick blue and yellow.\nOnce you are used to it, you have to face something \u0026ldquo;worse.\u0026rdquo; If you come from emacs or vim this will sound just horrible. Wait for it. Everything is done with the mouse. Yes, you read that well. No keyboard shortcuts (well, there are a few, I\u0026rsquo;ll get into these in a short while.) Mouse clicking, moving and chording. The likes. I know this will sound stupid, a waste of time, prone to carpal tunnel syndrome. Let me go on for a while.\nEmacs and vim users alike like to bash any other editor in the grounds of speed. I can refactor faster than you can, is almost the motto. Watch how fast I type, thus how fast I change code. I\u0026rsquo;m one of these, I usually don\u0026rsquo;t even have to think when I\u0026rsquo;m doing \u0026ldquo;something\u0026rdquo; in emacs or vim and changing stuff. But then again, how often I\u0026rsquo;m changing stuff?\nEmacs and vim make easy changing what\u0026rsquo;s there. Multiple-marks, text objects, quick jumps. All this is there just to make changing stuff fast. Agree? Ok, go on. If you don\u0026rsquo;t, no problem. Go on anyway.\nNow the revelation: most of the time I\u0026rsquo;m writing, I\u0026rsquo;m creating new stuff, not rewriting or moving old stuff. Shocking? Watch your own coding/writing habits. Yes, I change what\u0026rsquo;s in text strings (ci\u0026rdquo;, in vim) and is incredibly fast. In Acme, you can double-click after the first quotation mark (or just before the last) to select everything inside a pair of delimiters (a pity it is not smart enough to understand dollar-delimiters as used by LaTeX.) But the point is not that speed. What are you changing this string for? Did you wait to think about it or you just changed it, compiled it, checked it and went back to square one?\nPause: the file servers Acme and Plan9 follow a special philosophy: in some sense, everything is a file. And most programs (I could say all, but I\u0026rsquo;m not that into Plan9 to be sure) act as file servers. Acme is just one of these: everything you can see in an Acme session is a file. For example, this text I\u0026rsquo;m writing (you saw it in the previous screenshot) has window ID 10. So\u0026hellip;\nacme/10/ is the directory associated to this text acme/10/addr is a file with an address position for text insertions acme/10/body is a file with the contents of the editing window (can't overwrite) acme/10/ctl is a \u0026quot;file\u0026quot; (socket-like) that allows you to send commands to the window acme/10/data is a file with the data of the editing window (can overwrite) acme/10/errors is a file with data spat by commands executed by this window acme/10/event is a \u0026quot;file\u0026quot; (socket-like) where you can read/write the editing session acme/10/tag is a file holding the contents of the tag (the menu above) acme/10/xdata is a file with the data (addr bound) of the editing window  What does this mean? It means I can write code in any language that can manipulate this text. Read this out loud: I script something, and make it work with the text I\u0026rsquo;m editing. Think about indenting, linting, type-checking, done against the working copy, not the real file. With output to a special buffer associated to the file. Extending the editor is just a matter of writing a program.\nBack into Acme Back into Acme. In Acme there\u0026rsquo;s no GUI: text is the user interface. TUI. Every window is composed of two pieces: the text in the window (its \u0026ldquo;body\u0026rdquo;) and a tag above it (in blue.) If you want to copy something, select it and middle-click on Snarf. Then put your cursor where you want to paste and middle-click on Paste. Done. Of course, Snarf and Paste can be anywhere. In the tag menu, in the text you are editing or even in another document. They are just words. Words that do the work.¬†But the same works with shell commands. I can type date and middle-click it, to get the current date in a new buffer. Same goes with ls. Or even |md5sum to calculate the checksum of some text. Or append something to a window. For example, there\u0026rsquo;s an easy way to make small queries to Wikipedia via the command line (see http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns) I wrote a script to do it, sitting in my path, so I can now type here \u0026lt;wikiCLI.sh Acme with the cursor a few lines below this\u0026hellip; and middle click.\nResult:\n \u0026ldquo;Acme (\\; , the peak, zenith, prime) denotes the best of something. Acme or ACME may also refer to: Acme Corporation, a fictional company in the cartoon world of Looney Tunes, ACME Detective Agency, a fictional detective agency from the Carmen Sandiego seri\u0026rdquo; \u0026ldquo;es of computer games and television shows, Acme (album), the sixth album by the Jon Spencer Blues Explosion, Acme Novelty\u0026hellip; http://en.wikipedia.org/wiki/Acme\u0026quot;\n On button clicking I use a Macbook (almost 5 years old already, and still kicking.) And as you may guess, it only has one button. So, how do I manage to use middle and right clicking with ease? Well, easy. Or almost. Pressing alt while clicking simulates middle click, command while clicking simulates right clicking (in Acme, not in general.) Easy, since alt is in the middle and command just right to it.¬†Problem is, chording is most awesome with a real 3-button mouse. Why? I\u0026rsquo;d rather search for wikiCLI.sh Acme (text editor) to get:\n ;; Truncated, retrying in TCP mode.\n\u0026ldquo;Acme is a text editor and graphical shell from the Plan 9 from Bell Labs operating system, designed and implemented by Rob Pike. It can use the sam command language. The design of the interface was influenced by Oberon. It is different from other editing \u0026rdquo; \u0026ldquo;environments in that it acts as a 9P server. A distinctive element of the user interface is mouse chording\u0026hellip; http://en.wikipedia.org/wiki/Acme_(text_editor)\u0026quot;\n Doing so is a little more troublesome: select \u0026ldquo;Acme (text editor)\u0026rdquo; and select the command with the second button (to execute) finally click: clicking sends the last selection as argument 1 to the program. Doing so with a Mac trackpad is impossible: there\u0026rsquo;s no way to simulate a left-click while middle-clicking. I also find there\u0026rsquo;s a glitch here: there\u0026rsquo;s no way to redirect the output of the command. It\u0026rsquo;s either overwriting the selection of the argument, or goes to the +Errors window.\nSelections, regexes and other furry animals How can I select everything? :0,$ and right-click. Done. Want to replace all instances of acme for Acme? Middle click this: Edit ,s,acme,Acme,g The sam syntax is easy but\u0026hellip; odd. The first , is to select everything, s to replace acme for Acme, g for global. Easy? Not much, but Acme is just different. And works. Edit is the command to execute an editing command, by the way.\nYou can also do regex searches. Like :/interface/ or :/click[i|.]/. And you can get fancy, by doing filename:. For example, acmescripting:/interface/ in another window would open acmescripting in the first instance of interface. And acmescripting:20 opens it, selecting line 20. As you can see, filename is implied to be current file in case of doubt. Also, this kind of referencing works nice with most compilers and linters.\nKeyboard shortcuts There are a few keyboard shortcuts, even if Acme is mouse-centric. Press Esc, and all text written since the last click is selected. In addition to this, we have the other standards:\nC-U ‚Äö√Ñ√¨\u0026gt; Delete from cursor to start of line.\nC-W ‚Äö√Ñ√¨\u0026gt; Delete word before the cursor.\nC-H ‚Äö√Ñ√¨\u0026gt; Delete character before the cursor.\nC-A ‚Äö√Ñ√¨\u0026gt; Move cursor to start of the line.\nC-E ‚Äö√Ñ√¨\u0026gt; Move cursor to end of the line.\nNothing more, nothing less. Minimal, isn\u0026rsquo;t it?\nScripting power Finally, I want to show some scripting power of acme. I introduced the concept of the filesystem a few paragraphs ago. Now, let\u0026rsquo;s see how it can be used. Let\u0026rsquo;s say for example I\u0026rsquo;m an avid C programmer, and like to have code neatly indented. Well, an option is to write a script that uses the indent command line program to indent the text in the window. How? Now comes a trivial example, not written in the best way possible\n#!/bin/zsh #9indent echo \u0026quot;WinId is: \u0026quot; $winid echo -n \u0026quot;1,$\u0026quot; | 9p write acme/$winid/addr echo \u0026quot;Selected whole contents for overwriting with 'write'\u0026quot; 9p read acme/$winid/body | indent -st | 9p write acme/$winid/data  First is to check which is the ID of the window. When invoking a command, its environment has it in a variable, aptly named winid. To overwrite the contents of the file, we set the addr to the whole file with the selector 1,$. We do so by piping to 9p with the command write. 9p is the middleman, allowing us to read and write files in 9P servers, like the ones acme and other Plan9 programs offer. Finally we get the body, indent it (-st is the command to use stdin in indent) and pipe it to data. Done! This indents a well-formed C file as expected.\nAdd this file to your path and add 9indent to your tag. Ready to indent by middle-clicking.\nA slightly more complex example is to generate the output of a Markdown file. The code is as follows:\n#!/bin/zsh echo \u0026quot;WinId is: \u0026quot; $winid format=$(9p read acme/$winid/tag) echo \u0026quot;Tag is \u0026quot; $format echo \u0026quot;Format in tag\u0026quot; case $format in \\*\u0026quot;latex\u0026quot;\\* ) echo \u0026quot;latex ouput selected\u0026quot; format=\u0026quot;latex\u0026quot; ;; \\*\u0026quot;groff-mm\u0026quot;\\* ) echo \u0026quot;groff-mm output selected\u0026quot;¬†format=\u0026quot;groff-mm\u0026quot; ;; \\*\u0026quot;odf\u0026quot;\\* ) echo \u0026quot;odf ouput selected\u0026quot;¬†format=\u0026quot;odf\u0026quot; ;; \\*\u0026quot;html\u0026quot;\\* ) echo \u0026quot;html output selected\u0026quot;¬†format=\u0026quot;html\u0026quot; ;; \\* ) echo \u0026quot;Unrecognized format, defaulting to html\u0026quot; format=\u0026quot;html\u0026quot; ;; esac echo -n \u0026quot;1,$\u0026quot; | 9p write acme/$winid/addr echo \u0026quot;Selected whole contents for overwriting with 'write'\u0026quot; 9p read acme/$winid/body | peg-markdown --to=$format | 9p write acme/new/body echo \u0026quot;Wrote the html-markdowned version to a new buffer\u0026quot; last=$(9p ls acme | sort -g | tail -n 1) echo \u0026quot;Get last created buffer\u0026quot; echo -n \u0026quot;clean\u0026quot; | 9p write acme/$last/ctl echo -n \u0026quot;0,0\u0026quot; | 9p write acme/$last/addr echo -n \u0026quot;dot=addr\u0026quot; | 9p write acme/$last/ctl echo -n \u0026quot;show\u0026quot; | 9p write acme/$last/ctl echo \u0026quot;Moved to beginning\u0026quot;  This is slightly more complex, at least on the shell side. It checks the tag for one of the accepted formats for peg-markdown and then creates the formatted output in a new window, by writing to acme/new/body. Then I want the cursor to be at the beginning of this file, not at the end (as is the default.) It was slightly tricky, but the best way was to sort in numerical order and get the last-created window (that\u0026rsquo;s this tail -n 1) then to set the address at 0,0 and set the dot (selection) at address by writing at the control file. Then the command show makes the window show the selected position: 0,0. Done! Intersped among all this is a \u0026ldquo;clean\u0026rdquo; command, to make this new window to close.\nHere you can see a video of these scripts in a sample use (and you\u0026rsquo;ll see how I miss a middle click - execute - for a right-click - open)\nDirty, Clean, Put A window can be dirty or clean. It is clean when the contents and the disk file are the same. It is dirty when it is being edited. The best way to know if it is dirty is if you see \u0026ldquo;Put\u0026rdquo; in your tag menu, just beside the vertical bar. By middle-clicking Put (or Putall in the main tag) you save this file and mark it as clean.¬†Also, making a window clean makes closing it quicker (middle click in Del.) Dirty windows need to be Put, or you have to Del again.¬†That\u0026rsquo;s all, folks (for now) I have yet to introduce the plumber, a mechanism that allows you to open arbitrary files (using rules) from within acme. For example, I can open pdf files by right-clicking on them (i.e. some.pdf) but instead of using page (the Plan9 image viewer) I use MacOS Preview. I was forced to do so, since page can\u0026rsquo;t handle all the fonts in a LaTeX generated PDF, so for me it\u0026rsquo;s useless. I\u0026rsquo;ll probably write how I configured the plumber in my next Acme installment.\nIn some sense, the plumber is like a system-wide, app-deep \u0026ldquo;open\u0026rdquo; mechanism. In Mac OS, you can \u0026ldquo;open\u0026rdquo; almost anything from the command line. If you open an URL, your default browser opens it, if you open an image, Preview handles it. Plumbing is like \u0026ldquo;open 3.0\u0026rdquo; but it is hard to manage :/\nBelow you can see another video with a simpler scripting: browsing reddit from the command line, inside acme. The Python code snippet that gets Reddit data is available in this gist: reddi.py\n","permalink":"https://mostlymaths.net/2013/03/extensibility-programming-acme-text-editor.html/","tags":["Programming","emacs","vim","acme"],"title":"Extensibility in the Acme text editor"},{"categories":null,"contents":"\nThe links to Practical Vim are affiliate links to Amazon. Beware!\nSo\u0026hellip; last January I was in a flight to London, preparing for an intense, 12 days course on traditional shoemaking (English hand-welted shoes, improving our knowledge at The Fancy Puffin.) And my flight read was Practical Vim. Most of my readers are already aware I\u0026rsquo;m an emacs guy, so the main question is why?\nI love knowing many tools. Programming in many languages, knowing enough about any thing. I couldn\u0026rsquo;t stand all these people saying Vim was superior (even though most had never touched emacs,) and since knowledge is power, I thought a little more (for me) could not hurt (mwahahahaha!) I picked Practical Vim and started reading it a few days before leaving, and finished it during the few non-shoemaking moments of that course.\nWhen I was back to having a computer, I was torn between what I learnt about Vim and looked cool and all those things I already loved about emacs. I have MacVim a few tries, writing short pieces, writing, testing, rewriting. Clearly there was no way I could give up gnus, org-mode (even though I\u0026rsquo;m not using it that much lately) and all my complex configuration options. So\u0026hellip; how come? Even though modal editing feels weird, text objects are cool. Being able to \u0026ldquo;say\u0026rdquo; di( and get it to delete inside a pair of parentheses is way cool. Basically this is what sold me as a great feature.\nI decided to use evil-mode in emacs. Best of both worlds: I still had all my emacs tools AND text objects and some modal editing. I missed having numbered lines, although I just googled for it\u0026hellip; And there\u0026rsquo;s linum-mode (since emacs 22!!) which gives them. But I miss ex commands: being able to move any line anywhere just by issuing :source m destination is powerful. Evil-mode supports some ex commands, just not copy or move. Sigh!\nToday was the first day I added evil-mode to my .emacs file, and the day started by working in a LaTeX file. In a LaTeX file, most things are enclosed in pairs of dollars, like $x=1$. These dollar delimited expressions are what TeX parses as formulas, and they appear as neat images in your target (usually PDF) file. So, most of the things I need to change, delete or move around are enclosed by dollars. So:\n change what\u0026rsquo;s inside a pair with ci$ delete the whole formula with da$ delete just the contents of the formula with di$ copy the formula with yi$  Useful, isn\u0026rsquo;t it? Problem is, evil-mode does not have $ as a text object! Luckily it offers the tools to make new text objects\u0026hellip; Getting it to work was harder than expected, though. I was given several choices of functions I could use to create my text object. The best option seemed to be using evil-regexp-range that allows you to give a regexp for the first delimiter and another one for the second. But all tries I have done resulted in it marking the first occurrence in the buffer. No luck. After trying repeteadly with it, I gave up and used instead evil-inner-object-range, where I had to wrestle with point, mark, excursions and the like. When I managed to get it working I just decided I would not touch it again (even if I\u0026rsquo;m pretty sure the save-excursion calls are redundant, as well as most move and mark commands\u0026hellip;) It works, don\u0026rsquo;t touch it.\n`\n(defun rb-first-dollar-exclusive (\u0026amp;optional arg)\n(interactive)\n(save-excursion\n(setq rb-temp-first (re-search-backward \u0026ldquo;\\$\u0026rdquo; nil t 1))\n(message \u0026ldquo;First %s\u0026rdquo; rb-temp-first))\n(goto-char (+ 1 rb-temp-first)))\n(defun rb-second-dollar-exclusive (\u0026amp;optional arg)\n(interactive)\n(save-excursion\n(setq rb-temp-second (re-search-forward \u0026ldquo;\\$\u0026rdquo; nil t 1))\n(message \u0026ldquo;Second %s\u0026rdquo; rb-temp-second))\n(goto-char (- rb-temp-second 1)))\n(evil-define-text-object evil-inner-dollar (count \u0026amp;optional beg end type)\n(evil-inner-object-range count beg end type\n#\u0026lsquo;rb-second-dollar-exclusive\n#\u0026lsquo;rb-first-dollar-exclusive))\n(define-key evil-inner-text-objects-map \u0026ldquo;$\u0026rdquo; \u0026lsquo;evil-inner-dollar)\n(defun rb-first-dollar-inclusive (\u0026amp;optional arg)\n(interactive)\n(save-excursion\n(setq rb-temp-first (re-search-backward \u0026ldquo;\\$\u0026rdquo; nil t 2))\n(message \u0026ldquo;First %s\u0026rdquo; rb-temp-first))\n(goto-char rb-temp-first))\n(defun rb-second-dollar-inclusive (\u0026amp;optional arg)\n(interactive)\n(save-excursion\n(setq rb-temp-second (re-search-forward \u0026ldquo;\\$\u0026rdquo; nil t 1))\n(message \u0026ldquo;Second %s\u0026rdquo; rb-temp-second))\n(goto-char rb-temp-second))\n(evil-define-text-object evil-outer-dollar (count \u0026amp;optional beg end type)\n(evil-inner-object-range count beg end type\n#\u0026lsquo;rb-second-dollar-inclusive\n#\u0026lsquo;rb-first-dollar-inclusive))\n(define-key evil-outer-text-objects-map \u0026ldquo;$\u0026rdquo; \u0026lsquo;evil-outer-dollar)\n`\n(Blogger is killing indentation, damn) Enjoy, though!\nParseList(ScrambleList(Relateds(emacs)),2)\n","permalink":"https://mostlymaths.net/2013/02/creating-new-text-objects-in-evil-mode.html/","tags":["gnus","Programming","emacs","vim"],"title":"Creating New Text Objects in Evil-Mode (Vim emulation layer in emacs)"},{"categories":null,"contents":" If you want to read a quick overview of this in Spanish, check my post about GTM at DoctorMetrics.\nGoogle has just unveiled a new tool: Google Tag Manager. I have spent a few hours playing with it (both before and after official release.) And it\u0026rsquo;s awesome! Or at least, it has quite a lot of awesomeness, hidden behind a seemingly simple interface.\nIts main feature is the fact that you can get away with just a piece of included code. You don\u0026rsquo;t need to include your Analytics code on top and your DoubleClick counters in all the pages you need. There\u0026rsquo;s just one thing you can\u0026rsquo;t do: change the content of your page (via document.write)\nSo, what\u0026rsquo;s Google Tag Manager good for (exactly)? It centralizes the management of page tagging and tag execution based on rules. A simple example: you want to track how many people click on the Atom subscribe link in your Subscribe page with event tracking via Google Analytics. This is straightforward with Google Analytics, in fact: you only need to set the correct event for onclick¬†in the page source like this:\n _gaq.push([\u0026quot;_trackEvent\u0026quot;, \u0026quot;SubscribeRSS\u0026quot;, \u0026quot;Sidebar\u0026quot;]);\nBut what happens when you want to change this tracking category, or add a new tracking to another link? You have to edit all required pages in your site. If the site is well structured, this will be easy, but not all websites are well-structured. Or you are not the webmaster. This is the main point: what if you are just an external consultor? Exchanging 15 emails to get the IT staff to add this onclick can easily drive you nuts (and cost you and your employer many hours)¬†You don\u0026rsquo;t have to get nuts any more.\nAfter creating a container and adding the GTM code to your site, you just need to add the required page selector in Google Tag Manager\u0026rsquo;s rules:\n url\u0026gt; contains\u0026gt; \u0026quot;subscribe\u0026quot;\n\nAs easy as that\u0026hellip; But you also need to add the event tracker to that link. How? The simplest way I\u0026rsquo;ve come up is with some basic jQuery magic. Include jQuery (which you can do for all pages, not just subscribe!) and then set the gaq push event, by selecting the correct link via the href¬†attribute of the link. You can select based on text, or anything you fancy, of course.\n \u0026lt;script¬†\n¬†src=\u0026quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js\u0026quot; type=\u0026quot;text/javascript\u0026quot;\u0026gt;\n\u0026lt;/script\u0026gt;\n\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt;\n$('a[href$=\u0026quot;http://www.mostlymaths.net/feeds/posts/default\u0026quot;]').click(\n¬†function(event){¬†_gaq.push([\u0026quot;_trackEvent\u0026quot;, \u0026quot;SubscribeRSS\u0026quot;, \u0026quot;Atom\u0026quot;]);¬†});\n\u0026lt;/script\u0026gt;\n\nWith jQuery you can go as far as to dynamically change the link to add campaign tracking, to any link in the page:\n $('a[href$=\u0026quot;http://www.mostlymaths.net/feeds/posts/default\u0026quot;]').attr(\u0026quot;href\u0026quot;,\n¬†\u0026quot;http://www.mostlymaths.net/p/subscribe.html?utm_source=GTM\u0026amp;utm_medium=Redirect\u0026amp;utm_campaign=Testing\u0026quot;)\nThe options available are almost limitless: enjoy your new GTM goodness! And feel free to contact me for more implementation details or ideas.\n","permalink":"https://mostlymaths.net/2012/10/an-introduction-to-magic-of-google-tag.html/","tags":["Programming","Analytics","Google Tag Manager","jQuery","GTM"],"title":"An introduction to the magic of Google Tag Manager"},{"categories":null,"contents":"\nThe Octocat, Github\u0026rsquo;s logo\nIt\u0026rsquo;s been almost 6 years since I used some kind of revision control system. Back then I wasn\u0026rsquo;t sure about which I wanted to use\u0026hellip; I settled with RCS, the father of them all. RCS was structurally very simple, with text-based (human-readable) delta files. I liked that. I had all my code and TeX files under revision control, but then I started using more than one computer and it got out of hand very quickly (using RCS or CVS in Windows was quite tricky and had user and encoding problems.) Stopped using it. After a few years I tried darcs\u0026hellip; unconviced. Then I put some of my code in the cloud, in Google Code, so I got to use a little SVN. Not for version control, just for having my code online and tidy. Nothing else.\nIt was about time that I got again into source code control. For part of my work I will use mercurial, so for my side projects I will be using git, to see what else is trendy right now. Yeah, it has taken me ages to do it :D\nI put my thesis under control and committed a few revised sections. So far it works wonders with the built-in emacs vc-mode (version control mode.) I even get a neat menu to check in/out or check the commit story. I have not checked yet its interaction with github with push or pull, but I guess it will work as well. If it doesn\u0026rsquo;t, my emacs loving twitter pals¬†Rami and Anti have suggested the magit package. I\u0026rsquo;m not sure about it, because it is recommended when git is your only version control system, and I also want to use mercurial. Only time will tell, though.\nBy the way, the first real commit I did was for my work in progress with getting some acme magic into emacs. You can check it here¬†in github (which works very well so far\u0026hellip; why did it take me so long?).\nI also set a private repository in my own server to host my emacs org files and calendar. I followed the following steps at first\u0026hellip;\n mkdir targetrepo\ncd !$\ngit init\ncd ..\ngit clone \u0026ndash;bare¬†targetrepo targetrepo.git\nmv targetrepo targetrepo.backup\ngit clone targetrepo.git\n A somewhat convoluted way to (I think) just doing this, but I\u0026rsquo;m not sure:\n mkdir targetrepo.git\ngit init \u0026ndash;bare\n Now you have to connect to it in the local machine (and transfer the local files,) in the desired directory\n git remote add origin username@server/path-to/targetrepo.git\ngit push origin master\n And you\u0026rsquo;re set to go. I got it configured in my server, Macbook and\u0026hellip; iPod Touch. Now I have my emacs org-based calendar wherever I go, with (manual) syncing among machines. Reinventing the wheel FTW!\n","permalink":"https://mostlymaths.net/2012/09/using-git-and-setting-remote-git-server.html/","tags":["Programming","emacs","git","rcs","github"],"title":"Version Control: Started using git and github (and how to set-up a remote git server)"},{"categories":null,"contents":"\nGlenda, the Plan 9 bunny. Image copyrighted¬†by Lucent Technologies, hosted by Wikimedia¬†Commons and posted here for information purposes\nA few months ago I wrote about how I\u0026rsquo;m using vim in my ipad. You know, I\u0026rsquo;m an emacs guy, just started writing my own (useful) stuff to improve it. Recently I finished gnusnotes.el, a package which allows you to easily add notes to emails. Of course, before this I had already written emacs code, just that it was only for me. A step ahead.\nAnyway, back to vim. As much as I love emacs, I also love learning new things, and getting to grips with vim would improve how I edit and think about editing. So, I used it for a while, learning its basic usage. Then after a few weeks I had to edit some php, and emacs\u0026rsquo; php editing abilities are (at least until I configure multi-mode) below par. I used vim, so I got to use it more. So far, so good, its different but it also feels \u0026ldquo;right\u0026rdquo;.\nNow, a few days ago a post in Hacker News reminded me about an editor I wanted to check. For a few months I had a mental post it that read \u0026ldquo;Plan 9 from user space,\u0026rdquo; the *nix port of Plan 9 from Bell Labs\u0026rsquo;s operating system tools. I had used Plan 9 in a virtual machine many years ago (it was interesting) so I knew more or less what it was and how it worked. The post that made me remember it was A tour of the acme text editor by Russ Cox (of go-lang, among other things, fame) and as you may guess the editor was the acme text editor.\nAcme is very different from other classic text editors (though acme is from the 90s, I think it is a \u0026ldquo;classic\u0026rdquo;.) It is very mouse centric, which for an emacs and/or vim user is almost like\u0026hellip; sacrilege. But it has a few neat tricks in its sleeve that make it quite awesome. A quick example: if you type in a buffer pdflatex thisfile.tex and selet this text with the middle button, you\u0026rsquo;ll compile thisfile.tex If you type in your current file New and press the middle button on it, you will get a new buffer for a new file. And so on, and so on (give a look at the tour!) As you see, cool. But\u0026hellip; how does it compare to emacs or vim?\nI\u0026rsquo;ve been using it for a while. Far less featured than emacs or vim, without syntax highlighting, modes or beautiful indentation. Nothing. Anyway, I like it a lot. Why? Well, it feels a little like magic. Just click that and do something. I kept thinking about this feeling, this feels like magic. For me, emacs also feels like magic whereas vim does not (at least usually, sometimes it does). I kept poking \u0026ldquo;Why\u0026rdquo;? Your mileage may vary, but\u0026hellip;\nFor me, the answer is the enter key. A lot of things in emacs can be done without ever hitting the enter key (search, buffer switching, generic commands, exit or edit something in the recent file list.) On the other hand, in vim quite a few of the most basic commands require a press of enter. Saving, quitting, searching are the first I can think about. Also, the way vim works can require enter with more frequency. For me, enter is the anti-magic key, it removes the feeling of flow asking for confirmation in situations I don\u0026rsquo;t want any, just do it. Acme addresses the same workflow asking for a click (emacs and vim can work like this for file opening with dired or :e respectively.)\nI will write again about acme, because I want to bring some of its capabilities to emacs, so I need to use it more thus I\u0026rsquo;ll give you some more examples of usage as time goes by. Of course, emacs already has find-file-at-point (ffap) that opens the file at point\u0026hellip; But asks for a press of enter. No way. I wrote my own simple version of ff-at-point, that works without asking for anything. I\u0026rsquo;m already using it in LaTeX buffers to open included files. I need to extend it to any kind of file and related files, and add execute-at-point. Stay tuned, if I ever finish it I\u0026rsquo;ll post it here and in the marmalade repository.\nUpdate: you can find the work in progress in my github\nParseList(ScrambleList(Relateds(emacs, Programming)),2)\n","permalink":"https://mostlymaths.net/2012/09/editor-magic-emacs-vim-acme-and-return.html/","tags":["emacs","iPad","vim","acme"],"title":"Editor Magic: emacs, vim, acme and the return key"},{"categories":null,"contents":" _\u0026lsquo;Of course I don\u0026rsquo;t have to do this,\u0026rsquo; one middle-aged man said,¬†carefully cleaning the table with a damp cloth. He put the cloth in a¬†little pouch, sat down beside him. \u0026lsquo;But look; this table\u0026rsquo;s clean.\u0026lsquo;¬†_¬†_\u0026lsquo;Usually,\u0026rsquo; the man said. \u0026lsquo;I work on alien - no offence - alien¬†religions; Directional Emphasis In Religious Observance; that\u0026rsquo;s my¬†speciality\u0026hellip; like when temples or graves or¬†_prayers always have to¬†face in a certain direction; that sort of thing? Well, I catalogue,¬†evaluate, compare; I come up with theories and argue with colleagues,¬†here and elsewhere. But\u0026hellip; the job\u0026rsquo;s never finished; always new¬†examples, and even the old ones get reevaluated, and new people come¬†along with new ideas about what you thought was settled\u0026hellip; but,\u0026rsquo; he¬†slapped the table, \u0026lsquo;when you clean a table you clean a table. You feel¬†you\u0026rsquo;ve done something. It\u0026rsquo;s an achievement.\u0026lsquo;¬†\nThe Use of Weapons, Iain M. Banks\n Maybe you are not aware of it, but I\u0026rsquo;m a shoemaker. Together with my girlfriend we run The Fancy Puffin, a handmade shoe workshop. Go and give it a look, I\u0026rsquo;ll be here when you come back. All our designs are unique and custom made: you can ask for almost anything of us. Checked them? Good! I hope you liked some and are ready to ask for your custom made Oxfords or some fancy woman shoes.\nOne of the most striking things about good, quality shoes is how they shine. Leather (unless it\u0026rsquo;s patent leather) is not particularly shiny. That unearthly shine good shoes have in pictures and feet comes from a labor intensive work of polishing.\nThat shine (which is known as military shine, because US soldiers were supposed to invest a lot of time to have their boots shiny) is relatively straightforward to get, albeit time expensive. Of course the end result is quite striking, as you can see below with my everyday pair of Oxfords. These are the shoes I wear most often (more than 1 day of every 2.) Both shoes have been cleaned of most dust, and both had a layer of horse fat a few days ago (it\u0026rsquo;s good to grease your shoes from time to time to keep leather flexible.) One has been polished, the other has not. Can you guess which is which?\n\nI learnt to get that shine from a very interesting blog (The Shoe Snob.) As I said, it\u0026rsquo;s not hard. I didn\u0026rsquo;t completely follow the directions of the blog, which probably results in a less impressive (but faster shine.) How did I do it?\n1st step: Clean all the dust off your shoes with a shoe brush.\n2nd step: Pick some cloth (I used rags off an old t-shirt) and wrap it around your index finger. Use it to spread a thin layer of black wax based shoe polish all over your shoe. You can get the layer thinner by repeatedly passing your clothed finger around the same area: if you are very intensive you\u0026rsquo;ll get a mild shine. Don\u0026rsquo;t be so intense, but keep polishing until you feel the shine is \u0026ldquo;almost there\u0026rdquo;. There\u0026rsquo;s a bit of trial and error here: no problem in getting a little shine in some areas until you get the correct amount of removal.\n3rd step: get a small amount of water in the lid of your shoe polish (or a small plate.) This step is usually done by spitting on your shoes\u0026hellip; Water is cleaner. Get a small amount of polish, put it on the shoe and spread. Then, get the tip of your pinky wet and put a small amount of water in the just waxed area of your shoe. Quickly spread the water with your clothed finger repeatedly. It takes a while for the leather to absorb all the water. The process goes as follows:\n There\u0026rsquo;s a trail of droplets. You pass your finger on them The wax gets wet and turns a dull black. Keep passing your finger in a circular motion around the area The wax feels thicker to your finger. Keep at it, slowly passing your finger in a circular motion around the area. A shine starts. Keep at it!  4rd step: There\u0026rsquo;s no 4th step: just get the shine all over the shoe. You can repeat step 3 several times, but eventually all the poruses (porus? pori?) of the leather will be clogged with wax and it won\u0026rsquo;t accept any more.¬†5th step:¬†Actually there\u0026rsquo;s a 5th step. Get some nylon cloth (a woman tights, for example,) wrap it around your finger and pass it all over your shoe. It will get a brighter shine out of it.\nAnd voil√†! A good shine can last many days, of course it will depend on many factors (weather, type of pathways you walk, hours you keep your shoes on and some other.) But a good polished shoe is sure to attract a few looks. It has happened to me countless times!\n","permalink":"https://mostlymaths.net/2012/09/polishing-a-shoe-to-get-a-good-shine.html/","tags":["Shoemaking","The Fancy Puffin","Bizarre","Shoes"],"title":"Polishing a Shoe"},{"categories":null,"contents":"\nSensitive information blanked\nThe gnusnotes.el package, with delete and edit capabilities is now available in the marmalade package repository. This post just explains why, how and what (code at the end, too)\nLast month I switched email clients (for the 4th time in the past year.) I\u0026rsquo;ve passed through gnus, Thunderbird, mail.app and settled with Sparrow. Just 2 days before Sparrow was bought by Google I left for gnus (lucky moment!) Smaller memory footprint, no harddisk hungry indexes. Works wonders. Would only be happier with a newer Macbook. Oh well.\nI\u0026rsquo;m still unsure about going the hardcore way with offlineimap (dovecot, notmuch,) but I\u0026rsquo;m more than happy with the current setup. I can move, delete or archive emails with just a few keystrokes. But I\u0026rsquo;m not in inbox zero yet (won\u0026rsquo;t be ever, I think.) I leave some mails in my inbox when I need to follow up later (to make sure I\u0026rsquo;m on top of things.) Problem is, when you have more than 7 or 8 emails like this you start to lose touch. Furthermore, subject lines sometimes are not very descriptive \u0026ldquo;Request\u0026rdquo; is not the best subject. When more than 4 or 5 emails are of this kind, you need to check the email to know what it is about. Losing time. No way!\nAfter all, this is emacs. If you don\u0026rsquo;t like something, or want something, you write it (well, after looking for it.) My goal? Adding notes to email messages. I googled quickly for this with no luck, checked Sacha\u0026rsquo;s emacs lisp files just in case. So\u0026hellip; Time for some emacs lisping.\nYou may wonder: dude, use org-capture! This would be a good solution if I looked more often my todo list. But I only look my todo list when, well, I have to do something. Somehow stay-on-top things just distract me in my todo. I\u0026rsquo;d rather have 15 emails in my inbox than 15 more tasks in my already crowded todo list. I still use org-capture with emails, but for long-term catchups or long tasks where I have to do something in the future. When I just have to make sure someone does their work, I leave the email. Works for me, somehow. Getting back to lisp-topic\u0026hellip;\nIt\u0026rsquo;s not my first dive into emacs lisp: I\u0026rsquo;ve written some helper functions to do small things (wrote a wraper to the wonderful mark-multiple package a few weeks ago and I\u0026rsquo;m already using it to mark stuff at point,) I even wrote a major mode to simplify posting to mostlymaths.net, by adding my most usual HTML or CSS idioms with just a few keystrokes. The gnusnotes.el project was harder, though.\nFirst thing was planning how to make it work. The simplest solution: get some kind of email ID, and save it to file tied to a note. I thought for 3 minutes, no need to make it more complex than necessary. Just like a CSV file, I used comma as ID-note separator, newline as ID-note pair separator. Luckily, gnus works because it has the correct pieces. In no time I had found which function determines the current message header data, and among them, message ID (the ID used in backend operations.) Once I had that, I needed a function to find the ID in the file. It was pretty straightforward (find-file and a few search-forward commands.) Something was trickier, though\u0026hellip;\nGnus has two main windows: Groups and group summaries. For example, in Groups I have INBOX and sent-201208 as visible folders, I can check all folders (usually hidden) with L. When I open INBOX from here, I go to the INBOX summary, where all unread and marked as important emails show (and this is where my time is usually spent.) I want my notes to appear here, in the summary view. Not inside the email, not disjoint from emails. How!?\nWell, for each email a summary line is generated, according to some rules you can set. You can add any detail from the email: headers, references, from, subject, date\u0026hellip; And there is also a whole range of custom functions. Adding the flag %u you can choose from a wide range of functions (followed by any letter): In my case, %un calls gnus-user-format-function-n. This function does the lifting: checking the list of notes, for each email.\nProblem: even if my notes file is small, hitting it for each email in my inbox can be dreadful. Even worse, the hit would be for any email in any folder. What if I check some archived folder with tens of thousands of emails? Well, these considerations are important, but I just found out that opening a file-buffer for each email somehow broke something within gnus, and filled the buffer with garbage. Later rationalisation turned out these problems :D\nThe solution (at least the one I used) is to generate a list of cons (msgid . note) each time a group is opened or a note is added. This is done via hooks, tying the loader function to the group preparation hook. Perfect! What else? The function looks for the msgid in this list of notes, and returns the note if successfull (and nothing if unsuccessful.)\nTo finish, just some cosmetic tweaks: adding some prettyfying of notes via highlight-regexp tied to another hook: the word note appears in italics and with the warning face, and the note appears with the default face. I\u0026rsquo;m not sure how it will look in vanilla emacs, but with solarized-dark I enjoy the colors. Completely tweakable, though.\nBy the way, my custom summary line is:\n(setq-default gnus-summary-line-format \u0026quot;%U%R%z %(%\u0026amp;user-date; %-15,15f %B%s%) %un\\\\n\u0026quot; gnus-user-date-format-alist '((t . \u0026quot;%Y-%m-%d (%a) %H:%M\u0026quot;) gnus-thread-sort-functions '(gnus-thread-sort-by-date) ) )  This is not yet a neat package with customizable options (yet). There\u0026rsquo;s even no way to remove or edit notes (except by editing the notes file) since making this work appeared harder than editing this file by hand for the time being\u0026hellip; But I may do it some day or another, it\u0026rsquo;s not rocket science. Just needs some refactoring of the note-finder. Source code below, with many messages commented for dirty debugging. Enjoy!\n;;; gnusnotes.el --- ;; Copyright (C) 2012 Ruben Berenguel \u0026lt;[ruben@dreamattic.com](mailto:ruben@dreamattic.com)\\\u0026gt; ;; Author: Ruben Berenguel \u0026lt;[ruben@dreamattic.com](mailto:ruben@dreamattic.com)\\\u0026gt; ;; Keywords: comm, mail ;; This program is free software; you can redistribute it and/or ;; modify it under the terms of the GNU General Public License ;; as published by the Free Software Foundation; either version 3 ;; of the License, or (at your option) any later version. ;; This program is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details. ;; You should have received a copy of the GNU General Public License ;; along with this program. If not, see \u0026lt;[http://www.gnu.org/licenses/](http://www.gnu.org/licenses/)\\\u0026gt;. ;;; Commentary: ;; Still in beta. Use it at your own risk. Customize the note file ;; location and to install ;; (require 'gnusnotes) ;; Only tested in emacs 24.1.1 with NoGnus 0.18 ;;; Code: (provide 'gnusnotes) ;;; gnusnotes.el ends here (defun gnus-user-format-function-n (data) (or (rberenguel/get-gnus-notes (aref data 0)) \u0026quot;\u0026quot;) ) (setq gnus-summary-notes \u0026quot;NOTE:\u0026quot;) (defun rberenguel/gnus-summary-notes-hl () (interactive) (hi-lock-mode -1) (hi-lock-mode 1) ;(message \u0026quot;Highlighting %s\u0026quot; gnus-summary-notes) (highlight-regexp gnus-summary-notes 'warning) (highlight-regexp gnus-summary-notes 'italic) (highlight-regexp (concat gnus-summary-notes \u0026quot;\\\\.\\\\\\*\u0026quot;) 'default) ) (setq gnus-summary-prepare-hook 'rberenguel/gnus-summary-notes-hl) (setq gnus-summary-hook 'rberenguel/gnus-summary-notes-hl) ;(add-hook 'gnus-summary-generate-hook 'rberenguel/gnus-summary-notes-hl) (setq rberenguel/gnus-notes-file \u0026quot;~/.gnusnotes\u0026quot;) (setq gnus-select-group-hook '(lambda () ;; First of all, sort by date. (setq rberenguel/gnus-notes-list (rberenguel/load-gnus-notes)))) (defun rberenguel/load-gnus-notes () (interactive) (set-buffer (find-file rberenguel/gnus-notes-file)) (goto-char 1) (setq moreLines t) (setq rberenguel/gnus-notes-list ()) (while moreLines (beginning-of-line) (setq p1 (point)) (if (search-forward \u0026quot;,\u0026quot; nil t) (progn (setq p2 (\\- (point) 1)) (setq msgid (buffer-substring-no-properties p1 p2)) ;(message \u0026quot;%s\u0026quot; msgid) (end-of-line) (setq p1 (point)) (setq note (buffer-substring-no-properties (\\+ 1 p2) p1)) ;(message \u0026quot;%s\u0026quot; note) (setq rberenguel/gnus-notes-list (append rberenguel/gnus-notes-list (list (cons msgid note)))) ;(message \u0026quot;%s\u0026quot; rberenguel/gnus-notes-list) ) ) (setq moreLines (\\= 0 (forward-line 1))) ) (kill-buffer) rberenguel/gnus-notes-list ) (defun rberenguel/get-gnus-notes (msgid) ;(message \u0026quot;Get notes: %s\u0026quot; msgid) (setq gnus-note \u0026quot;\u0026quot;) (unless (null rberenguel/gnus-notes-list) (dolist (item rberenguel/gnus-notes-list) ;(message \u0026quot;%s %s %s\u0026quot; item (car item) (cdr item)) (if (equal (car item) (format \u0026quot;%s\u0026quot; msgid)) (progn (setq gnus-note (format \u0026quot;\\\\t NOTE: %s\u0026quot; (cdr item))) (return)) )) gnus-note )) (defun rberenguel/gnus-notes () (interactive) ;(message \u0026quot;%s\u0026quot; (car (gnus-summary-work-articles 1))) (setq rberenguel/gnus-notes-msgid (car (gnus-summary-work-articles 1))) (setq rberenguel/got-message (rberenguel/get-gnus-notes rberenguel/gnus-notes-msgid)) ;(message \u0026quot;Got Message? %s\u0026quot; rberenguel/got-message) (if (or (equal rberenguel/got-message nil) (equal rberenguel/got-message \u0026quot;\u0026quot;)) (progn (set-buffer (find-file-noselect rberenguel/gnus-notes-file)) (setq gnus-new-note (read-from-minibuffer \u0026quot;Enter Note: \u0026quot;)) (end-of-buffer) (newline-and-indent) (insert (concat (format \u0026quot;%s\u0026quot; rberenguel/gnus-notes-msgid) \u0026quot;,\u0026quot; gnus-new-note)) (save-buffer) (kill-buffer) (rberenguel/load-gnus-notes) (gnus-summary-prepare) ;(gnus-summary-rescan-group) )))  ","permalink":"https://mostlymaths.net/2012/08/adding-notes-to-emails-in-gnus-in.html/","tags":["gnus","Programming","emacs","LISP"],"title":"Adding Notes to Emails in Gnus (in Summary View)"},{"categories":null,"contents":"\nFrom Flickr\nNo, this is not a tutorial (but I do have written the standard steps to learn below). I began learning to juggle very recently. I just want to answer a possible \u0026ldquo;why\u0026rdquo;?\nI\u0026rsquo;ve always been fascinated by juggling, and every time I wanted to eat more than 2 small oranges I\u0026rsquo;d try my hand at juggling them. Always followed by bowing and picking them from the ground, of course.\nA few weeks ago I was in Dublin for a few days, and in a bookstore I saw a pack of juggling balls (3 balls) and promptly bought them. With them, a small leaflet explained the method, and as soon as I was back home I tried to learn the trick. I\u0026rsquo;ll give you a quick overview:\n Even if I know it sounds lame, start with one ball, from hand to hand. You have to get a knack for the height and arch. The throw is not up, but up and to the direction of your other hand. Every time you throw, think \u0026ldquo;throw\u0026rdquo;. When you are confortable with one-handed throws, pick a ball in each hand. Throw your first as before, and as soon as the ball reaches its maximum height, throw your other ball as before (and think \u0026ldquo;throw\u0026rdquo; as we did before). Repeat this an awful lot. Get the hang for the timing, height and getting used to thinking \u0026ldquo;throw\u0026rdquo;. After a while, you will want to throw three balls. Okay. Start with 2 balls in your weak hand (left if you are right handed and right if you are left handed)). Start by throwing one from the left and then one from the right just you did in the previous step. Now, when the first ball lands in your right hand, your second ball should be in the topmost position. Now is the moment to throw the next ball! Don\u0026rsquo;t worry if it falls. Get used to throwing it. Thinking (or saying aloud Rinse and repeat\u0026hellip; And then get to throw your fourth ball from the right hand. Then your fifth\u0026hellip;   But what\u0026rsquo;s the point? Of course, it\u0026rsquo;s fun to watch, and maybe it is fun to do for a while. But, in the long term?\nI can\u0026rsquo;t be sure, I\u0026rsquo;m just a data point and I\u0026rsquo;ve been in it for just shy of 3 weeks (on and off, since in July I\u0026rsquo;m doing quite a lot of The Fancy Puffin work and it cuts my \u0026ldquo;fun\u0026rdquo; time.) But this is what I found.\nFirst thing I noticed, juggling clears my mind pretty effectively. It is not as good as a good meditation session, but while you are juggling (or at least, in the beginning) you can\u0026rsquo;t think of much else. I practised for a few minutes each night\nAfter a few days I noticed something else. My back felt straighter, and I had less back and shoulder pain. When you are juggling you have to keep your back very straight, stand up and move your arms. Something most programmers and people working with computers don\u0026rsquo;t.\nI don\u0026rsquo;t know if both these secondary effects will last long. But I thought some other fellow geeks would be interested.\n","permalink":"https://mostlymaths.net/2012/07/juggling-for-programmers-and-other.html/","tags":["geek","Programming","Bizarre"],"title":"(Why) Juggling for Programmers (and other computer people)"},{"categories":null,"contents":"\nFrom\nThe Design of the Emacs Logo\nI\u0026rsquo;ve been thinking about getting a new Macbook lately (my heart and wallet were divided among a 11\u0026rdquo; Air or a 15\u0026rdquo; Retina Pro). My 4-year old Macbook (Early 2008 I think, 2 GB Ram, Intel Core Duo 2.4 GHz) was showing its age. Mainly when I had the RAM and cache hungry inhabitants of my dock active: Yorufukurou (the best twitter client for managing multiple accounts in a Mac I\u0026rsquo;ve seen) and Sparrow (mail client).\nWhy was I using Sparrow? Back when I started my current job, I was using gnus in emacs, after the quite successful 30 days in emacs challenge I did in the beginning of that year. But for some reason I can\u0026rsquo;t remember I moved from gnus to Thunderbird, which I could use both in my Mac and my netbook (I have the vague feeling that gnus had some problems in my netbook). I kept using Thunderbird for a long while until I found Sparrow. What did I find so appealing about Sparrow? Keyboard shortcuts. Yeah, I want to archive, move and delete mails quickly without moving my mouse. Sparrow had that (Apple Mail and Thunderbird do not.) What baffles me is why I didn\u0026rsquo;t try gnus again. Anyway.\nI was so happy, pressing keys and moving emails around. But my Mac was increasingly sluggish: if I had Chrome with more than a handful of tabs, Sparrow and Yorufukurou I could get the spinning beachball of death after doing anything. So you can imagine what PITA was starting MAMP or running a Django test server (for my What Language Is project, among others). The purge command only helped a little, closing Chrome, Adium and others did almost nothing. Rebooting helped some more, but wasn\u0026rsquo;t a decent solution. What was the problem?\nPaging. And caching. In the last months I\u0026rsquo;ve been living with around 3-4 GB of free space. It should be plenty for system paging in the disk cache. The problem is that it was not plenty for Sparrow\u0026rsquo;s mail cache. I found this out when, after a reboot my hard disk showed almost 3 more free GB. It could not be Chrome\u0026rsquo;s cache, since I had cleared it very recently. It could not be my Mac\u0026rsquo;s cache, since last time I checked before rebooting I had less than 1 GB paged and had some (little) free memory still. I opened Sparrow and then checked its caches in the Library folder. amounted to more than 1.5 GB, just after booting. Damn.\nJust by coincidence around this time I read a post by Sacha Chua, talking with John Wiegley (emacs lisp developer) and thought: maybe it\u0026rsquo;s time to give gnus another try. I thought I\u0026rsquo;d need some heavy configuration tweaking or whatever before getting to grips with it. I thought I had a reason for giving up gnus. Just in case aliases or multiple accounts were a problem before, I disabled gmail and only left my work account (I\u0026rsquo;d use gmail in the web interface for personal emails) before starting gnus again. My password was wrong, I changed it. I set up multiple mail aliases for my work account: tweaked the borrowed function I was using to select an SMTP account to switch to my main account in case of unknown account (since I have more than 20 aliases over it and configuring all them was overkill.)\nUsed gnus again for a while. My Mac was floating around without paging. The fan didn\u0026rsquo;t spin. No hard drive sounds. Quick keyboard shortcuts I almost know by heart by now. Gnus, here I am again.\nParseList(ScrambleList(Relateds(emacs)),2)\n","permalink":"https://mostlymaths.net/2012/07/back-to-gnus-emacs-mail-reader.html/","tags":["gnus","emacs","Mac"],"title":"Back to gnus (emacs mail reader)"},{"categories":null,"contents":"Last week I wrote about whatlanguageis.com, my first simple try at creating a Django powered site. How did it came to be?\nIn the last few months have been writing and thinking about several ideas to process social data with Python, undoubtedly motivated by the great book Mining the Social Web. In the back of my mind, I wanted my code to work as a web application (either for me or for others,) and thought that I should comply with everyone else, learn PHP and try to make Python and PHP be friends. Of course, this is like getting a Eskimo to talk to a Polynesian. It may work, but needs a lot of set-up from both sides.\n\nThis suggests the next question: why me, PHP? Well, where I work the de facto language for web development is PHP. I\u0026rsquo;m not a developer there, I just do the data analytics and whatever else that needs to be done using the tools I need and just report back. I thought that PHP-ing would help me get it in the workflow. But, even if my mother programming language may be C (although my first words were in GW-Basic,) my languages of choice are Python and Lisp (and I have a great fondness for Forth.) I guess you realise how ugly I feel PHP is.\nOn 29th May I decided enough was enough: if it is something that should almost work as a black box, to automate the part I was already doing with Python code and R data churning, why bother? Just make it work. I started reading the free, online Django Book, and I was hooked (you can buy a printed copy in Amazon). It is an awesomely readable book. I had just finished reading Zed Shaw\u0026rsquo;s Learn Python the Hard Way to find things I may not know yet (for example, unit testing\u0026hellip; silly me) and Django felt just like an extension of what I usually write and what I had read. Views, urls, models, all have this Python feeling. For me, of course, I\u0026rsquo;m not a seasoned Python developer at all. I don\u0026rsquo;t even consider myself as seasoned in any programming language, I just know I can write code as I need. But no expert.\nI read the first 2 chapters very quickly, and on Wednesday 30 I started testing how Django worked, basic view-url combinations and a test on templating. Just the hello world tests, so to say. I set aside the book while I was thinking what would made a good initial project.\nRelated to my social media endavours I had a tickling question: How do I decide if a twitter user data is valid or not? I.e. if I want to do some kind of language analysis, I need to know the user \u0026rsquo;s language. I had a simple idea around that week (I think it was Monday 28,) but didn\u0026rsquo;t get to code it until the 4th of June (Monday): you can read about it in Language detection in Python with NLTK and Stopwords.\nOn Tuesday 5, after work I created the Django project whatlanguageis in my computer, and read the chapter on Forms. Created a very basic stripped HTML (I think I didn\u0026rsquo;t even add a head section\u0026hellip;) page where I could enter some text and get a language as a reply from the Django test server. Yay! It was very easy to do: Django does a lot of heavy lifting and this was straightforward to code.\n\nThen on Wednesday 6 I took the day slightly off (only answering to urgent emails and sales enquiries) and wrote the whole site¬†whatlanguageis.com, which involved:\n Reading the chapter on Models to add a little database of affiliate books, checking how it works Reading the chapter on the Admin interface to add some books easily, checking it Reading the chapter on Deployment\u0026hellip; \u0026hellip; which involved a lot of VirtualHost tinkering with my httpd.conf file Purchasing a domain and setting up the DNS records Designing the page (this was the quickest part, Twitter Bootstrap to the rescue)  My initial plan for Wednesday was not of doing everything and not working. My original plan was just to hook the database and check I could read and write the data as expected, forcing me to read the Models chapter. But as soon as I had finished this hooking and checking, the site was almost ready, needing only a neat dressing. Some twitter bootstrap and css-arrows later, the site was working wonderfully in my local machine. Getting it to work in my remote machine was trickier, due to the setup of static files in Django. It\u0026rsquo;s not hard, it is just that it is tricky to find where it fails when it does. In any case, I got it working.\nOf course, as I have said a lot of times, whatlanguageis.com¬†currently is just a proof of concept of two things: language detection and setting up a Django site. Both worked very well, but now I have to sit down and refactor the whole of it.¬†\nThe site works well as it is (no need of much refactoring except for the needed changes in views), but the language detector needs a proper module, unit tests and a huge revamping. Among others, my future plans for whatlanguageis.com include:\n Adding a lot of languages. More or less I will reuse the ideas from an old post:¬†The 100 most common words in Icelandic, automatically generated from Wikipedia Add the ability to also detect programming languages (or at least, the most common) Probably add the ability to detect language families (i.e. when unsure, classify as Scandinavian, or classify as Lisp-like) Improve the results: Unless the analyzer is completely sure I want to know what it could be (i.e. for very close languages like Norwegian Bokm√•l and Danish detection is hard, thanks to @qimarc for this specific and useful example) Add checks for word diversity in the received text Unit-test all the things!   \nI hope you enjoyed whatlanguageis.com tale and liked the memes lying around. Somehow I felt this post needed them. Thanks to memegenerator.net for the ability to create them :)\nParseList(ScrambleList(Relateds(programming, languages)),2)\n","permalink":"https://mostlymaths.net/2012/06/timeline-of-whatlanguageiscom-first.html/","tags":["Programming","Python","Languages","Django"],"title":"Timeline of whatlanguageis.com: first Django project"},{"categories":null,"contents":"Lately I\u0026rsquo;ve been coding a little more Python than usual, some twitter API stuff, some data crunching code. The other day I was thinking how I could detect the language a twitter user was writing in. Of course, I\u0026rsquo;m sure there is a library out there that does it‚Ä¶ But the NLTK library (the Natural Language Toolkit for Python) does not have any function for this, or at least I was not able to find it after 5 minutes of Google search. So‚Ä¶\n 2019: Note that this link no longer works\n  I had a simple enough idea to determine it, though. NLTK comes equipped with several stopword lists. A stopword is a frequent word in a language, adding no significative information (\u0026ldquo;the\u0026rdquo; in English is the prime example. My idea: pick the text, find most common words and compare with stopwords. The language with the most stopwords \u0026ldquo;wins\u0026rdquo;.\nImplementing it was just a matter of a few minutes and around 45 lines.\nNote from the future: 2019 Ruben is ashamed of this code, as expected üòÑ\nfrom nltk.corpus import stopwords # These are the available languages with stopwords from NLTK NLTKlanguages=[\u0026#34;dutch\u0026#34;,\u0026#34;finnish\u0026#34;,\u0026#34;german\u0026#34;,\u0026#34;italian\u0026#34;, \u0026#34;portuguese\u0026#34;,\u0026#34;spanish\u0026#34;,\u0026#34;turkish\u0026#34;,\u0026#34;danish\u0026#34;,\u0026#34;english\u0026#34;, \u0026#34;french\u0026#34;,\u0026#34;hungarian\u0026#34;,\u0026#34;norwegian\u0026#34;,\u0026#34;russian\u0026#34;,\u0026#34;swedish\u0026#34;] # Just in case I add optional stopword lists FREElanguages=[\u0026#34;\u0026#34;] languages=NLTKlanguages+FREElanguages # Fill the dictionary of languages, to avoid unnecessary function calls for lang in NLTKlanguages: dictiolist[lang]=stopwords.words(lang) def scoreFunction(wholetext): \u0026#34;\u0026#34;\u0026#34;Get text, find most common words and compare with known stopwords. Return dictionary of values\u0026#34;\u0026#34;\u0026#34; # C makes me program like this: create always empty stuff just in case dictiolist={} scorelist={} # Split all the text in tokens and convert to lowercase. In a # decent version of this, I\u0026#39;d also clean the unicode tokens=nltk.tokenize.word_tokenize(wholetext) tokens=[t.lower() for t in tokens] # Determine the frequency distribution of words, looking for the # most common words freq_dist=nltk.FreqDist(tokens) # This is the only interesting piece, and not by much. Pick a # language, and check if each of the 20 most common words is in # the language stopwords. If it\u0026#39;s there, add 1 to this language # for each word matched. So the maximal score is 20. Why 20? No # specific reason, looks like a good number of words. for lang in languages: scorelist[lang]=0 for word in freq_dist.keys()[0:20]: if word in dictiolist[lang]: scorelist[lang]+=1 return scorelist def whichLanguage(scorelist): \u0026#34;\u0026#34;\u0026#34;This function just returns the language name, from a given \u0026#34;scorelist\u0026#34; dictionary as defined above.\u0026#34;\u0026#34;\u0026#34; maximum=0 for item in scorelist: value=scorelist[item] if maximum\u0026lt;value: maximum=value lang=item return lang Well, does it work? Quite! I tested it with some Wikipedia text:\nscoreFunction(\u0026#34;e Operationen in der Karibik, ohne dass es dabei zu gr√∂√üeren See¬≠schlachten gekommen w√§re. In Europa war die erfolglose Belagerung des britischen St√ºtz¬≠punktes Gibraltar die einzige nennens¬≠werte Auseinander¬≠setzung. Der englisch-¬≠spanische Konflikt endete formell am 9. November 1729 mit dem Abschluss des Vertrages von Sevilla und der Wieder¬≠herstellung des Status quo ante. Die grunds√§tzlichen Differenzen beider Staaten wurden jedoch nicht beseitigt, was kaum zehn Jahre sp√§ter zum Ausbruch eines weiteren Krieges f√ºhrte\u0026#34;) \u0026gt; {\u0026#39;swedish\u0026#39;: 0, \u0026#39;portuguese\u0026#39;: 0, \u0026#39;english\u0026#39;: 2, \u0026#39;hungarian\u0026#39;: 0, \u0026#39;finnish\u0026#39;: 0, \u0026#39;turkish\u0026#39;: 0, **\u0026#39;german\u0026#39;: 5**, \u0026#39;dutch\u0026#39;: 3, \u0026#39;french\u0026#39;: 1, \u0026#39;norwegian\u0026#39;: 1, \u0026#39;catalan\u0026#39;: 0, \u0026#39;spanish\u0026#39;: 0, \u0026#39;russian\u0026#39;: 0, \u0026#39;danish\u0026#39;: 1, \u0026#39;italian\u0026#39;: 1} scoreFunction(\u0026#34;Man vet forholdsvis lite om Merkur; bakkebaserte teleskop viser kun en opplyst halvm√•ne med begrensede detaljer. Mye av informasjonen om planeten ble samlet av Mariner 10 (1974‚Äì76) som kartla rundt 45 % av overflaten.\u0026#34;) \u0026gt; {\u0026#39;swedish\u0026#39;: 3, \u0026#39;portuguese\u0026#39;: 0, \u0026#39;english\u0026#39;: 0, \u0026#39;hungarian\u0026#39;: 0, \u0026#39;finnish\u0026#39;: 1, \u0026#39;turkish\u0026#39;: 1, \u0026#39;german\u0026#39;: 0, \u0026#39;dutch\u0026#39;: 2, \u0026#39;french\u0026#39;: 1, **\u0026#39;norwegian\u0026#39;: 4**, \u0026#39;catalan\u0026#39;: 1, \u0026#39;spanish\u0026#39;: 1, \u0026#39;russian\u0026#39;: 0, \u0026#39;danish\u0026#39;: 2, \u0026#39;italian\u0026#39;: 0} scoreFunction(\u0026#34;A transit of Venus across the Sun takes place when the planet Venus passes directly between the Sun and Earth, becoming visible against the solar disk. During a transit, Venus can be seen from Earth as a small black disk moving slowly across the face of the Sun\u0026#34;) \u0026gt; {\u0026#39;swedish\u0026#39;: 0, \u0026#39;portuguese\u0026#39;: 2, **\u0026#39;english\u0026#39;: 9**, \u0026#39;hungarian\u0026#39;: 2, \u0026#39;finnish\u0026#39;: 0, \u0026#39;turkish\u0026#39;: 0, \u0026#39;german\u0026#39;: 0, \u0026#39;dutch\u0026#39;: 1, \u0026#39;french\u0026#39;: 1, \u0026#39;norwegian\u0026#39;: 0, \u0026#39;catalan\u0026#39;: 1, \u0026#39;spanish\u0026#39;: 1, \u0026#39;russian\u0026#39;: 0, \u0026#39;danish\u0026#39;: 0, \u0026#39;italian\u0026#39;: 1} But it breaks with non-ascii text (like accents, umlauts and other funny letters,) so it is quite un-useful in these cases. But oh well, for 10 minutes of coding it\u0026rsquo;s not that bad, a quick hack.\nSince last week I had started to read the django book, I thought this would make for an interesting first project to post online, and you can find it at whatlanguageis.com, with some unicode improvements. It\u0026rsquo;s still in early beta, working with just a handful of languages and without any kind of text-length checker. Just a proof of concept about my django \u0026ldquo;skills.\u0026rdquo;\n","permalink":"https://mostlymaths.net/2012/06/language-detection-in-python-with-nltk.html/","tags":["Programming","Thoughts","Python","NLP","Django"],"title":"Language Detection in Python with NLTK Stopwords"},{"categories":null,"contents":"Beware, in what follows I rant. All figures come from Wikipedia or similar and are expressed with many zeroes and also in written form to make clear what a billion may be.\nIf you are a regular reader of mostlymaths.net, you\u0026rsquo;ll be aware that I don\u0026rsquo;t write a lot about current subjects. In fact, I actively try not to write about what\u0026rsquo;s going on at the moment, one notable exception may be a post I wrote about Mesut √ñzil\u0026rsquo;s stellar debut in the 2010 World Cup. As a curious example, last week we (Laia and me) had a wonderful dinner with Michael and her girlfriend. He\u0026rsquo;s been a week on holiday here in Barcelona and we found time for a tasty Indonesian dinner. He talked me about a mining strike in Asturias (in the Northern area in Spain,) and I was completely unaware of it. My usual news sources are Reddit, HackerNews and my tweeps. And almost none are Spanish.\nBut now, I just feel compelled to write about the state of Spain and Catalonia as a byproduct. I am pretty sure out there I could find a decent politician\u0026hellip; Given an infinite set of politicians and the axiom of choice. But I don\u0026rsquo;t like doing NP-hard problems by hand anyway, and I\u0026rsquo;ve thought for a long, long while that someday _politician_¬†will be an insult. And _banker_¬†could (as well) be another, at least referring to the heads of the bank.\nWhat made me break my standard silence? This article. It\u0026rsquo;s in Spanish, but I can give you a rough summary (or read it via Google Translate)\n A municipality in C√°ceres (center-west of Spain) formed by 3 towns had 15,000‚Ç¨ prepared for summer festivities\u0026hellip; Money destined to bull fighting. The major of the district had a better idea: use these 15.000‚Ç¨ to hire (temporarily) some workers, alleviating the area unemployment. The result?\n Town A: 242-181 for unemployment (40% of citizens voted)\n Town B: 47-126 for bull fighting (27%¬†of citizens voted)\n Town C: 19-76 for bull fighting (27.6%¬†of citizens voted)\n  The paper interviewed some people. The opinion of a citizen of town A is that \u0026ldquo;festivities are two days and invoices are due all year long\u0026rdquo;. The opinion of 3 17-year old girls (town unnamed) is that \u0026ldquo;they are too young to work and they enjoy a lot the acts\u0026rdquo;.\n As the title says, it\u0026rsquo;s not only this country\u0026rsquo;s politicians. There\u0026rsquo;s a very deep problem here, it\u0026rsquo;s not only that a lot of people don\u0026rsquo;t care about what happens to others. In some sense, I\u0026rsquo;m also guilty of this. It\u0026rsquo;s more like people don\u0026rsquo;t realise what is going on. \u0026ldquo;Fiesta!\u0026rdquo; They think money grows on trees (or on printers,) in fact, a former minister (from the supposedly left-winged party, now in opposition) said\n We administer public money, and public money is nobody\u0026rsquo;s money.\n Yes, this is the idea coming from someone \u0026ldquo;we\u0026rdquo; elected. This is the stupid idea running amok in my country\u0026rsquo;s society: public money comes from nowhere. Somehow I feel it all started 30 years ago with the beginning of our democracy, when to soften Catalonia\u0026rsquo;s and Basque Country\u0026rsquo;s special consideration someone invented the \u0026ldquo;caf√© para todos\u0026rdquo; (coffee for all.) What this meant is doing the same in all regions. Barcelona has an airport? Why can\u0026rsquo;t Castell√≥ have an airport, too (and all other regional capitals, even if they have less than 150,000 inhabitants)? High speed train from Madrid to Barcelona? Let\u0026rsquo;s get it going to Cuenca, again.\nWhen the plan started it wasn\u0026rsquo;t as stupid as it is now. Maybe because politicians knew where money was coming from? Who knows. But now the only thing we have is majors and regional presidents building unnecessary infrastructures, after all, who pays the bills? Someone else. Who? Not the Doctor.\nAnd this is the state of affairs. Regions have no money, some less than others. Valencia is completely bankrupt, but they don\u0026rsquo;t care at all. In Catalonia, we are too, and still the central government asks for more cuts. Public employees (who are mostly tenured in all Spain) got a 10% cut (average over all incomes) in Catalonia, but not everywhere else: a general strike of public employees could stop the country. Instead, health and education budgets got a huge cut, while all savings from them go to saving bankrupt banks. The last case, Bankia\u0026hellip;¬†The Bankia case deserves a special post, and there are plenty. For the uninitiated, it was the merge of 7 smaller banks, all of them bankrupt. It should be clear to any lay person that a lot of companies with a lot of debt, joined, result in a big company with a very big debt. Go figure. It was created with money from other banks and government money, trying to clean the worse assets in these 7 magnificent. And who was in charge of Bankia? Rodrigo Rato, former economy minister with the same right-winged party that is now in charge of things in Spain. This same RR stepped down on May 7th, after getting a salary cut from several millions to \u0026ldquo;only\u0026rdquo; 600,000 ‚Ç¨/year. It\u0026rsquo;s clear I choose (and probably, you too) a bad career: when I do a lousy job, I don\u0026rsquo;t get money. Clearly the guy did a bad job: he refused a merger with \u0026ldquo;La Caixa\u0026rdquo; (the largest Catalan bank) to keep Bankia (mainly a Madrid-controlled bank) from becoming mostly Catalan. This is my \u0026ldquo;country.\u0026rdquo; Oh, forgot to add this: Bankia had 309,000,000‚Ç¨ of profit in 2011. Turns out, once this was revised, before taxes they had already lost 4,300,000,000 (that\u0026rsquo;s 4.3 thousand million) euro. I\u0026rsquo;m guilty of messing with my calculations and forecasts. But before doing anything with a result, I double (or triple) check. And from my calculations don\u0026rsquo;t depend the money of a lot of people.\nNow the state has to give Bankia around 25,000,000,000 (that\u0026rsquo;s 25 thousand million) euro to keep it from bailing out. For a lay person, this amount of money is just staggering. Here in Europe we are used to big transfer fees in sports, but they are \u0026ldquo;just\u0026rdquo; of the order of 100,000,000 euro (hundred million). So, let\u0026rsquo;s see what 25 thousand million are for Spain\n The GDP (nominal) of Spain is 1,400,000,000,000 (that\u0026rsquo;s 1.4 million millions) euro. So Bankia\u0026rsquo;s bailout is equivalent to 1/56th of the total GDP.¬† Spanish government revenue is 515,000,000,000 (that\u0026rsquo;s 515 thousand millions) euro. Bankia\u0026rsquo;s bailout is ~ 1/20th of the total revenue. BUT Spanish government expenses (as of 2010) were already 616,000,000,000 (yes, 616 thousand millions.) NASA\u0026rsquo;s budget is 14,250,000,000 (14.25 thousand millions) euro. Almost half of it.¬†  Okay, in short, it is a f**cking lot of money. Money that our country does not have, that Europe can\u0026rsquo;t lend.¬†What happens when the whole Spanish government bails out? Who knows? Most likely the Euro as a whole breaks\u0026hellip; Unless Germany let\u0026rsquo;s the ECB start printing euro bills like crazy.\nThis is the rant. Not only politicians are stupid, our own countrypeople are stupid. And there\u0026rsquo;s nothing rational people can do about it.\nDamn, how I\u0026rsquo;d love to be able to live in Iceland. At least the ratio of shouting-reforming people there is higher.\nFurther reading (via Google Translate):\n High speed trains, airports and cable cars (there\u0026rsquo;s a Google Translate selector on the right, under \u0026ldquo;Traductor de la p√°gina\u0026rdquo; Bail Out The People (check the Rodrio Rato box)  ","permalink":"https://mostlymaths.net/2012/06/its-not-only-politicians-this-country.html/","tags":["Thoughts","Iceland"],"title":"It's Not Only the Politicians: This country is completely fucked up"},{"categories":null,"contents":" \nCortes√≠a de¬†Shanidar\nPuedes leer la versi√≥n inglesa de este post aqu√≠: Learn to remember everything: the memory palace method\nEn este post os voy a ense√±ar c√≥mo recordar a la perfecci√≥n una lista. No importa la longitud de la lista: puede ser tu lista de la compra de 10 art√≠culos, o una lista con 50, 100 o incluso 1000 cosas. Y en un pr√≥ximo post, c√≥mo aplicar este m√©todo para aprender idiomas. Suena bien, verdad?\nLa t√©cnica que vamos a aprender se llama el palacio de la memoria,¬†tambi√©n¬†conocido en ingl√©s como \u0026ldquo;method of loci\u0026rdquo; (por la palabra latina locus, que quiere decir lugar,) aunque en ingles lo m√°s habitual es memory palace o mind palace. Este m√©todo es una herramienta fant√°stica de la que disponer!\nEl palacio de la memoria El m√©todo del palacio de la memoria tiene sus¬†origines¬†en el siglo 5¬∫ A.C., cuando Simonides de Ceos, poeta, atend√≠a un (poco afortunado) banquete en Tesalia. Mientras iba a la puerta a atender a un correo que preguntaba por √©l, el techo del comedor se derrumb√≥, matando a todos los comensales. No hab√≠a manera de reconocer los cad√°veres (aplastados por un techo\u0026hellip;,) las t√©cnicas de CSI no estaban tan avanzadas como en la tele. Pero Simonides se dio cuenta que no ten√≠a ning√∫n problema en recordar quien estaba d√≥nde, sin pr√°cticamente ning√∫n esfuerzo.\nPi√©nsalo por un momento: es f√°cil recordar quien se sienta al lado del anfitri√≥n, d√≥nde estaban tus amigos, quien estaba a su lado. Y as√≠, llenas una cena. A Simonides \u0026ldquo;se le encendi√≥ la bombilla,\u0026rdquo; y gracias a esto est√° considerado como el inventor del m√©todo del palacio de la memoria. Aunque usado ampliamente en la antig√ºedad, no hay pr√°cticamente registros escritos del m√©todo: aparece en la obra an√≥nima _Rhetorica ad Herrenium_ y en la obra de Cicer√≥n _De Oratore_. Pero no es extra√±o que no haya registro escrito, para ellos ser√≠a tan normal escribir un libro sobre el palacio de la memoria como para nosotros escribir un libro sobre c√≥mo ponerse unos pantalones. Todo el mundo saber hacerlo.\nEl palacio de la memoria es un m√©todo cercano a c√≥mo nuestro cerebro funciona. En nuestros d√≠as de n√≥madas cazadores-recolectores necesit√°bamos saber c√≥mo llegar a alg√∫n sitio (lago, llanura) y recordar qu√© hab√≠a ah√≠ (agua fresca, fruta, caza). Aprovechando este hecho podemos construir una gran cantidad de m√©todos de memorizaci√≥n, para listas ordenadas o desordenadas.\nRecordar listas puede sonar est√∫pido, quien quiere memorizar una lista? Pero en el fondo, una lista es un conjunto de conocimientos ordenados! Lo que estudias para un examen de historia es una lista de fechas (ordenada) conectada con hechos (que son sub-listas de la lista principal). Cuando aprendes una nueva receta, es una lista. Un n√∫mero de tel√©fono es una lista de n√∫meros. Un poema es una lista de frases.\nTu primer palacio de la memoria: construcci√≥n y llenado \nDe¬†Will Sculin@Flickr\nEmpecemos a crear nuestro primer palacio de la memoria. El hecho que se le llame palacio no tiene que hacernos pensar en Sissy o pel√≠culas de Walt Disney, no tiene porqu√© ser un palacio. De hecho, para empezar, podr√≠as usar tu casa, y como ejemplo imaginaremos una casa muy peque√±a. Entrando por la puerta llegamos a un peque√±o recibidor, que nos lleva a un comedor con 3 puertas. Del comedor podemos llegar a la cocina, al WC y a la habitaci√≥n, que tiene un balc√≥n. Este es un ejemplo de casa que vamos a utilizar, para usar el¬†m√©todo¬†correctamente deber√≠amos usar nuestras casas, o otros sitios reales que conozcamos bien.\nAhora memoricemos algo. Una lista de la compra: lechuga, bacon, aros de cebolla, una tarjeta SD y naranjas. He usado una lista corta para hacer el post m√°s corto y para que quepa bien en la casa imaginaria que hemos construido un poco m√°s arriba: prueba con una lista m√°s larga¬†despu√©s¬†de esta si no crees que el¬†m√©todo¬†funciona!\nPara recordar la lista, tenemos que colocar cada elemento en alg√∫n sitio de nuestro palacio de la memoria. Esto quiere decir un elemento por habitaci√≥n o varios elementos por habitaci√≥n, cada uno en un sitio especial que podamos recordar f√°cilmente. La manera m√°s simple es poner cada objeto en una habitaci√≥n diferente. As√≠, nuestra peque√±a casa de 5 habitaciones podr√≠a contener una lista de 5, 10 o 15 elementos.\nPara colocar un elemento de la lista, tenemos que visualizarlo en la habitaci√≥n, para asegurar que lo memorizamos, tiene que ser una imagen extremadamente rara. Tiene que dejar una impresi√≥n clara, para hacerlo tiene que ser sorprendente, surrealista o sexual, entre otras opciones. Si la imagen es insulsa, recordarla ser√° pr√°cticamente imposible.\nEmpecemos con la lista. Cuando entramos por la puerta principal, nos saluda la Rana Gustavo, pero un Gustavo especial, hecho de lechuga, como una lechuga parlante. Puedes imaginarlo? Notar el frescor de las hojas de la rana Lechugo? En el comedor hay una estampida de cerdos\u0026hellip; perseguidos por Kevin Bacon armado con un tenedor y cara de hambre. Lo bastante raro como para recordarlo? En la cocina, Scarlett Johansson juega con un hoola-hop que es en realidad un aro de cebolla gigante. Entras en la habitaci√≥n, y te sorprende darte cuenta que la cama es una¬†tarjeta¬†SD gigante, que puedes esconder contra la pared como cuando pones una¬†tarjeta¬†en una c√°mara. Para acabar, abres el balc√≥n y te encuentras una naranja gigante y brillante haciendo de sol, goteando zumo de naranja sobre el desierto que se abre bajo tu ventana.\nLas im√°genes debes ponerlas en un sitio que conozcas como la palma de tu mano: tu casa, la casa donde creciste, tu oficina. Esto es muy importante. En este ejemplo he usado una casa imaginaria porque es m√°s f√°cil, pero en las listas que quieras memorizar, usa sitios conocidos.\nQuiz√° creas que el m√©todo no funciona, pero te¬†sorprender√≠a. Escrib√≠ la primera parte de este post al empezar la tarde, y ahora, m√°s de 3 horas m√°s tarde al ponerme con la segunda parte a√∫n veo claramente las im√°genes. Evidentemente esta es una lista muy corta\u0026hellip; Pero no importa: te ser√≠a igual de f√°cil recordar una lista 5 veces m√°s larga.\nEncontrar un conjunto de palacios de la memoria Para recordar una gran cantidad de cosas necesitas una gran cantidad de sitios para poner todos esos recuerdos. Necesitar√°s encontrar tu propio conjunto de palacios de la memoria. La primera vez que me encontr√© con este problema, pens√© en crear sitios imaginarios (como el peque√±o piso que hemos usado m√°s arriba,) conectados de alguna manera con pasillos. El problema? Los palacios artificiales se desdibujan con mucha facilidad, y tiendes a olvidarte de ellos. Es mucho, mucho mejor usar sitios habituales, o que al menos puedes comprobar de nuevo en la vida real, como fotos de un libro, niveles de un juego de ordenador o alg√∫n edificio al que puedes volver.\nUna vez me di cuenta de esto, empec√© a pensar en casas y sitios que pudiera usar\u0026hellip; Y me di cuenta que ten√≠a una gran cantidad. A√∫n recuerdo (y seguro que tu¬†tambi√©n!) las casas de compa√±eros de clase de hace 15 a√±os, hoteles en los que he estado, edificios que he visitado. Estoy seguro que podr√°s encontrar una gran cantidad de sitios que te sirvan de palacios de la memoria. Para empezar, usa sitios muy habituales, como tu casa o oficina, y a medida que cojas pr√°ctica podr√°s usar otros sitios m√°s antiguos.\nPuedes leer m√°s sobre encontrar sitios que usar en este post en ingl√©s: Building Your Memory Palace Collection\nPalabras finales Tienes que encontrarle el truco al m√©todo. Consigue experiencia convirtiendo objetos habituales (como una lechuga) en im√°genes que puedas recordar durante mucho tiempo (como Gustavo el cabeza-lechuga). Cogerle el ritmo es solo cuesti√≥n de pr√°ctica, igual que pasear por tus palacios en tu cabeza. Pr√°ctica, pr√°ctica, pr√°ctica.\nPor cierto, puedes recordar todav√≠a la lista de la compra?\nTe ha parecido interesante este post? Si lo ha sido, cu√©lgalo en Facebook o Twitter!\nSi est√°s interesado/a en aprender m√°s sobre t√©cnicas de memoria, te recomiendo los siguientes libros (en ingl√©s):\n Moonwalking with Einstein: The Art and Science of Remembering Everything¬†(Joshua Foer) How to Develop a Brilliant Memory Week by Week: 52 Proven Ways to Enhance Your Memory Skills¬†(Dominic O\u0026rsquo;Brian) Quantum Memory Power: Learn to Improve Your Memory with the World Memory Champion!¬†(Dominic O\u0026rsquo;Brian) Maximize Your Memory¬†(Jonathan Hancock)  ","permalink":"https://mostlymaths.net/2012/03/aprende-recordarlo-todo-el-metodo-del.html/","tags":["Memory","How-to"],"title":"Aprende a recordarlo todo: el m√©todo del palacio de la memoria"},{"categories":null,"contents":"Caveat: some of the links appearing in this post are affiliate links to Amazon.com If you buy anything from them, I get a small commission. As always, I only link to stuff I like. If you want to support (ever so slightly) this blog, buy something. If you don\u0026rsquo;t want, don\u0026rsquo;t do it ;)\nLately I\u0026rsquo;ve been watching an interesting TV series. Sherlock, the modern version of Conan Doyle\u0026rsquo;s stories and novels. It is written by Steven Moffat, one of the writers of the new incarnations of Doctor Who, another series I enjoy a lot. Two seasons have come and go (they only have 3 chapters each,) so far both excellent. But I\u0026rsquo;m not writing this post to (just) praise a TV series, after all I\u0026rsquo;m not a TV fan whatsoever. What I want to highlight is the appearance of the \u0026ldquo;mind palace\u0026rdquo; (as Sherlock named it) in some chapters, another way to put the more widely used memory palace. I have already written a post about how to use the memory palace technique, working as quite an introduction to the subject. But I want to retake it again, since some popular occurrences of the memory palace are pretty\u0026hellip; odd.\nSetting aside classical titles on memory or memory techniques, and the (somewhat) known book The Memory Palace of Matteo Ricci, the first best-seller book I know giving some hints about the method is Harris\u0026rsquo; Hannibal, the prequel to Silence of the Lamb. In it, Hannibal Lecter explains how he stores all his memories and knowledge in an intricate memory palace. Anything from poems to maps. In Sherlock, Sherlock Holmes is also depicted as using this method to remember a London map, before chasing a cab using his knowledge of one-way routes and construction sites. In another chapter, he is also shown deep in search of data in his mental library. But is it really like this how it works?\nFirst, for newcomers who don\u0026rsquo;t want to read my lengthy article about the memory palace method, let\u0026rsquo;s make a thought experiment to realise how powerful the method is. Close your eyes. Can you picture your parents (or grandparents) house? Mentally walk from room to room? I bet you can, even if your parents have moved since then. Can you walk mentally the route from your parents\u0026rsquo; home to your school, or high school? I\u0026rsquo;m sure you can do it without any problem. Your brain is hardwired for this: finding routes. After all, a hunter-gatherer unable to remember where the plants or the water lay was doomed to die.\nThe memory palace method aims to take advantage of this ability, paired with our visual memory and linking memory to remember\u0026hellip; lists. In fact, you don\u0026rsquo;t need to remember lists, but the method is best suited to listed knowledge, since you can remember it ordered. The simplest example would be a shopping list. If you want to go shopping and need milk, onions and some tasty dressing (making some onion rings, maybe?) you can place each item in\u0026hellip; your grandparents home. Or along the route to your high school. Problem is, done plainly forgetting it\u0026rsquo;s too easy. You are likely to walk over the 3 onions you placed in the middle of your parents living room. To remember, you have to make everything bigger, noisier and bizarre. Cleopatra (the Egyptian pharaoh of old) bathing in milk in the bathroom (in case you didn\u0026rsquo;t know, Cleopatra is said to bathe in donkey milk). A giant onion-man eating sliced humans in the living room. A bride (well dressed with her wedding dress) covered in ketchup. Far easier to remember, don\u0026rsquo;t you think?\nOn the other hand, the fictional cases of memory palaces showin in Hannibal and Sherlock are far more abstract. How are you supposed to remember poems or a map? Well, all you need is a code. To memorise a poem you need to remember its verse and rhythm. For Keats\u0026rsquo; Ode on a Grecian Urn, you\u0026rsquo;d start (again) with a bride, dressed in white with a finger to his lips, ordering silence. Then a boy appears out of nowhere, carrying a huge golden pocket clock in his neck, also gesturing for silence. And so on and so forth. One (or two) images for each verse are almost all you need. Pair it with some repetitions of the poem to get the hang of the rythhm and you\u0026rsquo;ll never be able to forget it.\nAnd how are you supposed to remember a full map? Well, this one is trickier and I still don\u0026rsquo;t know how to remember a plain map. Remembering directions is somehow easy: just store a direction in each room of your palace: turn left, go straight and right on the 3rd is just \u0026ldquo;1 left\u0026rdquo; \u0026ldquo;straight 3 right\u0026rdquo;, which are easier to encode in rooms in a palace. For a map, I don\u0026rsquo;t know and I don\u0026rsquo;t think Sherlock or Hannibal could help us.\nOf course if you have a good enough visual memory (or even eidetic memory like Sheldon Cooper in The Big Bang Theory) you could remember the full map. But this is just being born with the right genes, and I\u0026rsquo;d rather know how to do it myself.\nIf you enjoyed this post, please share it with your friends.\nParseList(ScrambleList(Relateds(Memory)),2)\n","permalink":"https://mostlymaths.net/2012/03/mind-palace-memory-technique-or-what-im.html/","tags":["Memory","How-to"],"title":"The Mind Palace Memory Technique (or: what I'm watching on TV lately)"},{"categories":null,"contents":" \nJust in case you don\u0026rsquo;t know, vi is an advanced text editor, drting back from the same era as emacs was developed (emacs started slightly earlier). Sort of the Jekyll to emacs\u0026rsquo; Dr Hyde. Emacs users despise vi users, and vi users mock emacs users. This is what the editor wars are all about: \u0026ldquo;Eight Megabytes And Constantly Swapping\u0026rdquo; versus \u0026ldquo;vi has two modes: writing and beeping\u0026rdquo;. If you have been long enough in this blog, you know I\u0026rsquo;m in the emacs side, but you also know I\u0026rsquo;m curious enough to delve into the other side.\nMy first contact with vi was in our first programming class at the University, Informatica (Computer Science). Vi was the editor of choice for the course, so much that you did not have any other option given. Along with a Linux cheatsheet and a short C manual came a vi cheatsheet. A lot of people came to hate vi, a lot of people came to love it. I was more in the hating side, but it wasn\u0026rsquo;t that bad. After a while I just started using a \u0026ldquo;normal\u0026rdquo; Linux editor (it was Kate, maybe?) and kept using it (or UltraEdit when I was in Windows) until the end of my degree.\nWhen I finished my degree I had to be a teacher of Calcul Numeric (Numerical Analysis), the third (and last) programming class in the degree. At home I was still using Windows, because the wifi card in my notebook had no Linux drivers and in my office we were using Ubuntu. I needed a cross-platform editor that was quick, versatile and could last for a lifetime. I tried vi (again) and emacs, emacs won the war for two reasons. First was the fact that it was extensible programming in Lisp, and I had already a decent knowledge of Lisp. The second was AucTeX and its \u0026ldquo;preview\u0026rdquo; option for LaTeX editing. Nothing can beat pressing C-p C-p C-d and seeing your formulae come to life in your editor. I became an emacs advocate for this reason, then after 5 or 6 years I\u0026rsquo;ve found many more reasons why this is the editor. Or, the operating system, if you prefer.\nBut advocacy is nice, but knowing all the players in the field is better. My department pals used vi (at least most of them), and it was impossible to convince them to switch. I decided learning vi (or vim, vi iMproved) was something I had to do some day, to learn what was there. After all, if I liked it so much I could set viper-mode in emacs and use vi keys in emacs. The best of two worlds, if that world is so nice.\nThen the guys at Applidium released a Vim port for iOS devices. Whoah! Even if I\u0026rsquo;m an emacs guy to the bone, a modal editor is way better than anything else available in the app store, at least for raw editing power. And I say with knowledge, because I\u0026rsquo;ve tried most writing apps for iOS devices (see this post).\nAs an additional reason, Matt Might posted a New Year\u0026rsquo;s post detailing several resolutions for programmers. Among them was breaking your comfort zone to keep your mind sharp. The first example? Switching to vi from emacs or vice-versa. He used to be an emacs user before getting to use Vi. I don\u0026rsquo;t think I could go that far, but these were enough reasons: advocacy (from me, not against me), iPad+bluetooth keyboard and breaking my comfort zone.\nHow is the experience so far? Well, I\u0026rsquo;m writing this post in my sofa, with my iPadand my bluetooth keyboard sitting in my lap. I\u0026rsquo;m still getting used to having to exit editing mode to move around: I\u0026rsquo;m very used to pressing C-a or C-e to go to the beginning of end of line. An additional problem is that even with the bluetooth keyboard, Esc can\u0026rsquo;t be mapped to the Esc event, and I needed something to do it. I have jk (pressed together) for it. It was a suggestiond I saw in Hacker News\u0026rsquo; comment thread for the release of the app, and it\u0026rsquo;s quite handy. Not so much with the on-screen keyboard, but for now it\u0026rsquo;s okay. To remap this, press backslash (the current mapping for Esc) and then :imap jk . Of course if your usual writting language involves writing the jk combination frequently (I think I could come up with one or two examples in Icelandic), this is not the best combination. The other suggested option is :imap al . Easy to tap in a virtual keyboard, not so straightforward in a normal keyboard.\nI found out also how to change the font size, at least for now this works (maybe there will be more fonts available in the future), type :set guifont=Courier:h24 (for 24 pixels)\nTo round everything, I just installed the famous solarized color theme, dark in vim for iPad. Until now I had just thought it was an overhyped color scheme: I had tried in my emacs and didn\u0026rsquo;t enjoy it that much. But in my iPadit shines with a distinct colour, it\u0026rsquo;s so much easier on my eyes that it hurts to get out and write an email! To install it in your vim for iOS, first download solarized.vim from the git repository, then plug your iDevice and use iTunes File Sharing to copy this file to the vim app. Then open vim, :e solarized.vim and :call mkdir(.vim/colors/) (to create the directory needed for it) :w .vim/colors/solarized.vim This is just because I didn\u0026rsquo;t seem to get iTunes File Sharing to work with hidden files (a file starting with a dot is hidden). Then you have to add the following to your .vimrc:\n syntax enable\nset background=dark\ncolorscheme solarized\n I recommend using this app for any emacs lover out there with an iPad. Of course, it is not emacs, but vim is a pretty awesome text editor, and it\u0026rsquo;s always handy to learn to use it.\nTo have a useful list of vim commands at hand I installed the Vimmy app, a universal app with the most common vi commands. I can switch to it via the multitasking gestures in my iPad, or use it in my iPod Touch while I\u0026rsquo;m using it in the iPad.\nConclusion I don\u0026rsquo;t think I\u0026rsquo;ll ever switch from emacs to vim any time in the future, as I said AucTeX is definitely too good. Of course since then I\u0026rsquo;ve found many more things I love: having a REPL for Python, Clojure or Lisp inside my editor. There\u0026rsquo;s even a REPL for PostScript! Also local remote editing with tramp\u0026hellip; There are too many things I use on a daily basis and I can\u0026rsquo;t barely remember, they are so entrenched in my .emacs file I can\u0026rsquo;t even realise what they are. But for my iPad it is an awesome addition to write text on the go.\nAgain, if you have never used vim before and are interested, give it a try. Of course the first time you open it it will be\u0026hellip; a jump into the unknown. Tap the screen, press :e filename and start editing happily. Esc (well, jk or backslash, as the initial mapping) :w to save. And you can even :q to exit to springboard!\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2012/01/learning-to-use-vim-in-my-ipad-even-if.html/","tags":["Programming","emacs","iPad","Productivity"],"title":"Learning to use vim in my iPad (even if I'm an emacs geek)"},{"categories":null,"contents":" Taken from Flickr\n  In case you have not realised it yet, I\u0026rsquo;m a pretty prolific reader. Online reading (and having an iPad) have slowed down the number of books I read in a given year, and I don\u0026rsquo;t go to the lengths of my girlfriend (who is about to reach her goal of reading 102 books in this year,) I\u0026rsquo;m nevertheless a frequent reader.\nThis year I\u0026rsquo;ve read several good books that I\u0026rsquo;d like to share with you, after all, if you are reading this probably our tastes overlap. And then these books will be perfect for you (or for some geek in your life). The books I\u0026rsquo;ve selected range from programming, sports and non-fiction. Oddly enough, I don\u0026rsquo;t remember any fiction book I\u0026rsquo;ve read this year (not counting some book by Raymond Chandler, which I can recommend each year). Let\u0026rsquo;s go!\nBorn to Run A Hidden Tribe, Superathletes, and the Greatest Race the World Has Never Seen: I reviewed this book in a previous post here. I found it very good, and urged me to get running. My running frequency is (to put it softly) awful, but I\u0026rsquo;m trying to improve. If you want to start running or recover some lost motivation, give it a shot, it\u0026rsquo;s a very good read. You can read my review of Born to Run.\nVisualize this The FlowingData Guide to Design, Visualization, and Statistics I wanted a book to help me graphing things in my future work as a freelancer, and after looking around a little I found this *great* book by Nathan Yau, the blogger behind Flowing Data. It\u0026rsquo;s an awesome book, which will help you start kicking around the graphs and tables.\nConfessions of an advertising man: An almost autobiographical book by famed ad-man David Ogilvy, if you are anything into copywriting, advertising or marketing, you have to read this book. Not only will it help sharpen your ideas, but it is also a very good and entertaining read.\nMoonwalking with Einstein The Art and Science of Remembering Everything: A New York Times best-seller by Joshua Foer. After reading his interview-article there, I decided to buy it (pre-ordered it!), and it was very worth the money. An entertaining read of how motivation can get you a long way, and how some memory techniques work. I have not written a review of it, but you can read my own explanation of the memory palace technique.\nEven a geek can speak Low-Tech Presentation Skills for High-Tech People: The best book for anyone in need to give a presentation. Clear, concise and to the point, this should be a forced reading for all technically minded people. You can read my review of Even a geek can speak.\nMining the social web Analyzing Data from Facebook, Twitter, LinkedIn, and Other Social Media Sites: If I had to try the book I enjoyed the most reading this year, it is this book. Seriously. Even awesome comes short of what I think about this book. I plan on reviewing it, but I\u0026rsquo;ve got not enough time yet\u0026hellip; With it you\u0026rsquo;ll learn how to mine twitter, Facebook, LinkedIn and whatnot. And then process all this data. Easily. Yes!\nThe AdWeek copywriting handbook The Ultimate Guide to Writing Powerful Advertising and Marketing Copy from One of America\u0026rsquo;s Top Copywriters: Your deep entry into copywriting, from a master copywriter. You\u0026rsquo;ll learn how to shape your online copy, from headline to action. It\u0026rsquo;s very well written in an understandable fashion. Keep in mind that if you buy the Kindle edition, the provided checklists are not that useful.\nThinking Forth: I\u0026rsquo;ve had this book for a long, long time and I finally got to read it. I used a simple method for getting me to read it: I left it in the bathroom. When I had to spend some time there (for example, shaving with an electric machine!) I read a few pages. And in no time, I had finished. You don\u0026rsquo;t need to have a computer close to read it, but a little knowledge of Forth is quite useful. It is a clean book, introducing some concepts like orthogonality and testing without even trying.\nPower Sleep The Revolutionary Program That Prepares Your Mind for Peak Performance: A best-seller book focused on mental abilities and how sleep affects it. Packed with research results and advice, it was a very interesting book, although a little too long. After all, the best suggestion is to go to sleep each day at the same time and keep adding 15 minutes (weekly) to your sleep until you stop feeling sleepy. Now that you have the spoiler, buy it.\nCrush It! Why NOW Is the Time to Cash In on Your Passion: One of these self-help books that will get you pumping ideas and rocking you off the sofa. According to Gary, now it is time to crush it. And probably it is. If you are a little low on motivation, read this book. Don\u0026rsquo;t expect it to teach you how to do things, just read it as experiences to think about.\nWhat I talk about when I talk about running: Another running book, this time an autobiographical piece by one of my favourite writers, Haruki Murakami. I was expecting a little better from him\u0026hellip; But of course, not every book can be Hard-boiled wonderland and the end of the world. An interesting read about Murakami\u0026rsquo;s running experiences, and how he got to run a 50 miler and the \u0026ldquo;original\u0026rdquo; marathon in Greece (under a scorching sun).\nThis month I\u0026rsquo;ve started several books that I\u0026rsquo;m sure would have make this list, and will probably be delayed until next year:\nSteve Jobs: I will remember how and when I found out Steve died, and will still be inspired by his commencement speech for a long while. I\u0026rsquo;ve gone through almost one fifth of the book (a very thick one,) and it is one of the best biographies I\u0026rsquo;ve read (the other is John Nash\u0026rsquo;s). Brilliantly written, it reads like a novel with a fast pace.\n1Q84: the recent best-seller by Murakami was the gift from my girlfriend for this year\u0026rsquo;s St. George day, and I\u0026rsquo;ve only been able to read a few pages. From the raving reviews, I assume I\u0026rsquo;ll like it (I was deceived by Kafka in the shore).\nThe memory palace of Matteo Ricci: A classic book for memory techniques lovers, I\u0026rsquo;ve only got to read the first 20 pages or so. So far, very interesting and well edited.\nGuns, Germs and Steel The fates of human societies: A book recommended by my thesis advisor, dealing with why Europe invaded America and why it was not the other way around. Of course, all is theoretical, but it is amazing nevertheless.\n","permalink":"https://mostlymaths.net/2011/12/good-books-ive-read-in-2011-perfect.html/","tags":["Programming","Forth","Improve Yourself","Memory","Teaching","iPad","Running","Visualization","Maths","Productivity","Books"],"title":"Good Books I've Read in 2011: Perfect Gifts for Geeks!"},{"categories":null,"contents":" \nSome of the links in this post are affiliate links. As usual, I only recommend what I\u0026rsquo;ve used and like\nInspired by a post by Mark O\u0026rsquo;Connor from Yield Thought (my frequent readers will have already read something from him from my link collections), I have been working remotely for a week. His set-up is an iPad 2, Apple wireless keyboard, the iSSH app and an account in Linode. My setup is similar, but I use an iPad 1 and 6sync for the VPS.\nWhy 6sync? A matter of luck. Around 2 weeks ago, I set up my \u0026ldquo;name domain\u0026rdquo; at rberenguel.com (currently down, I messed the Apache configuration a few days ago), and I decided I had played with blogger for long enough. Decided to look up an VPS to host that site and whatever I needed to either host or cloud process in the future. Tweeted asking for options, and in the meantime, Sacha Chua explained how she switched to Linode. Linode was going to win\u0026hellip;\nUntil the guys at 6sync (Mario and Rav) sent me a tweet, urging me to check 6sync before choosing. I checked the page, the prices, and was close to sold out. Exchanged a few tweets, read a few reviews, and I was convinced. Reasons? Many.\nFirst, they offer a more basic and cheaper service. Whereas Linode offers 512 MB of RAM, 20GB storage and 200GB transfer for 19.95$/month as the basic plan, 6sync offers a nano plan with 256MB of RAM, 12GB storage and 150GB transfer for 15$. This plan is currently ideal, since my bandwith and RAM usage for the server side is close to nil, and I don\u0026rsquo;t expect to use that much of bandwith in daily doses. They also offer a Mini plan with 2 CPUs, 512 MB or RAM, 20GB storage and 400GB transfer for just 20$/month, beating the Linode offer on its own ground.\nSecond, they have a very nice website. As a hobbyist page creator, this is important. I like how they have set-up their site, and the pictures they choose to go by. If they are not the designers, the designers should receive this praise.\nThird, they are a funny bunch. I exchanged several tweets with them, and they were very supportive. And as soon as I had my server up and running and ran into problems (or more precisely as it turned out, I was not patient enough for the DNS switch) they were extremely quick to help through their in-page customer chat service.\nFourth, they have a lot of server setups ready. Do you want Debian? Check. Ubuntu? Check. Arch\u0026hellip;? Yes! I can use me dear pacman package manager and install whatever I want, in the latest version. Cool.\nAll in all, very happy for hosting. And then, Mark published his post.\nThe remote and local setups At first, instead of filling my 6sync server full of software, I tried a simpler setup: using my office computer in the department. I still have an account for using that computer, and I have already everything setup for working remotely. I only needed a decent ssh client for iPad.\nBack in the iPod Touch days, I used the awesome (truly awesome) TouchTerm app, which is (was) perfect for the iPod Touch. Offering a wide array of gestures to control it, it is a marvel of usability. But it has no iPad version. For the occasional SSH session I was using the free zatelnet app. But this also was not a good deal.\nWhen Mark published his post, I decided to buy iSSH, and even if the price tag is high for an app, I don\u0026rsquo;t regret it. The freedom you get when only carrying an iPad and a very slim bluetooth keyboard is unmatched. The app is universal, so you have two apps for the price of one. Check the server stats from your iPhone!\nMark is a vim guy\u0026hellip; I guess that\u0026rsquo;s okay for a lot of people, but not for me. I could go the vim way (I have been trying to get a basic proficiency of vim in the past), but I\u0026rsquo;m an emacs guy. Up to the last moment. And I had to cross fingers for iSSH and emacs to play along nicely\u0026hellip;\nWell, they mostly do (at least with iOS5). The control key works, and so does the option key (as meta). The real meta key (command) does not work as expected, but esc also works as meta, in case of need. The only problem I\u0026rsquo;ve found so far is the fact that control-f and control-b are hard-bound (in the iOS level) to advance/go back a word. Thus control-x control-f does NOT open a document. But if you press shift, emacs does not care about control-X control-F, and the iOS bound setting is overriden.\nThere\u0026rsquo;s a more important problem with these iOS level shortcuts, control-a goes to the beginning of the line\u0026hellip; but leaves a nasty [] in the buffer. I have written an abbrev-expansion and re-bound control-a to get rid of it, but it does not work as well as I want yet. Luckily emacs is flexible enough to allow me to solve this in more than one way. Currently almost done anyway.\nInstalling all the stuff is a breeze. Of course, I had already installed the LAMP setup, although I only have configured Apache so far, but adding the rest of things I use on a daily basis is straightforward:\n pacman -S emacs-nox texlive-core\n And now\u0026hellip; Dropbox or not dropbox? Dropbox from the command line has a slight problem: you need a browser to accept the linking between your new computer and the remote system. And I didn\u0026rsquo;t want to add the complexity of X to the game (even if iSSH has a very cool X server\u0026hellip;). So I left dropbox out of the equation. I can always push/pull the files every once and then without problems.\nSo, I have everything that I need. Now, how does it work in practice?\nThe daily grind As you may already know, my daily grind is split between my part-time freelance job as social media manager (among many other things covering get more pageviews and make more money from the sites, mixed with data analysis and copywriting) and finishing my thesis.\nWorking in my iPad for the freelancing job was already possible. I could access almost all systems from just a browser. Reading and answering mails, the same, although going from the email app to the CRM is slow. So far, the only problems I\u0026rsquo;ve found are spreadsheets (solved since I got Numbers) and e-Junkie. e-Junkie has the nice feature of having a flash-based login box. Clever, isn\u0026rsquo;t it? Well, I\u0026rsquo;ll leave the e-Junkie management for my MacBook moments.\nFor the thesis part, it was harder. There is an awesome LaTeX editor for iPad, TeX Touch. I can\u0026rsquo;t really stress how good it is. Using it with the on-screen keyboard is as close as you can get to be proficient. The drawback is that once you\u0026rsquo;re used to emacs, if you have a solid keyboard, nothing can beat emacs except telepathy.\nThis is where the iSSH stuff enters into play. Fire emacs, edit all your TeX in console mode (I can somehow live without AucTeX\u0026rsquo;s preview, although it is slightly hard), compile the pdf and move it to the shared folder (all done via an automated script within AucTeX for compiling). Switch to Safari (or GoodReader) and open the document. Check everything is in place and keep going.\nThe standard TeX based lather-rinse-repeat is straightforward from within an iPad.\nAnyway, I\u0026rsquo;m not using only the iPad day to day. Only those days when I know I don\u0026rsquo;t have that much work to do, requiring heavy task-switching or firing tons and tons of emails with attachments. For slow (or semi-slow) days, it is awesome.\nWhat benefits are in this? Well, I\u0026rsquo;m free of carrying a heavy MacBook. Until I get a nice MacBook Air, my current computer is a slightly too heavy MacBook from 2008. It weights quite a lot, and I need to add the charger (even if it is very light, it weights). When I carry the MacBook, I also carry the protecting case (more weight) and a backpack (weight) with some folders with the stuff I\u0026rsquo;m correcting for the thesis (I could remove this). And I also carry my iPad.\nThese days I get by with my purse-bag, which is perfectly sized for the iPad+keyboard. I carry the pages I need to check for the thesis, and no more. So I\u0026rsquo;ve gone from 5-odd (or 6-odd) kilograms to slightly more than 1.\nI also don\u0026rsquo;t need to worry about plugs or battery, the iPad battery lasts for a days\u0026rsquo; worth of working.\nParseList(ScrambleList(Relateds(productivity, programming)),4)\n","permalink":"https://mostlymaths.net/2011/12/working-on-go-with-ipad-bluetooth.html/","tags":["Blog","Programming","emacs","Linux","Thoughts","Improve Yourself","iPad","Mac","LaTeX","Productivity"],"title":"Working on the go with an iPad, a Bluetooth keyboard and a 6sync account"},{"categories":null,"contents":"\nI‚Äôve been playing the game of Go (also known as weiqi or baduk) on and off for almost 10 years. In case you don‚Äôt know, Go is a board game with very old roots, that can be traced back to at least 2500 years ago, probably a lot more. Very popular in Japan (known as Go or Igo), Korea (baduk) and China (weiqi), it has been slowly spreading among the west during the last century. It is featured in the movies Pi and A beautiful mind, for example.\nFor some odd reason, every autumn I decide I want to play again, and I pick up playing only for it to wane after a while. As every year, I hope this is the last and I keep on playing. What has this game that is so appealing?\nGo is a beautiful game. If you are anything into programming, it\u0026rsquo;s like the Lisp of board games. Lisp (at the core McCarthy sketched) is so simple that it is almost like it was discovered more than developed or invented. Likewise, Go is probably one of the simplest games you can define, yet it hides a deepness that is astonishing.\nI used to be a chess player back in my early teen years and there was something that always bothered me: why are chess rules so arbitrary? Why does the knight jump in an L shape and no other piece jumps? Why is the rook placed on the sides? I was unsatisfied with these arbitrary rules. In addition to this, even as a very, very early amateur, you could get nowhere without either killer move reading (anticipating moves is usually called reading in the board game lingo) or a quite decent knowledge of some openings. In my days, I settled for the Indian openings, by the way (which then could be stretched into the Catalan opening, which I also used very often).\nAfter giving up chess due to lack of time and drive, I discovered Go, a game where the rules are kind of natural. Although there are some kind of openings close to the sense of chess (known as joseki, which means fixed pattern), they are not fundamental until you are quite a decent amateur, and even yet, are not essential.\nFor a long time I was member (also was vice-president, accountant and maybe even president for some days) of the club in my maths faculty, where we taught many peope the game. Lack of time and a persistent avoidance of playing, moved me away from the game. Why was I avoiding playing? Fear of competition, fear of losing, fear of making stupid moves and looking stupid. These are feelings I still have, even 10 years later. Slightly less: failing and doing stupid things cures you from this.\nThis autumn, just a few days after I had joined the baduk subreddit, one of the admins there started a tournament, and I found it perfect to get me playing. So I registered, removing two ranks from what I remembered was my rank. In Go, ranks start at 30 kyu, and progress towards 1 kyu, afterwards you get 1 dan and progress towards 9 dan (there is nothing beyond 9 dan). The rank I remembered (in the online server KGS) was 12k, a rank I held for a long time, and accordingly set my new rank as 14k.\nWhat I did not remember was the fact that KGS had undergone a rank shift. I don\u0026rsquo;t remember the details, but it had something to do with moving the peak of the normal distribution of ranks. After this rank shift (and probably a little improvement while I didn\u0026rsquo;t play) I got to be 6k for a while, maybe even more for short while due to rank drift. What rank drift? When you play a game against a player and win, if the player improves your rank improves accordingly (the effect fades after a certain time, but carries some weight). Since I was playing very little, I was subject to very strong drift effects.\nAnd this is the story of how I have started playing again, and what is this thing called Go. Maybe I\u0026rsquo;ll write more about the game, maybe not. If you are a subscriber you already know how my interests shift from time to time\u0026hellip; But I always come back to the basics!\nParseList(ScrambleList(Relateds(programming)),2)\n","permalink":"https://mostlymaths.net/2011/11/again-and-again-playing-go.html/","tags":["Go","Thoughts","Games"],"title":"Again and Again: Playing Go"},{"categories":null,"contents":"A few weeks ago I found out the awesome time tracking setup that Sacha Chua has in her homepage. Although I\u0026rsquo;m a regular at her blog and I follow her RSS feed, I had not seen it \u0026ldquo;live\u0026rdquo; yet. My inner geek yelled \u0026ldquo;gimme gimme\u0026rdquo; and I asked her what mobile software is she using for time tracking. Sadly (well, sadly), it is Android only app. Oh well. I don\u0026rsquo;t want another device. So how can I track my time always, when the only thing I have always with me is either an iPad Touch or an iPad?\nThere is a problem with the App Store. Usually, as the advertisement says there\u0026rsquo;s an app for that. The problem is that I\u0026rsquo;m very picky. I want an app that does exactly this and that, but I don\u0026rsquo;t care about this other fluff or this nice buzzword.\nI asked myself what I wanted for a time tracking app. In the end, I want just one thing: timestamps and subjects. Nothing else. Something that may look like:\n20111105 2103 2125 blog  Simple, isn\u0026rsquo;t it?\nDate | start time | end time| subject  I don\u0026rsquo;t need graphing, or aggregating, or Dropbox syncing, or any other such thing in my iPod Touch. I don\u0026rsquo;t even need length, because this can be recomputed later. I can do all these things far more effectively with Python and R and/or Google Fusion tables in my computer, for example. I could even do it with Python and Gnuplot, or if I was truly desperate, awk and Gnuplot.\nNow, the funny thing is that even if I don\u0026rsquo;t have a developer account with Apple, or iOS development knowledge (yet), there\u0026rsquo;s a quick way to create a program that does exactly this for my iDevices (in fact, for almost any device with a browser).\nHTML5+Javascript (using localStorage and cache mode). Simple, isn\u0026rsquo;t it? Now I have a small app to track my time in my iPod Touch. Just a few lines of Javascript and a few buttons:\n A button to timestamp, press it again to end the timestamp A button to dump all the data from localStorage and show on screen A button to clear the data from localStorage A button to mail the data  Nothing else. Nothing more.\nEach time the timestamp button is pressed, a nicely formatted string gets saved into localStorage, making sure everything works even when I lose the local cache copy due to refreshes. The dump data button is to know what I have already logged, before mailing. And of course, even if 5MB is quite a lot, I don\u0026rsquo;t want to fill it so I need to clean up when I send.\nFor now, I need to refactor the code before posting it. I finished it in two batches of 20 minutes, and in the second I gave up on refactoring, and clean a little the functionality. But it\u0026rsquo;s simple and it works, I have already tracked more than a week of data. Now I only need to find the time to write the analysing code. So far I have a Python function to generate the spans from the time stamps, but I\u0026rsquo;m still not sure how I want to analyse everything. If I want to generate aggregate data from Python (I\u0026rsquo;m more fluent) or in R (more versatile, and I will do the graphing here).\nParseList(ScrambleList(Relateds(Productivity, Programming)),2)\n","permalink":"https://mostlymaths.net/2011/11/time-tracking-like-there-is-no-tomorrow.html/","tags":null,"title":"Time Tracking Like There Is No Tomorrow (with Javascript and HTML5)"},{"categories":null,"contents":"This was posted to my mail newsletter a few months ago. Subscribe now if you want to receive this kind of content to your inbox. I won\u0026rsquo;t spam you, promise.\nWhen do you have your best ideas? If you are anything like me, I have my best ideas when I can\u0026rsquo;t act upon them. While I\u0026rsquo;m falling asleep or while I\u0026rsquo;m taking a shower. And a lot of them get lost forever, I always think I\u0026rsquo;ll remember it next morning, something that never happens. But I found a nice way to solve this, with a solution very similar to the¬†memory palace technique¬†for remembering lists.¬†Use a mental drawer.\nI have to confess that the idea is not completely mine\u0026hellip; I read it a long time ago in the preface to¬†Four Past Midnight, by Stephen King. He uses it for drafting his book ideas. King puts ideas in the drawer and lets them grow. We won\u0026rsquo;t be using the drawer like him, but the idea is pretty similar.\nYou need to imagine your mental drawer (design it as you wish! modern Swedish style or 18th century wood, as you please), as vividly as possible. Feel the smell of wood (or lacquer), the sound as it opens and closes, the feeling of its surface. Keep it in mind for a few days, mentally opening and closing it as soon as you wake up or get out of the shower.\nAfter getting used to it, you are ready to harness its power. Imagine you have an idea before falling asleep, for example that you\u0026rsquo;d like to interview Steven Pressfield (like I did, read¬†here). You want to keep this idea, as it sounds interesting and worthwhile but don\u0026rsquo;t want to turn on the lights and write it down: you are almost asleep, turning on the lights will mean 30 minutes before falling asleep again. Now you have a solution: mentally open your drawer and put (imagining it as vividly as possible) something related to Steven Pressfield. For it to work more effectively, the image has to be bizarre. You could imagine Steven Pressfield squirming inside the drawer like a contorsionist, or a bunch of Spartan soldiers getting out of it (Pressfield wrote Gates of Fire, about the Battle of Thermopil√¶).\nAs soon as you wake up, you check your mental drawer, notice Steven inside it and write down the idea in your notebook.¬†Easy and effective. Of course, for it to work you need to make checking your drawer a daily habit, but this is another whole story I\u0026rsquo;ll write about any other time. Stay tuned, and share with your friends if you liked this post.\nThis technique will be a small part of an upcoming ebook on memory techniques I\u0026rsquo;m currently writing. If you are interested in being a \u0026ldquo;beta reader\u0026rdquo; or even being an affiliate/reviewer, just drop me an email. Don\u0026rsquo;t be shy!\nRelated posts in mostlymaths.net:\n Learn to remember everything: The memory palace technique Remembering facts: mental associative chains  Image courtesy of manatari @ Flickr\n","permalink":"https://mostlymaths.net/2011/09/mental-drawer-never-miss-idea-again.html/","tags":["Thoughts","Memory","Productivity"],"title":"The Mental Drawer: Never miss an idea again"},{"categories":null,"contents":" As of late, I\u0026rsquo;ve been playing a lot with data analysis and visualization tools. Recently I\u0026rsquo;ve read two interesting books (Statistical Analysis with R and Visualize This: The FlowingData Guide to Design, Visualization, and Statistics and I\u0026rsquo;m on my way to another two to refresh my statistics knowledge.\nBut this post is only mildly related to these books, since it started way before: the day I read about Gephi. Gephi is an open source graph visualization tool, to work with huge (or at least big) datasets and graphs. I\u0026rsquo;ve seen it used to graph the friendship network from Facebook, or to graph tweet-retweets from Twitter (these two can be found in the Learn section from the Gephi website). In this post I\u0026rsquo;ll guide you step by step to do a keyword-landing page directed graph, using data from your Google Analytics account.\nA directed graph is a graph with arrows. You have a set of sources (in this case keywords) and targets (in this case landing pages), and aggregate sources by name. Plot this, and you have a keyword-landing page graph like this one (data for the last month in mostlymaths.net restricted to the first 500 keywords).\n Keywords (arrow) Landing pages\n  What interesting things you can read from such a graph  Clustering: In this particular instance, I can find the \u0026ldquo;clusters\u0026rdquo; of my blog. You can see 3 big aggregations of keywords and landing pages (left-middle,up-center and right-middle). Each one of these marks pages and groups of pages with several landing keywords. The groupings mark like the \u0026ldquo;big themes\u0026rdquo; in my blog, at least from search engine traffic (these are memory techniques, 9 best programming books I\u0026rsquo;ve read and seed germination respectively). Oddly enough, I\u0026rsquo;ve had one visit landing in seed germination from the keyword \u0026ldquo;gnus mail\u0026rdquo;, thus the big seed germination cluster includes emacs. Big keywords: In gephi you can scale nodes depending on other table variables. For example, I can scale the landing page dots depending on the number of keywords, or the number of visits. In particular, I can show which keywords lead to more of my pages, by using the outDegree (number of arrows escaping) of a node.\n Big pages: Alternatively, I can scale nodes with the inDegree (number of arrows entering) to learn which pages have the most different keywords. I can also label the arrows with the number of visits (and scale them with this metric).\n Huge pages: with a little more work, I could scale with total visits to see which are my biggest pages together with the landing keywords.\n  Step by step guide I\u0026rsquo;ll assume that you can manage to download and install gephi on your own, and have some knowledge of Google Analytics. Of course, the first you need is to select the keyword and landing page fields in your Google Analytics page:\n Then select Show Rows and select 500:\n And get a nice CSV file with the export tab on top:\n Now I don\u0026rsquo;t know if this is because I select CSV and not CSV for Excel, but you have to clean the file: there are a lot of table identifiers to remove before the real data table. You also need to remove a line at the end of the file. You can do all this editing with any plain text editor. I used emacs.\n Remove all this, below Table you should have the useful data,\n Remove the last line with dashes. Now the file is almost ready to be imported‚Ä¶ You need to rename the Visits column to something else, for some odd reason Google Analytics copies the same column twice and Gephi needs unique column names. Ready to import. In Gephi, go to the Data Table window from the Window menu, and click Import Spreadsheet:\n And now you should select edges table and comma-separated:\n  Oops. More tweaking of the CSV file is needed: Change the first two columns to Source and Target (and don\u0026rsquo;t forget to mark comma as I did, too) and re-import the file:\n After clicking next, Gephi will ask you for the types of the columns. Since I\u0026rsquo;m only interested in visits, pages/visit and average time on site, these are the only columns I want to be floats. You need them to be float to scale the nodes according to these parameters:\n Next, we\u0026rsquo;ll see a blob of points with no labels. Choose the Force Atlas algorithm in the Layout window, run for a while and then click stop:\n  The result from the Force Atlas algorithm to distribute points will look nicer, spreading aggregates of arrows all over the place. Now we need to get the labels. To do so, you have to click on a somewhat hidden button in the bottom-right part of the Graph window, and select the correct names for the tags. In this picture I\u0026rsquo;ve also marked the label and edge scaling according to parameters:\n Once you have labels, you need to play with the layout to make them more visible. Run the algorithm Adjust Labels for a while, then Force Atlas and repeat until you are happy with the results:\n You can also set labels for the edges, if you are interested in seeing visits, for example. But I found it messy and unchecked the option. Finally, to scale the nodes, use the Ranking window:\n The arrows mark the different ways to adjust: you can change colour, size, text size or text colour. Feel free to play with all these settings!\nYou can get a nice PNG file of you graph by pressing the camera-like icon in the Graph window (clicking the down-arrow will list the properties), or you can export a PDF or SVG with some more work from the Preview window. Both result in nice images, but a SVG or PDF can be tweaked extensively using Illustrator or Inkscape. But it also needs more work from the Gephi side, so I won\u0026rsquo;t enter the details in this tutorial. Well, just a little! Be sure to check \u0026ldquo;show\u0026rdquo; before exporting, or you\u0026rsquo;ll see a blank page:\n And with just these steps you can create quite nice (and useful) graphs like this one:\n And here you can find a closer zoom:\n I hope you enjoyed this tutorial, if you did it would be awesome if you share it. I\u0026rsquo;ll try to do a few more Gephi tutorials as I find more interesting (for me) uses of Gephi. I have also a few post/tutorial ideas about visualizing Facebook Insights data for pages and using Google Fusion Tables. Stay tuned!\n","permalink":"https://mostlymaths.net/2011/08/using-gephi-to-visualize-keywords-and.html/","tags":["Blog","Data","Visualization"],"title":"Using Gephi with Google Analytics to visualize keywords and landing pages"},{"categories":null,"contents":" \n In Back to the Future, Doc sets the clock in the DeLorean to a day 25 years in the future. Today (2010, 6th July) is that day.\n Today was a really amazing day. It was very sunny, and we visited √çsafj√∂r√∞ur, a city that stole our hearts.\nHolmav√≠k\u0026rsquo;s Witchcraft Museum, Reykjanes We started our day with breakfast and taking a quick picture of Drangsnes\u0026rsquo; Rock troll. It does not look like a troll for us, but anyway.\n \nDoes it look like a troll to you?\nFueled at Holmav√≠k, and then visited Holmav√≠k\u0026rsquo;s Witchcraft Museum. It was very interesting! It only costs 700 ISK with and included an mp3 player-audioguide. They also had an open wifi hotspot, thus we took a coffee while relaxing, at Kaffi Gla√∞ur while checking our mail and twitter.\nFrom Holmav√≠k we drove to Reykjanes\u0026hellip; Where we did not find Reykjanes\u0026rsquo; old pool\u0026hellip; We just walked around for a while, then we went back to the car. Fueled again (it had been a longer drive than expected!)\u0026hellip; This N1 station only offered gas, no food or anything else. No sk√Ωr, no market, not handcrafts. A boring stop, if not for the views!\n \nHey! Look! The sky is more blue in Iceland!\n(View in front of Vigur)\nWay to √çsafj√∂r√∞ur We started to drive around the fjord area, taking pictures all around. The day was sunny and warm\u0026hellip; Incredible. It was the best moment for a change of weather, the views of the fjords were incredible.\n \n \n \nThe fjord area around √çsafj√∂r√∞ur was astounding\n√çsafj√∂r√∞ur is an awesome city. Probably this impression was heavily biased by the fantastic weather, but anyway. If I ever get to work whenever I want in the world, this is the place we want to stay.\nParked in front of the information centre, where parking is free (which happens almost everywhere, in spite of what our travel guide explained). Walked around for a while, before having a look at the local Eymundsson bookstore, which had absorbed the old local bookshop. Nothing interesting, the same books we saw at Akureyri. But beside it we found a wonderful \u0026ldquo;store\u0026rdquo;, mix of cafe and wool and handcrafts. We had a coffee with a rhubarb pie, very similar to my √¶blekage.\n \n \nWalking around √çsafj√∂r√∞ur\nWe walked a lot around the city, under the sun. Wonderful, just wonderful. If you have the chance, visit this city.\nEnd of the day at √ûinfeyri Tunnel!: a 9km tunnel, 4 of which were just one lane, between √çsafj√∂r√∞ur and Flateyri. It even had a forking in the middle to drive towards Su√∞ureyri. After the tunnel we stopped to collect seashells and take pictures of the surrounding fir√∞ir (plural of fj√∂rd in Icelandic).\n \n \nCollecting seashells after a long tunnel\nKept on driving, and before we realised it we were already in √ûingeyri! Our \u0026ldquo;hotel\u0026rdquo; was not really a hotel, but a guesthouse without cooking facilities. Oh well\u0026hellip; Shared bath and restaurant. Could be worse. We had a soup of the day with salad and bread for 1250 ISK, which is not that much, and as usual was really good. The bread was homemade, without salt but with sunflower seeds. Wonderful with butter!\n \nWent to sleep, expecting another sunny day tomorrow!\nCatch previous posts in Road Trip Around Iceland: The Index.\n¬´ Road Trip Through Iceland: Day 10 ‚Äì Hv√≠tserkur\n¬ª [\u0026hellip;]\n","permalink":"https://mostlymaths.net/2011/06/road-trip-through-iceland-day-10-fjord.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 11 ‚Äì A fjord day and visit to √çsafj√∂r√∞ur"},{"categories":null,"contents":"\nClick to open in a new window/tab and then right click to Save as\nToday is Iceland\u0026rsquo;s National Day (commemorating their independence day and the date of birth of J√≥n Sigur√∞sson), and to commemorate it I share this image with everyone.\nI computed this image a long, long time ago (using the Distance Estimator Method, paralellised with PVM using 16 computers, it took just 2 minutes). The full file is a 30MB pdf, which I printed large-size, and sits in my office. This is for your desktop background pleasure, I hope you enjoy it. I can do higher resolution shots or zooms from the original if you like.\nIf you liked this, please share it with your friends or subscribe to the RSS feed.\n","permalink":"https://mostlymaths.net/2011/06/gift-quadratic-julia-set-for-icelands.html/","tags":["Downloads","Fractals","Maths"],"title":"Gift: A Quadratic Julia Set for Iceland's National Day"},{"categories":null,"contents":" \nSnickerdoodles!\nDo you have problems to keep motivated? Is your usual to-do list filled with great hopes of accomplishing 20 things? Do you dump it when you are wasted at 11 AM after finishing just the first 5 things? Of course, you are not alone. This is a very common thing, from freelancers to researchers, or to almost anyone managing their own time. But this can be due to eating radishes instead of chocolate chip cookies.\nEgo Depletion? Ego depletion was introduced a few years ago, as a placeholder of the results of several experiments\u0026hellip; Which seem to show that your willpower can be depleted.\nIn one of this experiments, several test subjects skipped a meal to be hungry and then were split in 3 sets. One would eat nothing (poor lads). Another set were left alone in a room with a bowl of radishes and a bowl of chocolate cookies, freshly baked, and were instructed to eat two or three radishes while avoiding the cookies. And the lucky set were told to eat chocolate cookies, while avoiding the radishes.\nAfter this, they were instructed to try to solve a geometrical problem, with the possibility of giving up if they wanted to. The trick here was that the problem was unsolvable. And the non-eating set and the chocolate cookie eater set tried longer to solve the problem, and reported being less tired than the radish eaters. Since they didn\u0026rsquo;t spend their mental energy in forcing to eat the radishes instead of the cookies, they had more willpower to keep on trying.\nMore research in this subject (and there is plenty!) has shown that there are some ways to replenish this ego depletion. Forming implementation intentions (like plans, projects, todo lists) helps, but is not the only solution. Getting rewards, doing fun things, eating something pleasant (or even mildly pleasant) can also help, but as before, it is not the only solution.\nFrom some other experiments, it looks like ego depletion is just a self-regulatory method. Your brain just leaves some energy in reserve after a hard try. Which means that when you have almost no willpower left, there is still a lot you can do.\nHow can you use this to your productive advantage? You have to gauge how you approach a todo list. If you start with a task you don\u0026rsquo;t want to approach (even if it is easy!) is more likely to erase your willpower than a hard task that you don\u0026rsquo;t dread doing. You should then sort your todo list depending on how much you want to avoid a task, and then sort by priority. If a simple task will eat a lot of your energy, leave it for last. If a hard, energy consuming task has a very high priority do it as soon as possible and follow the next suggestion.\nWhen when you have no willpower left, there is still a lot you can do. Take a short break and give yourself a treat you like. You can eat a chocolate cookie, for example. Or draw a little, read a (not online) newspaper. Do something you enjoy but does not lead to procrastinating. Checking online feeds leads to checking Facebook which usually can end in doing nothing for an hour. Refrain from this and just eat that cookie.\nDon\u0026rsquo;t forget to share this post in Twitter if you enjoy chocolate cookies!\nReferences\n Psychwiki article on Ego Depletion Baumeister, Vohs: Self Regulation, Ego Depletion and Motivation Baumeister, Vohs: Intelectual Performance and Ego Depletion: The role of the self in logical reasoning and other information processing   Related posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nFocused Interview with Leo Babauta (from Zen Habits)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2011/06/ego-depletion-go-eat-that-chocolate.html/","tags":["Time Management","Productivity"],"title":"Ego Depletion: Go Eat That Chocolate Cookie to Be More Productive"},{"categories":null,"contents":" \nAs you may remember, yesterday we were not happy with our guest house. And in addition to what we saw yesterday, today our breakfast was d‚Äì‚Äìn late. When you are driving around a country trying to be on time everywhere, you wake up early and drive a lot. If your breakfast is late, you are bound to either go faster (not a good idea in Iceland) or get to places later. Anyway, let\u0026rsquo;s stop the rant.\nAfter leaving our guesthouse, we went to get some fuel and buy some souvenirs. We got some nice key-chains made with treated fish \u0026ldquo;skin\u0026rdquo; (cod, salmon and others) and our usual dose of sk√Ωr for the trip.\nBl√∂ndu√≥s\u0026rsquo; textile museum, Borgarvirki\u0026rsquo;s fortress Our first stop was Bl√∂ndu√≥s, where we visited the textile museum. The entry fee was 600 ISK, and it was somewhat interesting. If you happen to pass around there it is worth a look just for the old clothes you can see.\n\nI was impressed with this plaque in Borgarvirki.\nIt is an usual view around Iceland, signaling places\nNext came Borgarvirki, which is supposedly a natural fortress, used by local settlers to defend the area. If it was really used or just an odd-shaped hill is still unsettled, but the views from the place are just huge. As a defense point it looks really good. The road up the hill is quite rough, beware.\n \nDriving in Iceland can be tricky\nHv√≠tserkur The Hv√≠tserkur is an odd-shaped rock formation, 15 meters from the shore. It looks really interesting, and it is one of the most visited things in this area. There are two ways down the beach: to the right of the parking zone, slowly and going pretty far in an almost flat walking path or an uneven quite steep path just below the viewing area.\n  \nWe liked this formation\nWe recommend the steep path, after our experience with the flat one. This is the first place we had Hitchcock like moments with the local birds, Arctic Terns, known as kr√≠a in Icelandic. The national bird (depicted in postage stamps), loved by the locals for its protective behavior is an animal we hate. Kr√≠a lay their eggs in flat areas, with a preference for the sides of pathways. They are highly territorial, and will attack anything that goes close to their nests\u0026hellip; Or any other bird\u0026rsquo;s nest in the area. And indeed, they attack. First they scream around your head, 6 or 7 meters above, two or three times trying to get you away from their nests. If you don\u0026rsquo;t, they\u0026rsquo;ll dive to your head. They have hard beaks.\n \nWe had to run for our heads\u0026rsquo; sake a few moments before reaching the beach in front of the Hv√≠tserkur, where we collected rocks and seashells. Facing the prospect of more attacks, we climbed the wall in front of it. An interesting feature is the small waterfall in front of the rock, beside the downward path. It was probably due to the recent rain.\nOn The Way to Holmav√≠k: Seal Watching On our way to our guesthouse we stopped in an old, abandoned farm set as a seal watching area. Really wonderful! Also full of kr√≠a\u0026hellip; We saw how a careless Frenchman was hit in the head by some birds.\n \nIt was also damn cold, and we were lucky to have a hot chocolate there. It was not expensive (it wasn\u0026rsquo;t incredibly good either) but made us feel warmer.\nOur guesthouse was in Drangsnes, and we had some problems locating it: it is named Malarhorn, but the signs read Malarcafe. The road was odd: we had lots of fog for a long while, and then suddenly everything was clear as soon as we reached the seashore.\n\nFunny rock decoration in Holmav√≠k\nLet\u0026rsquo;s rest, tomorrow will be a long day\u0026hellip;\n¬´ Road Trip Through Iceland: Day 9 - Go√∞afoss and H√≥lar\n¬ª Road Trip Through Iceland: Day 11 ‚Äì A fjord day and visit to √çsafj√∂r√∞ur\n","permalink":"https://mostlymaths.net/2011/06/road-trip-through-iceland-day-10.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 10 ‚Äì Hv√≠tserkur"},{"categories":null,"contents":"\nLast Tuesday I presented a talk in a congress, here in Barcelona. This post is not about this talk, but about the Mac remote and Apple\u0026rsquo;s \u0026ldquo;problems\u0026rdquo;. If you are interested, you can download the talk here, anyway.\nAs the congress was local, instead of using my netbook for the talk I brought my MacBook. Instead of using arrow keys, I could use these fancy Apple remotes. Good plan\u0026hellip; at the moment. I asked a colleague for his Apple remote (my girlfriend had hers in her office, and I could not get it soon enough)\u0026hellip; And after lunch, before my talk I checked if it worked.\nWell, as you already know, I use LaTeX and Beamer to create my presentations\u0026hellip; And generate as output a PDF file. Which I then open with Preview, a native Mac OS app. And when I tried to use Apple Remote, it didn\u0026rsquo;t pass the pages. Why? Well, Apple only supports a handful of applications, the most relevant being Keynote and Front Row. And not Preview. I was shocked.\nAs I expected, there was a free solution to this problem, but at first it looked troublesome. I found a program named iRedLite. The \u0026ldquo;Lite\u0026rdquo; part scared me: would I be only able to pass 30 pages and then need to enter my registration?\nTurns out it is \u0026ldquo;Lite\u0026rdquo; because there is a Pro version which can interact with a USB infra-red emitter to control your TV and other gadgets. It works wonderful, no problems. If you ever need to give a PDF presentation with a Mac, give it a try.\nI had another solution which hopefully I didn\u0026rsquo;t have to use: a free application for iPhone, RemotePad and RemotePad server in my Mac (there is also a Linux version). But passing pages is a little cumbersome, needing to flip+scroll in a very small screen. Far better to use the remote with iRedLite!\n","permalink":"https://mostlymaths.net/2011/06/using-apple-remote-with-mac-os-preview.html/","tags":["Mac","LaTeX","Maths"],"title":"Using an Apple Remote with Mac OS Preview"},{"categories":null,"contents":" \nH√≥lar\u0026rsquo;s church, if I\u0026rsquo;m not wrong\nI\u0026rsquo;ve been procrastinating a lot with this post. Although it may not look like this from the pictures (or even the text), this was one of the worse days in our trip. Uneventful, visiting not-so-interesting places and with a lousy guest house at the end of the day. Let\u0026rsquo;s see if you find if interesting! If not, the next post will be, don\u0026rsquo;t worry.\nThe day started in Husav√≠k, with a wonderful breakfast: toasts and marinated herring. I just love marinated herring since I was in Germany\u0026hellip; But the best comes from Denmark, mind you. After a shower and shave we went for some local shopping. We bought jam for our friends in Barcelona. After this chores, we wanted to visit the Phallological Museum in Husav√≠k. We couldn\u0026rsquo;t\u0026hellip; as usual in Iceland, most museums and shops start working at 10 or 11\u0026hellip; The museum started at 12. D\u0026rsquo;oh!\n\nYes, it\u0026rsquo;s for real!\nIt should have been an interesting sight: it holds 272 specimens of embalmed or dried penises.. trying to get a specimen from every mammal in Iceland. When we were there, human was lacking but 12th April 2011, an Icelander donor died and completed this.\nTo Akureyri and Go√∞afoss From Husav√≠k we headed to Akureyri, the capital of the North of Iceland. We missed the turn to the city\u0026hellip; and just went straight to Go√∞afoss, the God\u0026rsquo;s waterfall. A very nice waterfall indeed.\nThey were named Go√∞afoss around AD1100, when the Al√æing (the Icelandic gathering of leaders and chieftains) decided to convert Iceland into a Christian nation. The lawmaker at the time decided to convert, but allowing current pagan worshippers to keep doing so in the privacy of their houses. Upon returning to his home after the gathering, he picked his pagan idols and threw them down the falls, hence God\u0026rsquo;s waterfalls.\n \nGo√∞afoss, an amazing name\nAfter seeing this wonderful view, we went to the city. Bought some things in a bookshop and had lunch. We also stole some free wifi from Caf√© Akureyri to check our mails and twitter accounts. An interesting sight: Akureyri\u0026rsquo;s traffic lights were shaped like hearts, while we were there.\nThe rest of the day Uneventful\u0026hellip; We drove along our marked route. The most interesting part\u0026hellip; we drove over a long-beeked bird beside an hydroelectric station. This kind of birds nest by the sides of the road, and have a tendency of starting to fly just when you pass them. You\u0026rsquo;ll likely run over one or two.\n\nTunnel from Dalv√≠k to √ìlafsfj√∂r√∞ur, 3400m!\nHeaded to H√≥fsos, where an array of Scandinavian style houses sit\u0026hellip; but it was too foggy, after stopping for a few minutes we kept on driving to our next landmark, H√≥lar. H√≥lar is a religious centre, with a \u0026ldquo;big\u0026rdquo; church. I must confess we didn\u0026rsquo;t find it so impressive, and would not have bothered if we knew beforehand.\n\nH√≥lar\u0026rsquo;s church\nNext stop was Nyb√¶r, a turf farm along the road. Kept on driving until we reached Sau√∞arkr√≥kur, where we ate at √ìlafsh√∫s. Good supper! We recommend the place. Our final stop for the day was Glaumb√¶r, another restored turf farm. It wasn\u0026rsquo;t that great, and it was pretty late already.\n \nN√Ωb√¶r, if I\u0026rsquo;m not mistaken\u0026hellip; Didn\u0026rsquo;t tag my pictures this time. May be\nGlaumb√¶r\nOur final stop, guest house at Flugum√Ωri. The hosts were hosting (no pun intended) their daughter\u0026rsquo;s birthday. We were to sleep in what looked like the servants room (there were none, mind you), beside the garage and close to the stable. All our bed lining was old, we did not have window blinds\u0026hellip; Not a very welcoming place, the worse guest house of our trip.\nLet\u0026rsquo;s see what tomorrow has to offer\u0026hellip;\n¬´ Road Trip Through Iceland: Day 8 - From M√Ωvatn to Husavik visiting √Åsbyrgi and Dettifoss\n¬ª Road Trip Through Iceland: Day 10 ‚Äì Hv√≠tserkur\n","permalink":"https://mostlymaths.net/2011/06/road-trip-through-iceland-day-9-goafoss.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 9 - Go√∞afoss and H√≥lar"},{"categories":null,"contents":"\nFrom my cheap dictionary\nI first heard of spaced repetition software around 5 or 6 years ago, while browsing around the net. Read about it, found it unappealing and moved on. You know, there are times when you learn about something and dismiss it as not necessary\u0026hellip; and after a while you are lead into it again to find it is wonderful. This is one of such instances.\nI have only written two highly visited posts about languages: The Language Switch and How to Train Your Brain to Flip to a New Language (in Bitesize Irish Gaelic, it also appeared in Hacker Monthly, April 2011) and a lot of the commenters suggested me using Anki, Mnemosyne or Supermemo. Three instances of the same theory, spaced repetition paired with flashcard based language learning. So far, so good. Let\u0026rsquo;s check it someday.\nThe underlying principle behind spaced repetition is easy. Once you learn something, you don\u0026rsquo;t need to refresh this knowledge for a fixed time span. If the knowledge was easy (like the fact that b√≥k is book in Icelandic) you only need to review it every once in a while, at most. On the other hand, if you have very hard to fix knowledge (like knowing that h√∫st√∂kuma√∞ur is squatter), you need to be reminded of it more often. This is where spaced repetition software comes into the playfield.\nYou pick a deck of virtual flashcards you want to learn and gauge the quality of your answers (from \u0026ldquo;Don\u0026rsquo;t know\u0026rdquo; to \u0026ldquo;Too easy\u0026rdquo;). The algorithm now plays with this quality. Based on it, you won\u0026rsquo;t be shown again these cards until enough time has passed. This has a twofold effect. On one hand, you don\u0026rsquo;t need to review everything every day, you only need to review what you are more likely to have forgotten. On the other hand, even well-known knowledge gets tested at some point. A lot of people say it works wonders to learn languages, and I decided to give it a try.\nI decided to use Anki, basically because it is free and has cross-platform solutions in addition to an online syncing feature. So far I\u0026rsquo;m more than happy with my learning of a corpus of 1500 Icelandic words, and even more when I discovered I could get it to work (somehow) in my iPod Touch.\nThere is a native Anki iPhone/iPad application (affiliate link), costing 20‚Ç¨, which I found a little on the high side, but in addition to being able to use (for free) the online version if you have an available connection you have another free option. If your iDevice is jailbroken, you can install AnkiMini, which runs a local webserver running Anki on your device. Just point your Mobile Safari to localhost:8080 and you can keep on learning, being able to sync to your desktop too. Just wonderful.\nI will probably end up paying the paid version (reviews I\u0026rsquo;ve read say it is even better than the desktop version, which is very good), but so far I\u0026rsquo;m happy with this solution. Only 1300 words left to \u0026ldquo;see\u0026rdquo;.\nI\u0026rsquo;m also implementing my own version of the SuperMemo algorithm for fun, to use in my Ben Nanonote. In a few weeks I\u0026rsquo;ll try to post an update on how it is going.\nIf you want to keep reading:\n Learn to Remember Everything: The Memory Palace Technique The Language Switch How to Train Your Brain to Flip to a New Language  ParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2011/05/anki-and-language-learning-spaced.html/","tags":["Improve Yourself","iPod","Languages","iPad","Iceland"],"title":"Anki and Language Learning: The Spaced Repetition System"},{"categories":null,"contents":" \nPicture courtesy of Shanidar\nDo you want to have very good memory? I do, in fact I\u0026rsquo;ve been interested in it since my school days. There are some techniques that exploit your brain\u0026rsquo;s natural power, and the one I\u0026rsquo;m covering here is the memory palace technique.\nI have already written about the memory palace memorisation technique (go and read the previous post if you don\u0026rsquo;t know what I\u0026rsquo;m talking about), but I did not cover a very important point there: Where can you find memory palaces to use in your memorisation?\nWhy we may need a very big array of palaces Not everyone has the same memorisation needs, as not everyone needs the same computing power. Some people are fine with netbooks, and some people need big multi-chip clusters. In memorisation, the same applies. Some memory masters try to memorise pi to very big lengths, a feat that requires a huge number of multi-room memory palaces perfectly stacked.\nObviously you may not need to memorise pi, but maybe you enjoy memorising poems or history facts and need more than the occasional shopping list enabled memory palaces. Let\u0026rsquo;s see how we can enhance our mental landscape.\nWhat to do with the \u0026lsquo;palaces\u0026rsquo; you will find In this post I\u0026rsquo;ll give you a way to find suitable locations to use as memory palaces. What you need to do is write the list down together with a brief description and a list of rooms. If you are artistically inclined, try to draw a plan (or if you are very artistically inclined, draw the interior of the rooms!) of the buildings or routes, as this will burn them more clearly in your brain. At the very least you should write down the palace and the set of rooms.\nWarming up: your home and known towns As you may remember from the memory palace memorisation technique post (if you don\u0026rsquo;t, maybe you should put it in a memory palace?) a memory palace does not need to be a house or palace: it can be anything that has some spatially ordered qualities. For example, a journey through a known town (like from your house to your office) or the stops in your underground route.\nThe first set of memory palaces you can create is the most basic and the one you should be using since the beginning. Your current home, the house were you were raised and the routes from these to your work and your school/highschool. These are the basic blocks that you should be using for your shopping lists, to-do list and similar very frequent tasks.\nThese are the basics mostly because you don\u0026rsquo;t need any effort to picture them clearly in your mind, you don\u0026rsquo;t even need to write them down (but you should, just to see how many palaces you have).\nGetting deeper: Offices and frequent routes The next source of good memory palaces are also in your day-to-day habits. Your office (or offices, or workplace), covering also your boss\u0026rsquo; office and co-workers den. Add to this list your walking routes around all of these, which should be between 3 and 15 memory palaces.\nNow think about your frequent routes: from your house to your parents\u0026rsquo; place, from your house to the bakery and so on. The kind of walks you do weekly (or more frequent) but not the standard work commute.\nThese are pretty basic, too: they are always in your radar, as you are seeing them frequently.\nGet exotic: holidays, foreign cities, travel routes The next set is a little more \u0026lsquo;foreign\u0026rsquo;. If you have been to some foreign city on holiday, you can use it as a memory palace. It will be a little harder to visualise it at first, but just take a look at your pictures or browse Google images for it. I can picture pretty easily Reykjavik (or at least some of its places), but I can use a lot of place-makers in Iceland following the route of our road trip around Iceland. You can do as well with your past holidays: in addition to being a good memory palace, the fond memories you may have will improve your mood.\nThis set is a little harder, but with a little help from your picture books and Google images you can use the wonderful landscapes you\u0026rsquo;ve been as memorisation aides.\nWant it all: friends and relatives houses You can now get a huge boost to the number of palaces by adding your current friends and relatives homes. Here I should add a recommendation: if you can\u0026rsquo;t visualise properly some room of a friend or relative\u0026hellip; It is no big deal. Just leave it empty or add some plain furniture. If you ever get back to that place, update your memory palace. The only point you need is a clear mental image, not a clear correct mental image. By adding these memory palaces you may be able to add between 10 and 30 (or even 40!) memory palaces to your list. Sounds like a lot, doesn\u0026rsquo;t it?\nYou have to be a little more careful with these, as visiting a friend and discovering the plan is completely different can disrupt your memory for that particular palace. In practice, if you have been to a house and visited all rooms, you should be able to visualise them without any problems. If you have not been to a particular room, you can choose between creating your own picture or just keeping it closed. If you are sure you won\u0026rsquo;t enter it ever, create your own: there will be no problems!\nGoing overkill: childhood homes and \u0026ldquo;odd places\u0026rdquo; If you want to get all the lot of memory palaces, this is ultimate place. Time-travel to your childhood, and pick all your childhood friends homes. As I advised earlier, if you can\u0026rsquo;t remember something properly, fill it as you wish: this last category is for homes you won\u0026rsquo;t be visiting anytime soon (and if you do, update as needed). Add to this list your forgotten homes like ex\u0026rsquo;s homes and ex-relatives-in-law homes, related routes, previous work routes and the kind of palaces and routes that would have applied to the previous categories for your past-self.\nAnd finally, the odd buildings list. Like your local church or museum, a beloved place in your hometown, special places and similar. Whatever you can visualise you can use as a memory palace, you only need to \u0026lsquo;think about it\u0026rsquo;.\nFor this list you can use the suggestions from the previous with respect to long-forgotten rooms.\nFinishing Now you should have a pretty long list of memory palaces, with a description of the rooms. And I bet this is a pretty long list! What can you do with it?\nWell, a very important task is to get used to all these places again. Pick the list and carry it with you anywhere, and for a week or two just take it out occasionally and read it quickly. After that time, trim the descriptions and test your recall of the places. If some of them are too hard for you to visualise, just remove them from the list. There is no point in wasting effort when your list should be long enough already.\nWhen you are profficient in traveling your new memory palaces, you just need to use them. To memorise what? Well, this is up to you now!\nIf you have enjoyed this one you may also like:\n Learn To Remember Everything: The Memory Palace Memorisation Technique Remembering Facts: Using Mental Associative Chains   And if you want to read some books on memory techniques:\n Moonwalking with Einstein: The Art and Science of Remembering Everything¬†(Joshua Foer) How to Develop a Brilliant Memory Week by Week: 52 Proven Ways to Enhance Your Memory Skills¬†(Dominic O\u0026rsquo;Brian) Quantum Memory Power: Learn to Improve Your Memory with the World Memory Champion!¬†(Dominic O\u0026rsquo;Brian) Maximize Your Memory¬†(Jonathan Hancock)  ","permalink":"https://mostlymaths.net/2011/05/building-your-memory-palace-collection.html/","tags":["Improve Yourself","Memory","How-to"],"title":"Building Your Memory Palace Collection"},{"categories":null,"contents":" \nFrom my cheap dictionary\nLast February I set myself a goal for these next three months (February, March and April): to learn Gaelic. The time is up and I must confess I have not made a lot of advances. The reasons are plenty, and most are shared with whoever wants to learn a new language. They are even harder for people learning a few languages at once, the kind of language nerds that have way too many Teach Yourself books on languages. I also have some solutions to approach the problems\u0026hellip; Now I just need to apply them wisely.\nLack of time As you may remember, I\u0026rsquo;m doing my PhD in Mathematics. I\u0026rsquo;m close to its end (or at least it looks so), and this means it eats even more time than before. In addition to this, I write regularly (or semi-regularly) here in mostlymaths.net and 100perZen.net, I\u0026rsquo;m learning to play guitar and have picked drawing (to have some more non-thinking time) again. I\u0026rsquo;m also attending a course on how to make your own shoes (yes, really). And together with Laia we are opening an Etsy shop. All quite time consuming!\nLearning a new language can be split in really small steps: one word or declension a day, even. But I\u0026rsquo;m not hard-wired into doing so little with languages, and as such I try to do at least half a lesson a day, when time permits. But time never does!\nSolution: I\u0026rsquo;m currently trying to use memorisation techniques (like memory palaces and mental associative chains) in my language learning experience. It is not easy, as memory palaces are not very well suited for language learning, and abstract data (like foreign languages) are hard to code in its images. But I\u0026rsquo;m still trying. This would mean that if I could find one or two hours in a week, I could advance steadily. A forthcoming post will explore this with more detail as soon as I have more experience with it.\nMild lack of motivation My trip into Gaelic came from a guest post in Bitesize Irish Gaelic and several emails I exchanged with Eoin, who runs the site with his wife Sa≈°a. I got hooked into the language and the site, and for a while was very excited by the prospect of learning a new (and quite unknown) language.\nThen I started to realise how much time a language needs. It\u0026rsquo;s not that I didn\u0026rsquo;t know before, its just that I was trying to learn two languages at once. This is usually a recipe for failure, unless the languages are very close. A few days ago I picked again my Icelandic book and I realised I had been telling myself to learn Irish without wanting to do it in that precise moment: I\u0026rsquo;m currently craving Nordic languages. When I opened my Swedish book it was like Hey, how fun is this!, the same went with Norwegian.\nSolution: Concentrate on Icelandic for now. After all, one of my New Year resolutions is to learn enough Icelandic to read Egil\u0026rsquo;s Saga (and The Little Prince before it). Let\u0026rsquo;s do it, and then I can go for another language branch with Gaelic.\nThere\u0026rsquo;s always something else to do On my commute, reading RSS feeds or drawing. At home, blogging, drawing, laundry, chores. In my office, thesis.\nIf there is always something else to do that has a biggest lead (like getting more visits to my blog, or having clean clothes), it is very hard to do something \u0026ldquo;just for fun\u0026rdquo; in our free time, if it is something that needs a big time expenditure.\nSolution: Fixed schedule. Set a specific moment in the day or schedule a few hours in the week for your language learning, just like if you were in a classroom. Two hours in a week, if bearable can do wonders. You can split it in two lessons per hour, or one lesson and one hour of reading with a dictionary, or one hour of online chatting. Do it enjoyable!\nWhat are your language learning problems? And your solutions for my problems?\nIf you enjoyed this post, please share it with your friends.\nParseList(ScrambleList(Relateds(Productivity)),1)\n","permalink":"https://mostlymaths.net/2011/05/focus-in-language-learning-doing-two.html/","tags":["Memory","Languages"],"title":"Focus in Language Learning: Doing Two Languages at Once Is a Bad Idea"},{"categories":null,"contents":" \nNo more gas ahead\nLeaving M√Ωvatn was a little dull. We saw a pair of handcraft stores that looked really interesting\u0026hellip; And they were closed until 11! No way we could spend so much time waiting. We fueled, bought vanillated skyr for the route and took the road to Dettifoss. This is one of those places where you definitely have to fuel, there is no other gas station in 130km.\nDettifoss along the way to √Åsbyrgi On our way to Dettifoss we passed close to the Apolo 11 geological training zone, a lunar-like desert where Armstrong and Aldrin buzzed along before doing the real deal.\n \n \nDettifoss and the Dettifoss canyon area\nWhat can I say about Dettifoss? Well, it wasn\u0026rsquo;t that impressive after Gullfoss and that beautiful after Svartifoss. It was a good sight nevertheless, and it was just along the way to the √Åsbyrgi. The road before the watching area was a little rough, red volcanic rock. And when we arrived we found a red Volkswagen Beetle from the 70s\u0026hellip; Coming from Germany!\n  \nThe Red Beetle, the Dettifoss canyon with some odd blue water and Hafragilsfoss from a good point of view\nWe also stopped along the way in Hafragilsfoss, where we collected red stones and bluish lava rocks.\n√Åsbyrgi The √Åsbyrgi is according to folk tales where Odin\u0026rsquo;s eight-legged horse, Sleipnir set foot. Seen from the side it reminds me of the Flatiron building in New York.\nIt is a very odd geological formation, as we learned in √Åsbyrgi\u0026rsquo;s information centre. It was caused by a massively strong flood caused by the eruption of a volcano, melting a glacier, which swept away everything that was not strong enough to withstand its force.\n \n \nDifferent view from the √Åsbyrgi: Side, front, afar and its whereabouts\nWe made some instant coffee and had a walk around the zone, which is full of trees (birch, fir and pine). I don\u0026rsquo;t remember if I had said this before, but Iceland has almost no big trees, and in fact this is one of the first places we saw some except at cities. It turns out that before the Viking discovery the island was full of trees\u0026hellip; Which were used as fuel and supplies to build ships and homes. The big deforestation removed every tree, and the climate didn\u0026rsquo;t help them grow again: trees here grow at a very slow rate.\nHusavik: Whalewatching takes a \u0026ldquo;whale\u0026rdquo; We left √Åsbyrgi and tried to collect some seashells in places that our road map said there were plenty, but didn\u0026rsquo;t have luck: the road was like 20 or 30 meters from the beach, and there was no way to pass except crossing some farm. Even the way to a museum with interesting views was closed by a fence! We had to drive backwards for quite a while and then maneuver to get back to the road.\nIn Husavik we had almost only one thing to do: go whale watching! We had a 7% discount we found in the information centre in √Åsbyrgi and went straight to buy it, it was something like 14000 ISK. They told us the sea was a little brave and (as is usual for whale watching) gave us seasickness pills to take before the trip. They also told us to get some heavy jackets: I went to buy a 66¬∫ North black jacket for 16000 ISK, it is an awesome jacket: thin but very warm and weights almost nothing. It has been what I wore all this winter here in Spain.\n  \nThe dock from Husavik, people before puking and a humpback whale\u0026rsquo;s tail\nIt was really freezing at sea, and as they said, the sea was brave. We catched a humpback whale which we saw several times, also a lot of puffins flying around and some dolphins guided us back to port. An interesting fact: puffins have very short wings and thus don\u0026rsquo;t have enough power to get out of sea. They stay in the water riding the waves until one lifts them up high enough to jump and fly.\nOn our way back to port I almost felt asleep, even with the rough sea. Something like 20 minutes before docking, they gave us hot chocolate (which was awesome after the freezing wind) and a cinnamon roll. I ate two, mine and Laia\u0026rsquo;s, she looked a little pale and green. If you ever go whale watching and they say the sea is a little rough, don\u0026rsquo;t go. You\u0026rsquo;ll see at least 10 times more people puking from board to starboard than whales or even dolphins.\nBack to our guest house and to sleep, we were wasted: it was already tomorrow and we were soaked from head to toes. We needed a shower\u0026hellip; Even less time to sleep!\nToday we drove for around 170km\u0026hellip; Or not.\n¬´ Road Trip Through Iceland: Day 7 - From Egilssta√∞ir to M√Ωvatn passing through Hverir\n¬ª Road Trip Through Iceland: Day 9 - Go√∞afoss and H√≥lar\n","permalink":"https://mostlymaths.net/2011/04/road-trip-through-iceland-day-8-from.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 8 - From M√Ωvatn to Husavik visiting √Åsbyrgi and Dettifoss"},{"categories":null,"contents":" \nThe Myvatn area\nThis weeks post in the Iceland road trip series comes a little late: Saturday was a relaxation day, and Sunday I posted about how relaxing Saturday felt. As such, I didn\u0026rsquo;t put the time to typeset this post until Friday was looming! I think I got a little out of hand adding pictures to this post\u0026hellip; But the M√Ωvatn area is impressive and I wanted to show it here.\nShopping in Egilssta√∞ir As usual, we got up pretty early, had a good breakfast and headed for the next gas station, which was in front of a local supermarket. Laia got into a wool shopping spree.. Now I have a very nice scarf and half another one in the works. I also bought dried fish, which is (supposedly) a common treat while on the road. It tastes ok, I would have liked it more salty.\n\nClose to the supermarket we found a small and cute handcraft store, where we bought several souvenirs for the family and ourselves, made of fish scales (I have a very nice lox keychain) and two leather satchels. A very good place.\nOn our way to M√Ωvatn: S√¶nautasel and M√∂dru√∞alur According to the road map prepared by the lovely people at Nordic Visitor, we should stop midway to visit S√¶nautasel. S√¶nautasel is an abandoned farm, rebuilt in 1992. It sprouted into fame with Halld√≥r Laxness\u0026rsquo; (Icelandic writer, Nobel prize in 1955 ‚Äì remember this kind of things by reading How to remember facts: associative mental chains) novel A midwinter night on J√∂kuldalshei√∞i Moor. When we arrived, it was closed under reforms. We walked around a little, enjoying the fact that it was a mildly sunny day and took the road again.\n  \nS√¶nautasel and the way between it and M√∂dru√∞alur\nOur next stop was M√∂dru√∞alur. A small settlement in the middle of nowhere, has a coffee place and a church built by a local farmer (J√≥n Stef√°nsson) in memory of his wife. He is also known for playing Bach in the church\u0026rsquo;s organ\u0026hellip; backwards. By the way, have you kept an account of how many coffee places I have talked about?\n  \nLeft: Lone sheep in the desert between S√¶nautasel and Modru√∞alur\nCentre: It is not Mars, it is Iceland\nRight: Modru√∞alur\u0026rsquo;s church\nHverir A small gateway to hell (in Icelandic, hell is viti), Hverir is a must-see place, with hot boiling mud and fume escapes, it looks taken from a B-movie showing an alien planet. But it is not. Cover your mouth, the smell can be pretty strong depending on the wind.\n \n \nViews of the boiling mud in Hverir\nWe arrived to M√Ωvatn shortly, and were impressed again by how open Icelanders are. We arrived to our guesthouse and found the door open. No-one inside, we got out again to get the phone number from our papers, still lying inside the car. Then we saw a paper attached to the front door: Mr. Berenguel, your room is Number 4 and you\u0026rsquo;ll find the keys in the door. Amazing!\nHverfjall Hverfjall is a 312 metres high roundish crater, around 1 km in diameter. And a perfect hiking place. There is an easy trail leading you to the top of the crater and you can then circle it. We did not circle it because it was a windy day and we still wanted to walk a little around M√Ωvatn. What we did was signing the guest book\u0026hellip; on top of the crater! Unmissable and unforgettable.\n    \n \nWe catched a rainbow landing in Hverfjall. And got amazing views of Skutusta√∞ir\u0026rsquo;s pseudo-craters and the whole lake.\nM√Ωvatn and the pseudo-craters of Skutusta√∞ir M√Ωvatn means \u0026ldquo;lake of the flies\u0026rdquo; and as such, it is choking full of tiny flying insects. They don\u0026rsquo;t bite (if I remember correctly, there are no blood sucking insects in Iceland), but they get in your eyes, ears and everywhere. I recommend that you buy somewhere a net to put in your head, or at least take a big translucent handkerchief. You will need it if you get close to the lake.\n \nCircling the lake you get views on odd-shaped hills, called pseudo-craters. They look like craters\u0026hellip; but they are not. They were formed by water trapped by overflowing magma, when the water passed boiling point, the traps exploded forming craters. As a crater is only so when it is formed by volcanic flow or meteorite impact\u0026hellip; they are called pseudo-craters.\nM√Ωvatn Nature Baths Do you remember that we could not make it to the Blue Lagoon (Bla√° L√≥ni√∞) near Reykjavik? Well, Jose back in Hoffell told us not to despair and rush the last day, and go to M√Ωvatn Nature Baths instead. In broad terms, it is exactly the same. The escape water of a geothermal power station collect a lot of sillica and an odd-blue alga that it is pretty good for your skin. And you can go there and enjoy a hot smooth bath in the middle of a volcanic desert. It is truly an amazing experience, I don\u0026rsquo;t know about the Blue Lagoon, but we can truly recommend M√Ωvatn Nature Baths. The visit is only 2500 ISK.\n\nAnd today\u0026hellip;. Record day if I\u0026rsquo;m not mistaken: 1541 km! Arnor Hei√∞ar Sigur√∞sson pointed my mistake here\u0026hellip; This distance is the same as Reykjavik-Egilssta√∞ir-Reykjavik. This 1541 are probably for the previous 2-3 days, we forgot to re-start the kilometer counter.\n¬´ Road Trip Through Iceland: Day 6 - East Fjords, Egilssta√∞ir and Borgarfj√∂r√∞ur\n¬ª Road Trip Through Iceland: Day 8 - From M√Ωvatn to Husavik visiting √Åsbyrgi and Dettifoss\n","permalink":"https://mostlymaths.net/2011/04/road-trip-through-iceland-day-7-from.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 7 - From Egilssta√∞ir to M√Ωvatn passing through Hverir"},{"categories":null,"contents":" \nYesterday I did nothing. Absolutely, really nothing.\nAnd it felt great. Before yesterday, my usual weekend was filled of what I thought was doing nothing, but far from it. I wrote posts, programmed, read a lot online and caught up with what was going in the A-List Blogger Club forum. Did some laundry, folded the clothes. All this (well, except for the laundry part) under the assumption that doing what you love does not tire you. Utterly wrong assumption.\nFor a long time I\u0026rsquo;ve been constantly tired. Not extremely tired, just that every day I was like \u0026ldquo;taking a nap would be awesome\u0026rdquo;, and on Fridays it was more like \u0026ldquo;taking a 3 hour nap would be terrific\u0026rdquo;. Sounds like sleep deprivation, but it is not. Last time I remember not being tired was while we were doing our road trip around Iceland, and there I slept far, far less and was energised all around. What\u0026rsquo;s going on?\nI use to live on leased time. I got tired one day, and the next I kept on and kept on, and did the same in the weekend. All year around. How could I not be tired?\nPace yourself Last Wednesday I was lucky to catch a tweet by Michael Nobbs:\n\nWas interested, downloaded it (you can do it here) and enjoyed it a lot. Later that day I picked a pen I had bought something like 6 months ago (Sakura Pigma Brush Pen) and an old cheap Moleskine and started drawing. Just what I had in front of me. On Thursday I bought Michael\u0026rsquo;s Sustainable Creativity: Advice on how to maintain a creative life for people with low energy or limited time (or both!). I found it so interesting I became an affiliate, so this is an affiliate link. The sub-title is interesting: Michael was diagnosed ME/CFS in the late 90\u0026rsquo;s, and since then he has been forced to find his pace\u0026hellip; Which is something that I need to do too, even if I\u0026rsquo;m not ill.\nReally doing nothing \nMy rising energy is likely to sprout from several causes.\nMeditating daily: 10 minutes morning and night. Preparing for the day and cooling from the day. Since I started meditating back in January, I\u0026rsquo;ve felt the difference in concentration and focus.\nEating more nuts and cereals: my usual breakfast has ranged from bread with butter or a pair of croissants and a caff√® latte. Now I\u0026rsquo;m eating muesli and plenty of nuts and seeds (I love nuts)\u0026hellip; I\u0026rsquo;m a little hungrier in the morning, but this should be better for my fitness.\nDrawing freely: from reading said books, it is just mindfulness in action. Like practising mindfully with my guitar. Relax and let it flow.\nLast Saturday, I changed my weekend habits. There was no trigger, I did just what I felt like doing. I read a little on my iPad. I drew. I did the laundry and folded clothes. I wrote a to-do list of things I have pending, without any intention of doing them any time soon. I sketched the next post of the Iceland road trip, giving me just 20 minutes for it. I drew a little more and watched a little the TV. Read a little still.\nIt doesn\u0026rsquo;t look that different, doesn\u0026rsquo;t it? So, what is really the difference? Expectations.\nI did not expect to do nothing. As such, folding clothes and doing the laundry were not rushing and hated tasks, but just a moment to just fold clothes and listen to Bill Evans. Reading was not reading to extract ideas and use them, nor to answer questions or get answers to question, but just for fun. Recovering this fun in idleness was amazing. Just like being allowed to breathe after 3 minutes underwater.\nThe fallacy of following your passion A lot of people (mostly bloggers) out there say that if you follow your passion, you don\u0026rsquo;t get tired. And I bet you may agree, I\u0026rsquo;ve done so. Who has not spent 3 hours coding without even realising what he was doing? Who has not sat for just finishing the proof of a lemma and ended with 3 more answers and 6 more questions?\nThe problem is that your passion is not evenly distributed in enjoyment and tiredness.\n You won\u0026rsquo;t get tired of coding once you get in the flow, but how do you feel about documenting the code?\nYou won\u0026rsquo;t get tired of proving theorems, but how do you feel about writing it in LaTeX?\n I love the tasks above, and I love writing too. But writing for a blog is just the tip of the iceberg. I like that tip, but the rest is not so fun. Typesetting, proofreading and general nut-and-bolts stuff is not so fun. And then, I got tired: I planned my weekends to work in my passion, expecting to not get tired, instead I got tired because I only devoted a little time to my passion and the rest to the boring stuff.\nRelax. Do what you love, but expect no results. Expect not to finish in one sitting. Expect to fail, expect to not expect. And take it easy.\nIf you found this post interesting, please share it with your friends. Thanks!\nThis post has several links which are affiliate links. I would make a little money if you boght from them, do only if you think they are worthwhile for you!\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2011/04/doing-really-nothing.html/","tags":["Thoughts","Drawing","Productivity"],"title":"Doing (Really) Nothing"},{"categories":null,"contents":" \nAn image can help your memory\u0026hellip;\nFor how long?\nThis is a method I use to complement the memory palace technique to remember facts, either historical, about people or any other subject. It is pretty simple and follows the same principles as the memory palace: you need to make up bizarre images. To memorise facts we just need to attach keys to each fact, and link them to the subject or person we are considering. Forming a chain of images. Simple, huh? Let\u0026rsquo;s try!\nAs an example in this post we will work with a person facts. Consider the bio snippet of Icelandic writer Halld√≥r Laxness from Wikipedia:\n Halld√≥r Kiljan Laxness [Ààhaltour Ààc ∞…™ljan Ààlaxsn…õs] (born Halld√≥r Gu√∞j√≥nsson) (April 23, 1902 ‚Äì February 8, 1998) was a twentieth-century Icelandic novelist, poet, and essayist; author of Independent People, The Atom Station, and Iceland\u0026rsquo;s Bell. He won the Nobel Prize in Literature in 1955.\n We have a few numbers and books to relate with him. I assume implicitly that I will always remember his nationality (something which may not be true in all cases) but you can treat nationality in the same way that we will treat book names. First, we need some kind of placeholder. If you have read some of his books you could use some place or city appearing in them. As I know (and even saw) he had a white \u0026lsquo;69 vintage Jaguar, this will be my placeholder. Let\u0026rsquo;s start with the dates.\nRemembering numbers There are several techniques you can use to remember numbers and years. Usually, in the hard-core memorisation books it is suggested to use something called the major system, where you assign to each number a letter or a few letters, and then you form words with them. This word will be the key to decode the numbers. It is comprised of the following number-sound combinations:\nNumber\nSounds\nMemory tip\n0\ns, z, soft c\nz is the first letter of zero\n1\nd, t, th\nd and t have one downstroke\n2\nn\ntwo downstrokes\n3\nm\n3 downstrokes\n4\nr\nlast letter of four\n5\nl\nL is the roman 50\n6\nj, sh, soft ch..\nscript j looks like upside 6\n7\nk, hard c, hard g, q\ncapital script K looks like a pair of 7\u0026rsquo;s\n8\nv, f\nthink of a script f (which has two loops)\n9\nb, p\np is the mirror image of a 9, b is a rotation of 9\n-\nvowels, w, h, y\nWHY+vocals: use them anywhere to fill the gaps and form words\nBased on the description from Your Memory : How It Works and How to Improve It (Amazon link, Bookdepository link)\nFor a while I had tried using another system: mobile phones assign to each number any of 3 letters, except for 0, 1, 7 and 9. The first two are for special signs, the two last have 4 letters. What I did was moving s to 1 and z to 0. To further simplify, I used only consonants and left away the vocals in this. But the major system is in some sense simpler, as it assigns sounds and not only letters. Let\u0026rsquo;s try to use it here.\nLet\u0026rsquo;s start then with the date of birth, 23rd of April, 1902. The day and month are trivial to remember: it is the international book day, linked to Cervantes and Shakespeare\u0026rsquo;s death dates. It is also Saint George, a special day in Catalonia. For the year, we can assume we know it is in the 20th century and only encode 02 which result in s/z/soft c + n. Two-letter combination can be tricky to come up, but we can form a few words: son, zone, ozone, sin\u0026hellip; If we needed also the century (setting aside the fact that we could create a fixed image for 10 up to 20 to use as century indicator), 1902 would give t/d+b/p+s/z/soft c+n. As you see, forming a word with 4 letters can be even trickier: you should split them in groups of two letters.\nNow, add an image to Saint George fighting the dragon. Which word to use? I\u0026rsquo;ll use zone. And what is the image? Saint George (wearing a bib) is playing 1-1 basketball inside the zone being heavily guarded by a big, green dragon. The bib part is to remind me this is birth.\nNow, his death 8th February 1998. We can encode month-day combinations (which are not as easy as before: always use tricks if you can) as DMM (0802 or 82) or MMDD (0208 or 28). There is some ambiguity in both choices, and as such you have to play it safe and be consistent. As a Spanish speaker, the natural way of date sorting for me is DDMM, thus I\u0026rsquo;ll use 82: v/f+n. Now 1998, 98 gets b/p+v/f. An anthropomorphic phone eating beef, using as a table a tombstone.\nTo remember when he was given the Nobel Prize, 55 is l+l, and our writer is named Halld√≥r Kiljan Laxness. Which happens to have two L\u0026rsquo;s in the name. Here I assume I will always remember this, too and create an image of him with his prize, as a reminder that the date is hidden in him.\nLet\u0026rsquo;s start to form the images: Laxness sitting in the driver\u0026rsquo;s seat of a pearly white Jaguar, typing furiously in a typewriter, with a Nobel prize in his lap. Behind it Saint George wearing a bib is playing a 1-on-1 basketball game, fighting to get a good position inside the zone against the dragon. Behind the car a big, anthropomorphic phone is eating beef (picture the beef as you enjoy it, taste it mentally\u0026hellip; medium, rare?) and using a tombstone as table.\nRemembering names Remembering names is far, far more specific than numbers. We want to remember the names of his most relevant novels (according to the Wikipedia snippet). Independent People, for me, makes me think of the painting La Libert√© guidant le peuple. The Atom Station, a big red London-style bus stopping below the Atomium, in Belgium. Iceland\u0026rsquo;s Bell is the Hallgr√≠mskirkja bell swinging full force.\nIf there is some possibility of forgetting his nationality, use some strong related image to add to your mental placeholder. For Iceland, I could use any image of my road trip around Iceland, but a good one even if you\u0026rsquo;ve been there are the images of Eyjafjallaj√∂kull erupting just above the car.\nWe just need to place all these images around the pearly white Jaguar. We can place them in the car\u0026rsquo;s back seats: the painting, a big reproduction of the church and a big red toy bus, each laying in one back seat. I\u0026rsquo;m counting here on remembering the atom part just from having the image of the Atomium and the bus implicitly. This can also lead to easier forgetting, but sometimes you have to trade off simpler images with perfect recall.\nDevelop your own keys This can only get better with practice, and you can use it for people, history or whatever you come up with. Find your own imagery and fill your characters with expression and unforgettable facts. Use your life and previous knowledge as basis to form images (like I used Saint George) that are significant for your mind, don\u0026rsquo;t rely on others for this. As with the memory palace technique, practice makes perfect, and I can assure you that you will be able to store a lot of facts about important people without problems.\nCan you still recall the images we have used? And still remember the major system? Remembering the major system can be the tricky part, just keep trying! If you found this post useful, please spread the word!\nIn case you want to read more:\n How to Develop a Brilliant Memory Week by Week: 52 Proven Ways to Enhance Your Memory Skills(Dominic O\u0026rsquo;Brian) Quantum Memory Power: Learn to Improve Your Memory with the World Memory Champion!(Dominic O\u0026rsquo;Brian) Maximize Your Memory(Jonathan Hancock) Learn to Remember Everything: The Memory Palace Technique (A post in this same blog)   ParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2011/04/remembering-facts-using-mental.html/","tags":["Improve Yourself","Memory","How-to"],"title":"Remembering Facts: Using Mental Associative Chains"},{"categories":null,"contents":" \nGeese in the East Fjords, Iceland\nIn the last 2 weeks I\u0026rsquo;ve had a big surge of visits and new subscribers, following the rise in HackerNews of my old post Timeboxing: You Will Work Like Never Before and of my newer post Learn to Remember Everything: The Memory Palace Technique. To put in situation, last July my girlfriend and me made a road trip around Iceland, and I wrote everything we did each day. Since then, I\u0026rsquo;ve written a series of posts named Things You Should Read Before Travelling to Iceland about food, shopping and related stuff, and also the ongoing series Road Trip Around Iceland. This is the 6th post in this series, you can navigate to the previous either through the previous link or in the navigation links at the end of this post. I hope you enjoy reading what I write from now on (but pardon me if this specific post is not great: it was not a fantastic day back in our trip!).\nToday was our first fjord day (fjor√∞dagur?). We routed from H√∂fn to Egilssta√∞ir, but we could not make it beside the coast: the fog was too thick. Instead, we followed a mountain pass. Recommendation: if you don\u0026rsquo;t like heights, skip mountain passes. If you don\u0026rsquo;t like rain and wind, skip Iceland (just joking, I don\u0026rsquo;t like them and love the place).\nH√∂fn-Egilssta√∞ir We parted from Hofell early in the morning. Our route today would be pretty long, leading us to the capital of East Iceland, Egilssta√∞ir. Preparing for a long drive with not that many gas stations around, we fueled before arriving to H√∂fn. By the way, h√∂fn means harbour, as you may guess this town is just beside the coast. After a while we started to admire some fjords, around √Ålftafj√∂r√∞ur and H√°marsfj√∂r√∞ur, our first sight of them. We also saw the day was cloudier above the fjords than around the flat coast. It has something to do with dominant winds, the gulf current and sudden straight walls of land (i.e. fjords).\nThe wind was very strong, blowing over the sea and against the shore. As I have previously said, in Iceland when the wind is strong, it is really strong. The kind of wind that makes your 2.5 ton car wobble a little when you are against a cliff and wobble quite a lot when you reach a valley and it can blow freely. The views were nevertheless impressive, the sea blowing against the sharp cut cliffs like steam out of a teapot. Round and round around our first glimpse of Eastern Fjords, we visited Djupivogur and the what one of our guides said it is the oldest shop in Iceland, where we could also take some coffee.\n  \nStrong wind\u0026hellip; but also impressive views\nOur proposed route to Egilssta√∞ir was nice, along the shore seeing the fjords\u0026hellip; But the weather turned on us: windy and foggy. We could not see from one fjord tongue to the next, there was nothing enjoyable about the views. We needed another route, quicker to get to our guest house as soon as possible.\nSo instead of making it along the fractal coast, we made for the straight line of a mountain pass through road 939, straight from F√≥ssarfell to Egilsta√∞ir (unless I\u0026rsquo;m wrong, I can\u0026rsquo;t find my route map and had to rely on another road map I had at home, if I am it was from Brei√∞dalur to Egilssta√∞ir). The views up there were astonishing\u0026hellip; But for a height-hater like I am, it was quite frightening. The route lasted for around 2 hours, but felt much, much longer. At last, we arrived to the flat area around Lagarflj√≥t, a lake where according to tradition the local \u0026ldquo;lake worm\u0026rdquo; Lagarflj√≥tsormur inhabits. The local version of the Loch Ness monster. A little further along the road, Egilssta√∞ir.\n \nTwo views from the mountain pass. I had no pictures from the top\u0026hellip;\nWhat can I say about this city? The first and foremost thing is that our small and free guide Around Iceland (which you can download for free in Heimur.is or get for free when you get to Iceland) had a map of the city, schematic but useful enough. The city is quite nice, although there is something missing: history. Egilssta√∞ir was founded in 1944, out of pure economic and logistic interests: there was no big city in the east of Iceland. West we have Reykjavik, south-east we have Selfoss, north we have Akureyri and north-east Isafjor√∞ur (a lovely city by the way!). The east area was not as populated and out of need, Egilssta√∞ir was founded. And it does a good job, being an entry point from the ferries coming from the Faroe, Denmark and Norway (entering through Sey√∞isfj√∂r√∞ur).\nThis was the first time we arrived with a lot of time ahead to our guest house, a welcoming hostess told us what to visit in the whereabouts. According to her and our route, we set our sights to the puffin viewing area of Bakkagerdi and Borgarfj√∂r√∞ur.\n\nOur car got pretty muddy after the mountain\nBakkagerdi and Borgarfj√∂r√∞ur We thought we had seen Icelandic fog back in the south iof the East Fjords. Wrong. Our way to Bakkagerdi and Borgarfj√∂r√∞ur was accompanied by thick fog, thick as in you-just-poured-shampoo-over-your-eyes kind of visibility. We could barely see 1.5m ahead of us (5 feet or so).\n \nI have no pictures before the \u0026ldquo;high visibility\u0026rdquo; seen on the right: it was just all white!\nIt was also windy, and when we arrived at the fjords, windy as hell. All just to see some puffins!\n\nBorgarfj√∂r√∞ur\nAt first, we just had lunch inside the car and saw some puffins flying around: once you see one their flight pattern is clear enough to distinguish from similar birds (i.e. black birds). Finally we decided that we had made quite a long route to see the damn beast, got dressed with raincoats and walked to the viewing area, just 50 meters from us. We made it, you can see the pictures below, but we got soaked, wind and rain (may I say WIND and RAIN) are bound to get you soaked in a place like this.\n \nThis cute looking bird is a (Atlantic) puffin, Fratercula Arctica\nLuckily enough we found a place to eat something (named Alfacafe, go there if you have the chance), we had some hot chocolate which felt perfect after the rain and waited for the rain to come back. It didn\u0026rsquo;t and we just had supper there: I discovered that I like smoked trout, although I don\u0026rsquo;t like smoked salmon, I had the impression they would taste similar.\nHeaded back to our guest house, feeling really tired. At least we had a glimpse of puffins, but the day was quite disappointing: almost no fjords. Had a shower and had a short wifi spree to check news, mail and post something to our twitter accounts. The following day was bound to be more interesting: we would enter the volcanic areas around M√Ωvatn and Hverir.\n¬´ Road Trip Through Iceland: Day 5 - Ingolfsh√∂f√∞i and J√∂kuls√°rl√≥n (again)\n¬ª Road Trip Through Iceland: Day 7 - From Egilssta√∞ir to M√Ωvatn passing through Hverir\n","permalink":"https://mostlymaths.net/2011/04/road-trip-through-iceland-day-6-east.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 6 - East Fjords, Egilssta√∞ir and Borgarfj√∂r√∞ur"},{"categories":null,"contents":"  Picture courtesy of Shanidar\n  You can also browse the best books I have seen on memory techniques and related areas here.\nIn this post I\u0026rsquo;ll teach you how to have perfect recall of lists of items. Length is not much of an issue, it can be your shopping list if 10 items or it can be a list with 50, 100 or even 1000. And in a forthcoming post I\u0026rsquo;ll show you how you how to apply this technique to learning new languages. Sounds good, doesn\u0026rsquo;t it?\nThe technique we\u0026rsquo;ll be learning is called the memory palace, and is also known as the method of loci (for the latin word locus meaning place) and also the mind palace. A useful tool in everyone\u0026rsquo;s toolbox.\nThe memory palace The memory palace technique began in the 5th century B.C., when Simonides of Ceos, poet, was attending an unfortunate banquet in Thessalia. While he was away to talk with a courier who asked for him outside, the hall\u0026rsquo;s ceiling crumbled, killing everyone. There was no way to recognise the corpses‚Ä¶ Until Simonides realised that it was no problem to recall who was where, without having done any effort.\nThink about it: It is not hard to remember who sits beside the host, where your friends sit, who is beside them and so on. This dawned upon Simonides, and he is credited as the \u0026ldquo;inventor\u0026rdquo; of the memory palace technique. Widely spread through antiquity, there was not a lot of written accounts on it: it appears in the anonymous _Rhetorica ad Herrenium_ and Cicero\u0026rsquo;s _De Oratore_. It is not that strange that there were no written accounts, it is like writing a book about how to put your trousers on. Everybody knows how to do it.\nThe memory palace is well suited to how our brains have evolved. Back in our nomadic days we needed to know how to get somewhere (the lake, the plain) and remember what was there (fresh water, hunting). By taking advantage of this fact we can build an array of impressive memorisation techniques, to ordered or unordered lists.\nRemembering lists may sound lame, who wants to memorise a list‚Ä¶? But lists are just an ordered array of knowledge. What you study for a history exam is a list of ordered dates accompanied by facts and causes (sub-lists). When you learn a new recipe, it is a list. A telephone number is a list of numbers. A poem is a list of phrases.\nYour first memory palace: building and filling  From Will Sculin@Flickr\n  Let\u0026rsquo;s start by creating our first memory palace. It does not need to be a palace, in fact, it should not. Just think of your home, and as a sample I\u0026rsquo;ll assume is really small: from the door you get to a small hall, connected to a living room which leads to a kitchen, a WC and a bedroom with a balcony. This is a sample, to memorise correctly you have to visualise your home or any other place you may know well. You can of course use this mental image of an imaginary house, but memorising may be harder, be warned.\nNow consider the following shopping list: lettuce, bacon, onion rings, SD card and oranges. We want to memorise it. I picked a short list to make the post shorter and make it fit in our small imaginary home: try your hand with a longer list if you don\u0026rsquo;t believe we can do it with longer lists.\nTo remember the list, we have to place each item somewhere in our mind palace. This of course can mean one item per room or several items per room, each one in a special spot in the room. The simplest method is to put each item in its own room, when you are confident enough, create additional trapping space in each room. Thus, our small 5-room house could be easily a 5, 10 or 15 places memory palace.\nTo place an item, we have to visualise it in the room, and to make sure we remember it it has to be an extremely odd image. It has to leave a clear impression and to do so, it has to be surprising, bizarre or sexual, among other options. If the image is dull, remembering it is close to impossible.\nBegin with the list. When we enter the front door, we are greeted by Kermit the frog, only that this special Kermit is made of lettuce, like a talking lettuce. Can you see it? Feel the freshness of Lettucit\u0026rsquo;s leaves? In the living room a stampede of pigs followed by Kevin Bacon with a fork should be bizarre and clear enough! In the kitchen, Scarlett Johansson plays hoola-hop with an onion ring. You enter the bedroom, and to your surprise, the bed is a gigantic SD card: you can hide the bed by pressing it in to be read. Finally, you open the balcony to find that the sun is now a big, luminous orange. It starts to drip juice over the desert in front of your window!\nYou should put all these images in a place you know like the palm of your hand: your home, the house you grew up, your office. This is important.\nYou may not believe it works at all, but you will be surprised. I wrote the first part of this post in the afternoon, and now more than 3 hours later I still can see clearly all the images. Of course this is a short list‚Ä¶ But it would not matter: you could remember a list 5 times as long as easily as with this one.\nFinding an array of memory palaces To remember a lot of things you need to have a lot of places to put all these memories. You will need to find your own array of memory places. The first time I considered this problem, I thought about creating imaginary palaces, linked somehow by corridors. The problem? Artificial palaces get blurry fairly quickly, and you tend to forget them. It is far, far better to use real places, or at least places you can revisit in real life, like pictures from a book, levels in a computer game or buildings you can visit.\nThen I started to think about houses and places I could use‚Ä¶ And I found that there are plenty. I still remember school mates houses from 16 years ago, hotels I\u0026rsquo;ve been, buildings I have visited. I am sure you will find a huge array of places you can use. To begin with the technique, use known places, like your house or office and as you get more confident with the technique, start using older places.\nYou can read more about this in Building Your Memory Palace Collection.\nFinal words You have to get the knack of the method. Get some degree of experience in converting everyday objects (like lettuce) into long-lasting impressions (like Kermit the lettuce-head). This only comes with practice, like walking around your images of memory palaces. Practice, practice, practice!\nBy the way, can you recall the shopping list above?\nIn case you want to read more: * Moonwalking with Einstein: The Art and Science of Remembering Everything (Joshua Foer) * How to Develop a Brilliant Memory Week by Week: 52 Proven Ways to Enhance Your Memory Skills (Dominic O\u0026rsquo;Brian) * Quantum Memory Power: Learn to Improve Your Memory with the World Memory Champion! (Dominic O\u0026rsquo;Brian) * Maximize Your Memory (Jonathan Hancock)\nI have written another related post called Remembering Facts: Using Mental Associative Chains, and also expanded the method to find memory palaces in Building Your Memory Palace Collection. You can also read a translation of this post in Spanish here: Aprende a recordarlo todo: el m√©todo del palacio de la memoria.\n","permalink":"https://mostlymaths.net/2011/03/learn-to-remember-everything-memory.html/","tags":["Improve Yourself","Memory","How-to"],"title":"Learn to Remember Everything: The Memory Palace Technique"},{"categories":null,"contents":" \nHappy World Water Day! Luckily the post due for today was a lot of water in it, iced water sparkling of thousand years old blue ice. This was supposed to be our puffin visit day\u0026hellip; But schedules played badly on us and we could not make it. We just made another round of J√∂kuls√°rl√≥n icebergs while collecting shoreside rocks.\nExpat tales While we were having breakfast we saw another guest in the lovely guesthouse at Hofell\u0026hellip; and he surprised us by asking if we were Catalans, in Catalan! This is how we met Jose, a cook from Alacant, Spain. He came to Iceland 13 years ago, and has done a range of restaurant related jobs, currently he is working as a cook.\nIt was fascinating as he explained his feelings and adapting to Iceland. For example, he told us that without Icelandic you don\u0026rsquo;t have access to any good job\u0026hellip; But once you pick it up (it took him 8 months) you are done and can rise pretty quickly. He is really happy about being there, only missing a little the standard Mediterranean stuff, like plenty of sunlight.\nHis view of the supposed big economical crisis of Iceland is amusing, seen from the outside world. What he observed is that people stopped taking vacation 5 times a year and took them 3 times a year instead. I don\u0026rsquo;t know if this is the trend or it is just what happened in the restaurant businesses, but if true would just mean that it wasn\u0026rsquo;t that bad.\nIng√≥lfsh√∂f√∞i? As I said before, our plan for today was to visit Ing√≥lfsh√∂f√∞i, a nature reserve acting as a puffin nesting area. Ing√≥lfsh√∂f√∞i is the place where the first settler of Iceland, Ing√≥lfur Arnason set foot, and named Ingolfur\u0026rsquo;s cape around the year 874.\nThe visit is done in a trailer pulled by a tractor and takes around 3 hours. What we did not know is that there is only one departure each day, and it is at 12:00 (if I remember correctly, maybe it was at 11:00). The point is we arrived something like 20 minutes late. And the weather was (how may I say it?) pretty Icelandic.\nToday was the first time we saw gale winds in Iceland. Really impressing and strong\u0026hellip; And cold. We considered walking to catch the tractor but we were freezing after just a few meters. Change of plans needed\u0026hellip;\nJ√∂kuls√°rl√≥n again As we had enjoyed a lot yesterday\u0026rsquo;s visit to J√∂kuls√°rl√≥n, we decided that our best bet was to head there again. Spent the whole morning walking around the sea shore, picking rocks and taking pictures of big lumps of blue ice. In retrospect, I recommend you plan for a whole day in the J√∂kuls√°rl√≥n: half a day for the lagoon and half a day for the sea shore. It is worth the time, you will enjoy it.\n \nJ√∂kuls√°rl√≥n, a nice place\nBack to the guest house After our leisure walks around the J√∂kuls√°rl√≥n, we came back to the guest house: it was time to have lunch. We took a long nap and visited again the house\u0026rsquo;s hot pots (pottana in Icelandic) to relax. Our first relax day!\n\nThe view from the hotpots\nPlanning our route for tomorrow and supper\u0026hellip; And it was time to sleep again, tiredness was growing again.\nIn case you are interested, we drove for 943 km today, although it looks like we did nothing at all.\n¬´ Road Trip Through Iceland: Day 4 - Two magic places, Svartifoss and J√∂kuls√°rl√≥n\n¬ª Road Trip Through Iceland: Day 6 - East Fjords, Egilssta√∞ir and Borgarfj√∂r√∞ur\n","permalink":"https://mostlymaths.net/2011/03/road-trip-through-iceland-day-5.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 5 - Ingolfsh√∂f√∞i and J√∂kuls√°rl√≥n (again)"},{"categories":null,"contents":" \nSvartifoss, Iceland\nToday (i.e. this day in our trip) was Laia\u0026rsquo;s birthday, and one of our personal landmarks in this trip, as we visited our favourite places: Svartifoss, my special place and J√∂kuls√°rl√≥n, a place Laia loves. We spent almost all day in these two places and driving around, but they are probably two of the most remarkable experiences of our road trip in Iceland.\nKirkjugolf and Skaftafell Today we managed to visit the church\u0026rsquo;s floor, the Kirkjugolf. It is a basalt formation in the ground, and its similitude to a tiled floor gave this name. In 1783 the Laki volcanic area erupted. Its eruption caused 6 million death worldwide, poisoned sheep all around Iceland (due to fluorine intoxication) and the ash cover lowered world temperature, causing crop problems in all Europe and Asia, provoking the worst famine in Japan ever. It is believed that the lowered crops in France the coming years lead to the French Revolution of 1789. The lava started flowing to this place, Kirkjub√¶jarklaustur and its local pastor gathered his congregation in the church and delivered what would be known as the fiery sermon, Eldmessa in Icelandic, reproaching the crowd for his sins and laziness. Then the lava stopped, just at the edge of the church, and the people at Kirkjub√¶jarklaustur were spared. To get to the Kirkjugolf you have to take the road 203 and have faith, as there is no clear indication of where it is.\n\nKirkjugolf, the church\u0026rsquo;s floor\nNow a pretty long and boring drive along the Ring Road. There were not a lot of interesting sights on the way, unless you love bridges. We passed a few, and there is even a bridge monument, to a \u0026ldquo;recently\u0026rdquo; broken bridge. It forms a stopping area, where you can take a few pictures of the stunning views of the Vatnaj√∂kull glacier and the Skaftafell area. A shorter drive by, and you get to the Vatnaj√∂kull-Skaftafell parking area, where a short walk leads to the Svartifoss waterfall.\n \nLeft: A distant view of Vatnaj√∂kull and Skaftafell Right: Broken bridge\nSvartifoss: only in Iceland could you find something as beautiful Svartifoss is somehow a special place. The Hallgrimskirkja in Reykjavik is inspired by the hexagonal basalt formations of this waterfall, and once you are there you know why it inspired a church. The day was slightly cloudy and chilly, and the walk toward Svartifoss was a meagre 3.5km (approx, I\u0026rsquo;m talking from memory), and in the middle of the way (roughly 1.5km) you find Hundafoss, the dog\u0026rsquo;s waterfall. Small waterfalls like this start to get unimpressing\u0026hellip; although it would be an awesome waterfall anywhere else in the world.\nThen after a longer walk you arrive to Svartifoss. It is very odd, that you hear it long before you can see it, as it is hidden behind a sweep of the mountain pass. I\u0026rsquo;ll let the pictures speak by themselves. Maybe they don\u0026rsquo;t look impressive, the lighting was not very good, but I could have spent the day sitting there over a rock watching the landscape and listening to the falling water. It was this kind of special place.\n\nHundufoss, on the way to Svartifoss\n  \nSvartifoss, Iceland\nWe had lunch in Svartifoss, and I drank a little water from the waterfall. As usual, it tasted wonderful and had a rocky aftertaste. As I have said before, everywhere in Iceland you can go as far as your legs will take you, but here there was a catch: there was a sign asking people to please, don\u0026rsquo;t step over the plants, as they are very delicate. Jumping over rocks you can get only this far, even more when the rocks are wet.\nJ√∂kuls√°rl√≥n: Don\u0026rsquo;t be surprised when you arrive and see it After we left Svartifoss, we followed along the road. We passed a place we wanted to stop, a puffin watching place. Puffins are typical birds of the area, they look like penguins with coloured beaks. We decided to stop there the day after, as we would spend two nights in the same guest house.\nWe kept driving and chatting, and it looked as if we were close to the J√∂kuls√°rl√≥n, but we didn\u0026rsquo;t see anything. Laia was driving and I was looking around. At our right we had the sea, and in the left part of the road there were small hills (not taller than 5 or 10 meters), suddenly there was a small valley between two and I said Holy shit!. Laia was scared, and we were lucky as we didn\u0026rsquo;t have any other cars near and the road was in very good condition as she steered quickly thinking we were about to hit something. Be prepared, the sudden view of big lumps of blue ice out of nowhere can be really impressive.\n  \nSome views of the J√∂kuls√°rl√≥n. Lighting was not very good, but the place is stunning\nWe spent more than 2 hours in the glacier lagoon. This is the one and only glacier lagoon in Iceland, appearing as one of the smaller tongues of the Vatnaj√∂kull glacier is melting against the sea. This is caused by the contact with saline water, in quite few thousand years it will form its own fjord and the lagoon will disappear.\nThis is a very remarkable place\u0026hellip; For example, it appears in James Bond\u0026rsquo;s A View to a Kill and Die Another Day, and also in Batman Begins. For the filming of Die Another Day, the lagoon dam was closed to lower water salinity, and the surface of the lagoon freezed.\n\nGlacier ice. It is clearer than normal ice because it\nhas been under heavy pressure since its formation\nThere is a car/boat tour of the lagoon: you board a boat with tires, and it crosses the lagoon. In the boat you will eat some glacial ice, which is amazingly clear and obviously cold, and you will see the icebergs from very close. You may also get a glimpse of seals swimming in the lagoon, but this is not guaranted. We saw one, and she kept swimming around while we were hiking around the shore. After this tour ended, we did the freakish thing of the day: there is a live webcam pointing to the parking (from Inspired By Iceland, there is a link named Iceland live). Laia phoned home, and we jumped around until her parents noticed us and wished her happy birthday.\nHofell guest house We arrived at Hofell, where we had our guest house. It was nice, clean and the host was very kind: they have hot pots of their property 10 minutes away from the home, priced 350 ISK for everyone unless you are a guest, if you are a guest it is free. The views from the hot pots are amazing\u0026hellip; You are surrounded by mountains, with views of glaciers and Icelandic mist, and you are covered in warm natural water. A experience you need to live.\n\nThis is the view from the hot pots from the lovely\nguesthouse where we would spend two nights\nIn case you are interested, we drove for 733km today.\n¬´ Road Trip Through Iceland Day 3: Waterfalls and Glaciers\n¬ª Road Trip Through Iceland: Day 5 - Ingolfsh√∂f√∞i and J√∂kuls√°rl√≥n (again)\n","permalink":"https://mostlymaths.net/2011/03/road-trip-through-iceland-day-4-two.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 4 - Two magic places, Svartifoss and J√∂kuls√°rl√≥n"},{"categories":null,"contents":" \nOne of my fractal images\n\nI have a confession to make: I\u0026rsquo;m not using emacs+org mode to keep my to-do list and appointments. What? The same emacs junkie that used emacs for (almost) everything last December gave up emacs? Yes, the same, but only gave up for this use case. I have some good reasons about why I am using TaskWarrior. Which does not mean that I could not be using emacs for the same, I just wanted to try something new.\nTaskWarrior is very geeky TaskWarrior as implied by the title of this post is a program you can use to keep a to-do list, appointments and project related lists of tasks. And is very geeky because it works from the command line. Yes, it is a task manager with a CLI (command line interface, as much as I love CLI\u0026rsquo;s and acronyms, I had never used this one before!). And this is close to being the top in geekyness you can get.\nYou could get over the top and write your own task manager as a lot of people have done. In fact, I found about TW after learning about t, the python based minimalistic task manager, through finding t- in HackerNews, an even more minimalistic version of it.\nAdding a task to taskwarrior is a little more simple than using org-mode, but this is just a matter of taste. You can add a task to an org file just by writing a line, whereas to add a task to TaskWarrior you issue task add task. Which I feel better about, it is the way it should be.\nI want to use my Ben Nanonote for something You probably remember my little pocket computer, the Ben Nanonote. It is a somewhat shiny little gadget, very lovely and for me, quite useless\u0026hellip;. I have an iPod Touch and an iPad, what use can have a pocket-sized Linux based clamshell computer with Debian without X and 320x200 pixels?\nAt first, as part of my emacs 30 day challenge, I planned to use the Nanonote as an agenda, with emacs and org-mode. But this was hard to do: the keyboard has small keys and I have big fingers. I gave up, and almost stopped using it completely. Then, while on Switzerland I used the tiny beast to do some computations using Pari/GP and started to like it again. Although it lacks (mine, with my Debian installation) a good graphical plotter and visualiser (gnuplot does not work completely), it has yacas for symbolic algebra, Pari/GP for number theory and high precision computation and Octave. It also has C compiler\u0026hellip; Forth, Lisp, Python, you name it. It is a nice gadget to keep close, but I wanted to use it for something. Here enters TaskWarrior, which fits like hand in glove with my Ben.\nUsing TaskWarrior (with screenshots) I add whatever task is lingering in my mind as I wake up, like buying something for supper?, with task add task. List my tasks by issuing task (note: add alias t=task in your .bashrc!). This is because the default action (which can be customised) is list. You can change this (and a whole lot of other options), but this is out of the scope of this short introduction. Read the full TaskWarrior manual here.\n \nAdding tasks, setting projects and so on\nYou can add projects, due dates, priorities and tags to a task with the keywords project, due, priority and tag, followed by a colon. Like task add Do something today due:today priority:H project:Hey +tag1. You add a + to a tag to decide whether adding a tag, +tagname or removing a tag, -tagname. To mark a task as done, you issue task #taskID done. And to find tasks matching some criteria, you should task list criteria. You can be more specific, with task list project:specificproject, or use some custom show function like task list complete. I know that TaskWarrior at first is a little verbose\u0026hellip; but you can abbreviate: t add Tasktoadd pro:Aproject due:tom pri:L.\n \nAdvanced listing and adding\nThere is also a lot of possibilities to list tasks, task list limit:2 will show only 2 tasks, task next will show you what to do next (based on priority, due date and last time acted). Even more, you can create your custom reports! I did one that listed the what to work next with a minimal view (to fit the screen of the Ben Nanonote), and it is as simple as adding this to your .taskrc file:\n #Custom report:\nreport.look10.description=Minimal next with due date\nreport.look10.columns=id,description,due,priority\nreport.look10.labels=ID,Description,Due,P\nreport.look10.sort=due+,priority-\nreport.look10.filter=depends.none: status:pending\nreport.look10.limit=10\n  \nListing and custom reports\nI also did a custom report that showed me 10 tasks marked as fun, i.e. with the tag +Fun added to them. Thus when I wasn\u0026rsquo;t like working on real work, I could do some fun work. To learn how specific reports work, you can ask TaskWarrior to show them, like task show next:\n Config variable Value\nnext 2\nreport.next.columns id,project,priority,due,active,age,description\nreport.next.description Lists the most urgent tasks\nreport.next.filter status:pending limit:page depends.none:\nreport.next.labels ID,Project,Pri,Due,Active,Age,Description\nreport.next.sort due+,priority-,active-,project+\nurgency.next.coefficient 10.0\n There are a lot more options to tweak, like color themes (TaskWarrior comes with quite a few, and you can write your own or download them from somewhere), adding task dependency, i.e. task 3 should only be done (and showed) after task 5, adding recurrence to tasks and quite a few more things. If you are interested in finding more about TaskWarrior, install it, play with it a little and start browsing the online tutorial.\nMy usage of TaskWarrior in the Ben Nanonote I wake up, plug it to my MacBook, configure the network (see this post about Debian on the Ben Nanonote to read about networking it) and ssh from the Mac to it.\nWhen I\u0026rsquo;m ready to go to my office, I unplug my Ben and head for my office. While on commute, I can check my tasks in the Ben or add one as needed just by taking it from my pocket. To save battery life I wrote two scripts named on and off, which just turn the screen on and off (the default timeout is way too long and with fbterm is hard to set up correctly, AFAIK) with echo 0 \u0026gt; /sys/devices/platform/jz4740-fb/graphics/fb0/blank\nI get to my office, plug the Ben to my office computer, check for due tasks and work. When the day is over, unplug and head home\u0026hellip; This way, it has always battery left, and my task list is always with me in a very browsable way. And I use my Ben for something!\nAll these reasons and use cases could work as well with org-mode. I could start emacs in my Ben at boot up, and work in the same way, but I wanted to try something different. So far, I\u0026rsquo;m very happy about how TaskWarrior works, and I was just happy with org-mode, mostly because org-mode works like a super organiser system. And I wanted something more minimalistic, for this specific aspect of my work-life. I.e., I won\u0026rsquo;t be using vi without being forced to do it before hell freezes :).\nParseList(ScrambleList(Relateds(emacs)),2)\n","permalink":"https://mostlymaths.net/2011/03/using-taskwarrior-instead-of-emacsorg.html/","tags":["emacs","Linux","Time Management","NanoNote"],"title":"Using Taskwarrior Instead Of Emacs+Org Mode For To-Do And Appointment Tracking"},{"categories":null,"contents":"\nDynjandi waterfall, Iceland\nThis is the journal of our road trip around Iceland, what we did each day as we circled the island through the Ring Road. This series of posts started on February 2011, and is so far ongoing, posting once a week from our annotations and pictures. Bookmark this page if you want to come back to see what\u0026rsquo;s new.\nRoad Trip Around Iceland, Day 1: Reykjavik - the city I\u0026rsquo;d like to live\nRoad Trip Around Iceland: Day 2 - The Golden Circle (Thingvellir, Geysir and Gullfoss)\nRoad Trip Around Iceland: Day 3 - Waterfalls and Glaciers\nRoad Trip Through Iceland: Day 4 - Two magic places, Svartifoss and J√∂kuls√°rl√≥n\nRoad Trip Through Iceland: Day 5 - Ingolfsh√∂f√∞i and J√∂kuls√°rl√≥n (again)\nRoad Trip Through Iceland: Day 6 - East Fjords, Egilssta√∞ir and Borgarfj√∂r√∞ur\nRoad Trip Through Iceland: Day 7 - From Egilssta√∞ir to M√Ωvatn passing through Hverir\nRoad Trip Through Iceland: Day 8 - From M√Ωvatn to Husavik visiting √Åsbyrgi and Dettifoss\nRoad Trip Through Iceland: Day 9 - Go√∞afoss and H√≥lar\nRoad Trip Through Iceland: Day 10 ‚Äì Hv√≠tserkur\nRoad Trip Through Iceland: Day 11 ‚Äì A fjord day and visit to √çsafj√∂r√∞ur\n[\u0026hellip; more to come \u0026hellip;]\n","permalink":"https://mostlymaths.net/2011/03/road-trip-around-iceland-index.html/","tags":["Iceland2010"],"title":"Road Trip Around Iceland: The Index"},{"categories":null,"contents":"\nHave you thought about playing\ndice letter gamesin a\nforeign language?\nIt\u0026rsquo;s been more than a month since I started my goal of learning Gaelic. I\u0026rsquo;m not happy with how it is going, and I\u0026rsquo;m the only one to blame for it. Why?\nFirst, I have too many commitments. A few are with myself, others are with my girlfriend and then I have my thesis and research work. All together are way too much to handle in an usual work day, even in an \u0026lsquo;extended work day\u0026rsquo;, i.e. from 9 to 24 or 1.\nI feel capable of learning up to a decent level a language in 3 months, given between thirty minutes and one hour of mindful dedication, daily. Maybe 15 minutes would be enough, if one day I did one full hour. The problem is that I don\u0026rsquo;t have 15 spare minutes with full mental power. I usually end my research work pretty tired, and once I finish my usual stuff at home, the only thing left is watching Doctor Who on TV and going to bed.\nI\u0026rsquo;m working on a few ideas to solve the lack of time and be able to practice daily: invest 30 minutes twice a week and then you can practice wherever you are (the daily shower is a good moment to vocabulary recall, for example), because you will remember the lesson perfectly. I\u0026rsquo;ll blog about this shortly, once I get the hang of it.\nJust to lower my own expectations, it is very unlikely that I\u0026rsquo;ll be talking Gaelic (Irish or Scottish, does not matter) by the end of April. But I still can have a shot at it. In any case, I\u0026rsquo;ll improve my speed in language learning, at least from beginner to decent level.\nAs a side note, I ordered 6 new language books from The Book Depository, all from the collection Teach Yourself:\n Teach Yourself Complete Icelandic: the new edition, together with the CD Teach Yourself Complete Irish: with CD, too, to complement the awesome Bitesize Irish Gaelic course. Teach Yourself Complete Norwegian: happened to read Wikipedia\u0026rsquo;s entry about Norwegian, and was intrigued. Teach Yourself Complete Swedish: out of plain geekyness. Teach Yourself Complete French: Laia and me both know French but our skills are rusty. Let\u0026rsquo;s sharpen the saw. Teach Yourself Complete German: The same as French goes here   Related Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Productivity)),1)\n","permalink":"https://mostlymaths.net/2011/03/irish-gaelic-language-learning-month-1.html/","tags":["Irish","Languages"],"title":"Irish Gaelic Language Learning: Month 1 Overview"},{"categories":null,"contents":" After visiting the wonders of the Golden Circle, we kept driving eastward getting into the region of waterfalls and glaciers. The day began with 2000 Icelandic kr√≥nur of fuel, that for 1\u0026frasl;4 of the tank. Expensive, but not as expensive as one may guess, from prices in Spain. It continued with the first sighting of lambs in the middle of the road\u0026hellip; Get used to that, it is very common!\nSeljalandsfoss Our first landmark for the day was the wonderful, and sadly very touristic waterfall Seljalandsfoss. It is a crowded place (by Icelandic standards, meaning there were around 50 people around), basically because it is very close to the Golden Circle and whereabouts of Reykjavik.\n  \nWalking behind a waterfall is wonderful\nIts main selling point is the fact that you can walk behind the waterfall along a slimy path. You will need a raincoat to do so (you are not forced to use it, but you\u0026rsquo;ll get soaked), don\u0026rsquo;t forget to bring one. An odd remark I got from this place: the FiveFinger KSO, as good as they are for running in warm climates are really horrible for cold and wet places. I put them for this walk, and would not do it again for the entire trip\u0026hellip;\n\nIf you happen to visit Seljalandsfoss, don\u0026rsquo;t miss the small, unnamed waterfall to the left of it. Follow the path along the mountain and you will find a fissure in the middle of it, with a shiny waterfall. Laia went inside this one until almost knee depth to take a picture. You can bet, the water was extremely cold.\nOur next stop should have been Seljavallalaug, a hot water pool somewhere. We just didn\u0026rsquo;t find it and kept en route. Icelandic language fact: Laug means bath or bathing, Saturday is Laugardagur: the day of the bathing.\nSk√≥gafoss Next landmark: the second biggest waterfall so far, Sk√≥gafoss. Not as majestic as Gullfoss or as entertaining as Seljalandsfoss when we arrived, but it was one of the most interesting, now you\u0026rsquo;ll know why.\n \nSk√≥gafoss, with a close up\nFirst we went up the waterfall along a wooden stairway to see the views from the top. They were not that nice: the day was cloudy and very windy. On our way down we could stand upright just by the wind strength. Also of note is the recommendation to open the car doors carefully. A wind gush could easily tear the hinges.\nWe went down, and the waterfall was mostly deserted\u0026hellip; And we took advantage of the Icelandic mentality: walk wherever you want, at our own risk. There are no red velvet lines anywhere, and we walked just below the waterfall and took some pictures. There was a lot of drizzling in the zone, so if you want to do the same, be prepared and bring a raincoat (as I said before) and if you have a point-and-click camera, some kind of lens protection to keep it from getting wet.\nS√≥lheimaj√∂kull Do you remember Eyjafjallaj√∂kull? Yes, that volcano that covered half Europe in ash. S√≥lheimaj√∂kull is a glacier just beside it. Its Icelandic name means The home of the Sun glacier\u0026hellip; But the ash cloud turned it pretty darkish.\n  \nBlack ice\u0026hellip; No! Completely transparent\nThis glacier has a relatively good road leading to it, and can be visited and walked around. With relatively good I mean that we made it, but there were some moments when we were not as sure. Anyway, we saw cheap class A cars and tourist buses doing it, so don\u0026rsquo;t be afraid. But be sure of knowing how to change a flat tire.\nWe walked around a lot, collecting rocks, volcanic ash and admiring the landscape. We had our first glimpse of clear glacier ice, below the volcanic dust. We walked a little over the ice of the glacier, but it was clear that mountain boots were not enough and we went back to the car. We were hungry\u0026hellip;\nDyrh√≥laey and Reynirsfjara Dyrh√≥laey is a wonderful volcanic cape, overlooking black volcanic beaches. The road was very rough, with a cliff just 50cm from my window, but the views were worth it. Going straight you can see a full 360¬∫ view of black beach and a cut down cliff, just beside Dyrh√≥laey lighthouse. Be prepared to an incredibly strong wind.\n \nView from the lighthouse and the Dyrh√≥laey cape\nGoing to the left of the road you get to the other side of Dyrh√≥laey, another small cape with very interesting views and an odd phenomenon: a sea geiser. When the strong wind, sea level and the rock formation coincide, they just form sea water gushes into the air. We were there at around 6pm, and it looked like a very good time to see that happen. Below you can see several shots of this event.\n   \nThe water gush next to Dyrh√≥laey\nThe final highlight of the day were the basalt columns in the beach at Reynirsfjara. They were nice, but after everything we saw this day, a little lame. We would see similar formations in Stykkish√≥lmur a week or so after. We walked around the beach and collected rocks, as we have been doing for all the trip. If you also enjoy collecting sea shells, in Iceland there are not that many. Don\u0026rsquo;t be disappointed. Icelandic language factoid: fjara means beach.\n  \nThe basalt columns at Reynirsfjara and the view of Dyrholaey from the beach\nFinishing the day: Supper and the lava field of Eldhraun We stopped at V√≠k to have something hot to eat, and phoned our hotel saying we would be arriving late (the wonderful thing of a prepaid Icelandic phone is that you can do this). Had a wonderful hot soup, awesome after a very cold day.\nWe drove along Eldhraun, which is a generic term in Iceland for lava field. It looks like a desert with very big rocks covered in Icelandic moss, very very thick. We saw Kirkjub√¶jarklaustur\u0026rsquo;s church and drove for a while looking for the Kirkjug√≥lf, a basalt formation named the church\u0026rsquo;s floor. We didn\u0026rsquo;t find it, but the next day we would make it. Drove to our hotel, which although was under remodelation, was pretty nice\u0026hellip; and had free wifi!\nIn case you are interested, we drove for 534 km today. A long day, indeed!\n¬´ Road Trip Through Iceland: Day 2 - The Golden Circle (Thingvellir, Geysir and Gullfoss)\n¬ª Road Trip Through Iceland: Day 4 - Two magic places, Svartifoss and J√∂kuls√°rl√≥n\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2011/03/road-trip-through-iceland-day-3.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 3 - Waterfalls and Glaciers"},{"categories":null,"contents":" Since I can remember, I\u0026rsquo;ve always tried to bite more than I could chew. Every time I\u0026rsquo;m stressed, or overworked I end up adding one or two new projects. I don\u0026rsquo;t know how. I try to pick up a new language, or start to play go again, or decide it is a good moment to learn stenography. These days, for example, added to my usual schedule are a new blog about meditation, I finally started the series on our road trip to Iceland and I am fighting my schedule to learn Gaelic. And this only for blog-related tasks! Have you ever done this?\nThis has a good side effect: when I\u0026rsquo;m procrastinating on my expected work, I end up doing one of these new tasks which are always focused in learning new abilities or improving forgotten hobbies.\nIt also has a bad side effect: stress and problems from context switching. Having too many tasks at once has a very taxing effect, as all Getting Things Done people know.\nWhere does the name come from? A few weeks ago I was reading Reddit and saw a post in the AMA (Ask Me Anything), where the poster was a social helper devoted to people with compulsive hoarding, a mental condition where people tend to accumulate lots and lots of \u0026ldquo;stuff\u0026rdquo; (usually useless) without being able to discard anything. I found it interesting and read for a while the questions and answers.\nThen I realised that, in some sense, I act exactly the same with respect to my projects. I add them, work a little on them\u0026hellip; And I am unable to give up on them, I\u0026rsquo;m always coming up to old, discarded projects. Do you share this problem with me?\nLetting go? The easier answer would be to just let them go. If the project is not important and you just need to drop it, forget about it. The problem is, I grow too attached to projects where I devote my resources. I can\u0026rsquo;t give up on learning something: if it was important a year ago, it is also today.\nUsually, the moment I decide to drop a project from my schedule is not because I don\u0026rsquo;t enjoy it. It is either because I have found a shinier task or because my usual schedule got tighter (for example, because I have to give classes).\nThis means that the letting go was not because it was uninteresting, it was because there were not enough resources. When in some future moment I have more resources available, I want to tackle this again!\nMinimising the trouble I bet we all want to minimise the trouble of having too many projects at once. The solutions I have do not imply letting go, simply because I can\u0026rsquo;t do it.\nFirst keep track of all your projects: Have a list (computerised is better) with all your projects. If possible, add colours to indicate which are ongoing, which are on hold. Remove the finished ones.\nA problem of this approach is that you may be overwhelmed after seeing so many projects, all together. Sort them as active and inactive, and if possible, hide the inactive ones from view when you want to see your project map.\nDon\u0026rsquo;t stress out about having too many projects. Detach from them any sense of time-frame, outcome or deadline. You have to treat them like you treat ads in a webpage. Ignore them unless they are your focus for the moment.\nSecond work on them on a weekly basis: There is no problem in having a ton of projects at the same time, you only need to manage them correctly. And the only way to do so, is by working on them.\nA project is like a plant. Some of them are cacti, others are orchyds. In any case, they need to be taken care, at most on a weekly basis. Some can survive with two weeks of inattention, and some need to be worked on daily.\nOnce a week, review your list of ongoing projects. Add a tick to the projects you have worked on last week, and add a cross to the ones you didn\u0026rsquo;t. If for some unknown reason you have worked in a project which was held, add a tick to it. Every two weeks review your project list.\n Ongoing projects with two ticks are ongoing Ongoing projects with one tick and one cross are to be re-assessed Ongoing projects with two crosses should be put on hold Held projects with one or two ticks should be moved to the ongoing list  Third give up when you have to: The fact that you can add projects indefinitely and can manage them does not mean that you should do so forever.\nWhen there is something that no longer interests you, or that has been superseded by bigger tasks don\u0026rsquo;t be afraid to remove it from your list. I stopped playing chess seriously when I was 17, but didn\u0026rsquo;t remove it from my mental list of tasks until I started to play Go when I was 20 or 21. I found the game of Go much more appealing, and completely superseded playing chess.\nThese are the solutions I use for this problem. What is your approach to project hoarding?\nIf you enjoyed this post, please take 2 minutes to subscribe to mostlymaths.net newsletter. If you don\u0026rsquo;t have time right now, share this post with the share buttons below. Thanks!\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nFocused Interview with Leo Babauta (from Zen Habits)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2011/03/hoarding-projects-minimise-trouble.html/","tags":["Time Management","Productivity"],"title":"Hoarding Projects: Minimise the Trouble"},{"categories":null,"contents":" \nThe Kerid crater. Don\u0026rsquo;t miss it!\nThis was the official first day. We did a quick packing and preparing in our room and headed downstairs. Breakfast time, and we were amused to find a bunch of Spanish hiking tourists, with a Spanish guide. Had a wonderful breakfast with some tips from the guide: Beware of falling over the side of the road. Why? Because you can be easily distracted by the landscape! And we felt like this when we passed the Jokulsarl√≥n in our 4th (I think) day. A small van picked us in our guest house and drove to the car dealer where we had our car waiting. One small disappointment: we had to pay 40‚Ç¨ to get a second driver. No big deal, but we thought it was included. I thought I may drive a little\u0026hellip; but Icelandic roads would prove me wrong. We turned down on the scratch insurance. Unless you scratch it really badly, they won\u0026rsquo;t complain: Icelandic roads are expected to scratch your car a little.\nAs we started to get out of the outskirts of Reykjavik we realised that a lot of Icelandic cars were \u0026ldquo;one eyed\u0026rdquo;. One of their headlights was significantly dimmer than the other. We thought it had something to do with gravel smashing the glass. But we didn\u0026rsquo;t really find out. Any ideas?\nAccording to our road guide and what we saw yesterday, we decided to visit Mosfellsb√¶r to buy a blanket, a small town north of Reykjavik where they have the best wool. Sadly, we got lost and then we realised it was Sunday. No point in looking for a shop that would probably be closed.\n\nOn our way, we passed by the Laxness farm, where the Halld√≥r Laxness museum is located. Halld√≥r Laxness was an Icelandic writer, Nobel prize in literature in 1955. We saw from afar Laxness\u0026rsquo; white Jaguar (I thought it was a Rolls Royce, my fault) parked in front of it. En route, we saw lots of horses and lambs in farms. It was nothing for what we would see in our remaining weeks.\nAlso of note is the lack of trees. It is a very odd feeling, because everything is really green, but without trees. It turns out that in the settlement times, Iceland was green and Greenland was ice. The island was covered with trees, but it was deforested to use as fuel and timber, but trees grew very slowly in this volcanic soil and didn\u0026rsquo;t take off. Currently there is an ongoing process of reforestation, with mixed feelings from the people in Iceland, because some think it is not the way Iceland is and others think it is what Iceland should be.\nFirst stop: Ôªø / 64.25806; -21.125Thingvellir (√ûingvellir) Thingvellir is the place where the government of Iceland started, where the chieftains of the island started to meet, starting 930AC. The government took the name Al√æingi. A very special place, in short. Our first stop was a plain filled with tourist-made small stone structures.\n   \nThe Ôªø / 64.25806; -21.125Thingvellir canyon, separating America from Europe\nThen we headed toward the real place, where we took some pictures. Also of importance, the √ûingvellir area is where the tectonic plates of America and Europe are separating, forming some cracks, fissures and even a canyon. We were standing in the middle of two continents!\nAfter a leisurely walk, we looked at our map what we would do now. A nice route to follow was through the Keri√∞ craterÔªø / 64.040; -20.888. It was our first contact with Icelandic volcanoes (and non-mainstream tourist attractions) and it was terrific. There was no-one around, and the outlandish red sands and blue water was mesmerising. We walked to the bottom of the crater (a pretty easy walk) and touched the cold water in the bottom. Also picked a handful of rocks of the region (something which would get increasingly common\u0026hellip; we have a lot of Icelandic rocks\u0026hellip;).\n \nThe Kerid crater. Not publicised strongly enough!\nNext stop was expected to be relaxing: baths in Laugarvatn. But the only thing we saw where we could take a bath was a sulfurous kind of sauna, very unnappealing. We gave up and headed for the next stop in The Golden Circle. The Golden Circle is the name of the most famous (and close to Reykjavik) landmarks: Ôªø / 64.25806; -21.125√ûingvellir, Ôªø / 64.3166806; -20.2999Geysir and Ôªø / 64.32611; -20.12111Gullfoss.\nSecond stop: The Great Geyser Area We saw the first water eruption from afar, and once there, a lot of close ups. The original geiser, which is of course named Ôªø / 64.3166806; -20.2999Geysir (factoid: the word geiser comes from this place, and a√∞ geysa, an Icelandic verb, means to gush) is quite inactive, but its close cousin (just something like 15m away), Ôªø / 64.31306; -20.30056Strokkur, erupts every 6 minutes or so. We could take some pretty good close-ups, sadly the sky was gray and they don\u0026rsquo;t look that good. In person, it was impressive. After enjoying the Geysir area and walking around, we ate a little in the tourist centre in front of it. We were hungry and needed some coffee very badly. A perfect carrot cake, with drykkur (drinkable skyr) and coffee, and a hiatus in our journey. In the gift shop I had my first contact with a game I currently love: hnefatafl (a post about the rules is coming), also known as tablut or generically, tafl. I don\u0026rsquo;t know why it was abandoned in the early 1600, it is a fun game.\n \nI even took a quick series of 4 pictures of it erupting (but had to move ahead to catch the eruption properly!):\n\nThe Strokkur geyser.\nThird stop: Ôªø / 64.32611; -20.12111Gullfoss The Ôªø / 64.32611; -20.12111Gullfoss waterfall is plain impressive (factoid 2: foss is Icelandic for waterfall). The feeling of the thunderous waterfall is like being in a huge, noisy factory where they are building earthquakes. You can feel the ground moving as the water falls. Took a lot of pictures and walked around. There is almost nothing to see except for the waterfall and a hotel. We had a coffee there, and took advantage of the free wifi to check email and this kind of things.\n \nGullfoss is impressive\nEnd of the Day: Hotel On our way to the hotel found a lot of interesting landscapes. Of course, they were interesting then. Now they look almost \u0026ldquo;normal\u0026rdquo;, after what we saw after this. Our hotel, Leirubakki, was in front of Mt. Hekla (1.491 m), which according to middle age Icelanders is the local hell\u0026rsquo;s entrance. The views were fantastic, and the hotel was the place where an old farm from the Saga\u0026rsquo;s time had been. We had no wifi, but we were to tired to care. We walked a little outside and discovered a very odd bird which made some\u0026hellip; well, odd noises. It was almost like an alien invasion.\n\nMount Hekla, the gate to hell\nIf you are curious, in this first day we drove for 251.3 km.\n\nAn Icelandic bible!\nIf you want to keep reading about our trip through Iceland, don\u0026rsquo;t forget to subscribe!\n¬´ Road Trip Through Iceland, Day 1: Reykjavik - the city I\u0026rsquo;d like to live\n¬ª Road Trip Through Iceland: Day 3 - Waterfalls and Glaciers\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2011/02/road-trip-through-iceland-day-2-golden.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland: Day 2 - The Golden Circle (Thingvellir, Geysir and Gullfoss)"},{"categories":null,"contents":"Ôªø / 64.133; -21.933\n\nAfter a huge delay, this is the first of a few posts about our road trip to Iceland last June and July. While we were there, I wrote a journal about what we did and saw each day, and this is the extended version (with pictures!)\nWe arrived to Keflav√≠k International Airport (its terminal is named Leifur Eir√≠ksson after the European discoverer of North America), really late: our plane needed refueling before departure and it ate quite a lot of time. Anyway, when we arrived a friendly taxi driver with a thick but good English was waiting for us with the cinematographic sign Mr. Berenguel. Our trip from the airport to Reykjavik took another while and we arrived at Aurora guesthouse close to 1 AM, with 2 hours more for us\u0026hellip; In short, we were wasted. We quickly checked the bag the driver gave us from Nordic Visitor (detailed road map, road guide, planning, Icelandic prepayed phone and a few more things, all perfect) went for a quick shower and off to sleep. The first surprise was the tap water: the cold one was great: Iceland\u0026rsquo;s tap water is the best water in the world. The hot water smells slightly sulfurous, but you get used to it pretty quick.\nThe next and real first day of our trip, we had planned sightseeing the city. We were pretty close to the Hallgrimskirkja, so it was our first stop. It is very new, wih a design based on the basalt columns of the majestic Svartifoss waterfall (we visited it a few days later). Went inside and the interior was interesting with a very nice effect. A big pipe organ was another highlight.\n  \nHallgrimskirkja og Leifur Eir√≠ksson, landkonnu√∞urin\nAfter this cultural visit, we went down until we saw the sea and turned on the main street (Laugarvegur) to do some shopping. In the first shop we went in, Laia bought a scarf and the shopkeeper talked to us in Spanish. She even said goodbye to us in Catalan! We started to love this country. We kept on shopping and walking. Gifts for us and the family, books. I bought myself a copy of The Little Prince in Icelandic (Litli Prinsinn) as part of my Icelandic learning.\n\nWhen we were tired of so much walking and shopping, we went to a nice kaffih√∫s (coffee house) called Kaffit√°r. The coffee was really good (and this will be mostly the in the whole country, good coffee or at least decent coffee). The place has free wifi, so we could check our email and post news to twitter. We were puzzled when, among other baristas, one of the barista prizes given to this coffee place was to someone with surname Ferrer, which is a pretty common surname in Catalonia (akin to Smith in English countries)\nThen we went to see the Parliament house (which we found unappealing) and as some kind of amusement, someone had written a poem in the ground. From there, we went walking towards Ad√¶lstr√¶ti, the oldest street in Reykjavik and on our way we found some old Viking tombstones in a park. On Ad√¶lstr√¶ti we shopped a little more (I bought ice cubes made of Icelandic granite!) and got completely lost looking for the bus station: we wanted to spend the afternoon in the Blue Lagoon (we ended up going to a similar place close to Myvatn, the Myvatn Nature Baths a week later).\nWhen we got hungry we went down to the harbour and ate some Icelandic hot dogs called pylsur (read here my recipe for homemade pylsur) in the best and oldest place to eat them, just by the harbour. I have also written a post about Icelandic food for foreigners.\n \nLeft: Fram og aftur, og aftur, fram og aftur (Back and forth, and forth, back and forth)\nRight: Einn stadur, einn t√≠mi og annar (One place, one time and another)\nWe visited quickly Reykjavik\u0026rsquo;s flea market and got lost again while trying to get to the Viking ship by the sea shore. Finally we made it and took some pictures, although the light was not good enough (just before leaving we took some pretty good pictures again).\n\nA modern monument in honor of Viking ancestry\nWhen we found the bus station, we were told that it was just too late to go to the Blue Lagoon (buses finished at around 17 and we could only spend something like an hour there), so we just sat to drink some coffee (and enjoy more wifi time) before going shopping for books about felting: Laia felt in love with what the Icelanders could do with it.\n \nLeft: City Hall\nRight: A commemorative sign of Iceland\u0026rsquo;s turn into a republic\nWe went to the Ra√∞hus, the City Hall, which is in a very nice place with a small pond beside (where a few geese were strolling). At this point we were really tired, and decided to go for a swim in a public swimming pool, which according to our guide should be open. Got to our guesthouse and packed our swimming suits and items. After walking a lot\u0026hellip; It was about to close, our guide had an error in the times for this!\n \nAlthough the weather looks good\u0026hellip; They sell wool underwear!\nWe went back and took a walk in the big gardens named Hlj√≥msk√°lagar√∞urinn and saw there a statue of Saint George. Had more pylsa for supper and went back to our guesthouse to pack everything and plan the following day. We prepared some pre-made couscous and went to bed. A tiring but very fulfiling day!\n\nMostly mittens!\nIf you want to keep reading about our trip through Iceland, don\u0026rsquo;t forget to subscribe!\n¬´ -\n¬ª Road Trip Through Iceland: Day 2 - The Golden Circle (Thingvellir, Geysir and Gullfoss)\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2011/02/road-trip-through-iceland-day-1.html/","tags":["Iceland2010","Iceland"],"title":"Road Trip Through Iceland, Day 1: Reykjavik - the city I'd like to live"},{"categories":null,"contents":"\nThis is Steven!\nI guess there is not much need of an introduction for Steven. Just in case, Steven Pressfield is a best-selling author who started its career with The Legend of Bagger Vance and then started to write historical fiction, usually military themed. Some of his books (like Gates of Fire and Tides of War) have achieved cult status among military people, and they are even used as teaching material in some military schools. He is also widely known for writing The War of Art, a book which is best described by its sub-title: Break through the blocks and win your inner creative battles. A terrific book on stopping your creative procrastination and being a real professional. He also happens to be a blogger, writing in Steven Pressfield Online about several topics, don\u0026rsquo;t forget to check his blog.\nFocused interview: three questions, three answers. I\u0026rsquo;m very happy to have here Steven for the second installment in this series (if you missed it, the first was Leo Babauta).\nQ: In The War of Art you name the enemy of expressed creativity: Resistance (with capital R). You wrote two books just before TWoA: The Legend of Bagger Vance and Gates of Fire. When did you acknowledge this enemy, and how you decided to write about it? Why this sudden switch from fiction and historical fiction to non-fiction?\nSteven: Actually I wrote five books, all novels, before I turned to \u0026ldquo;The War of Art.\u0026rdquo; But the concept of Resistance had been clear to me all along.\nWhen you\u0026rsquo;re a professional writer who is working regularly, a lot of people (friends mostly) will get you aside and confide that they, too, have a book they\u0026rsquo;re planning on writing. But they\u0026rsquo;ve just never gotten around to it. Or other obligations keep getting in the way. I wound up spending many nights, till two in the morning, talking to friends and encouraging them to go ahead, do it, plunge in, write that book that\u0026rsquo;s inside you! I told them about my own struggles with self-sabotage. I came up with a name for this negative force. I called it Resistance. I told my friends that the excuses they kept coming up with (and believing) were just Resistance. Ignore this! Press on!\nOf course nobody ever did, and I got tired of giving this same speech over and over. Then one time, after my fifth book, I had a couple of months free. I thought, \u0026ldquo;Why don\u0026rsquo;t I sit down and bang out all that stuff I always tell my friends. Then the next time someone tells me they have a book inside them that\nthey can\u0026rsquo;t seem to write, I\u0026rsquo;ll hand them THIS book and say, \u0026lsquo;Here, read this.\u0026rsquo;\u0026rdquo;\nThat\u0026rsquo;s how \u0026ldquo;The War of Art\u0026rdquo; came to be written.\nQ: In The War of Art (and your blog), you say that you believe that books and music are already written, and we get them through our connection (imperfect as it may be) with the Muse. You even quote D.H. T.E. Lawrence\u0026rsquo;s translation of the \u0026ldquo;Invocation of the Muse\u0026rdquo;, from Homer\u0026rsquo;s Odissey. I prefer a line from a Keats\u0026rsquo; poem \u0026ldquo;Read me a lesson, Muse, and speak it loud!\u0026rdquo;. Rituals play a powerful role in harnessing our creativity. What other rituals have you heard about from fellow writers and screenplay writers?\nSteven: Actually it was T.E. Lawrence (\u0026ldquo;Lawrence of Arabia\u0026rdquo;) who translated the Odyssey. Forgive me, Ruben; I don\u0026rsquo;t want your readers to think we\u0026rsquo;re getting it wrong (Note from Ruben: it was my fault! Never trust a bad Google search more than your own faulty memory). I like your line from Keats too. I\u0026rsquo;ve never seen it before.\nRituals are powerful in any creative endeavor because we, the mortal practitioners, are dealing with forces from the unconscious, from the Muse, from the Quantum Soup ‚Äìand of course we have no way to summon them or bring them forth upon command. We can only invoke them, which is to say offer up a prayer and render ourselves open to whatever signal we receive from the Great Radio Station in the Sky. Rituals and rites are the signals that we send out. They express our receptivity. They announce our quietness and our willingness, even eagerness, to listen. They abnegate ourselves. They renounce ego.\nPeople can dismiss such acts as superstition (and, of course, in a way they are.) But, as you say, they are powerful tools in the hands of those who have found favor with the gods and stand ready to do their work.\nQ: You are both a blogger and a writer, and as such stand somehow in the middle of the old publishing methods and the most recent ones. In these times of blogging, social networks and so much free content, how are \u0026ldquo;hardback\u0026rdquo; writers keeping afloat? How have you switch personally?\nSteven: It\u0026rsquo;s always been tough for \u0026ldquo;hardback writers.\u0026rdquo; I don\u0026rsquo;t know how many writers support themselves and their families entirely on the proceeds of their literary endeavors, but I\u0026rsquo;ll bet it\u0026rsquo;s a pretty modest congregation. Most writers, I\u0026rsquo;ve found, have \u0026ldquo;real\u0026rdquo; jobs. They teach. They do other stuff.\nThe new world of free content, as you note, Ruben, isn\u0026rsquo;t making it any easier. Speaking for myself, I haven\u0026rsquo;t found a way yet to monetize my efforts on the web. So far, I don\u0026rsquo;t mind. I\u0026rsquo;m hoping this new universe will evolve and new forms will emerge. They\u0026rsquo;re already starting to. I\u0026rsquo;m very optimistic. First, I think that traditional publishing will stay strong. E-books will help, not hinder. And people will always want to hold real books in their hands. I know I do.\nMeanwhile new forms of writing (and even literature) will emerge. Some will be short. Mini-books that we can devour in an hour or two, sort of like long magazine articles. Others will be longer, with embedded videos and hyperlinks, audios and interviews and stuff no one\u0026rsquo;s even dreamed about yet.\nMyself, I\u0026rsquo;ve got feet in both worlds. I\u0026rsquo;m working on several projects that are web-specific, that\u0026rsquo;ll probably find their niche (if they do) in the e-World somewhere. But I also have a big, old-fashioned, long-term project in the works.\nThe world of art has never been easy. There has never been security. It\u0026rsquo;s always a gamble. Nobody ever knows anything. You have to be crazy to thrive in it. You have to do it out of love. And the world has always changed so fast that you can\u0026rsquo;t predict two years or four years into the future. You start a project, knowing that the world will be different by the time you finish it. Maybe the world will have moved completely past it. There\u0026rsquo;s no way to predict. You have to do it anyway, because you love it.\nThanks to Steven for this interview, and stay tuned for the ones that will come. Be prepared to buy his upcoming book, a kind of follow-up of The War of Art, called Do the Work! Coming out in April 20th, you can start pre-ordering :) Update: you can read Review of Do The Work, by Steven Pressfield.\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince LombardiParseList(ScrambleList(Relateds(Productivity)),0)\n","permalink":"https://mostlymaths.net/2011/02/focused-interview-with-steven.html/","tags":["Focused Interviews"],"title":"Focused Interview with Steven Pressfield"},{"categories":null,"contents":"\nFrom my cheap dictionary\nAs a byproduct of The Language Switch, I was invited to send a guest post to Bitesize Irish Gaelic, a wonderful site where you can learn Irish gaelic online.\nLast year I decided to learn Icelandic because we were going to Iceland, this year I was learning Gaelic\u0026hellip; Thus we decided that Ireland might be a good place to visit this summer on holidays, encouraging me to learn better this new language. As I began my course in Bitesize Irish Gaelic, I saw it is an interesting language (but for me most are), more so, it was a well-planned course with friendly people in the forums, I decided to get a little more serious about it.\nIn addition to all this, for my birthday, Laia bought me a book titled Teach Yourself Gaelic, from my beloved Teach Yourself series (the same collection where my book on Icelandic sits). We were very surprised when we discovered it was a book on Scottish gaelic!\nI was challenged with a new language, somehow as a dialect of another I am learning currently. It is not formally a dialect, but the two languages are very closely related. If I can learn one of them, I can learn the other\u0026hellip; And probably at the same time. How could I miss this language train?\nI\u0026rsquo;ve been thinking lately about effective ways of language learning applied to languages with not so many speakers, where you can\u0026rsquo;t count on immersion (some of which I wrote in the guest post I was talking before), and I\u0026rsquo;ll try to implement them to learn Scottish gaelic with the help of this book (as a source of grammar and vocabulary). Maybe we\u0026rsquo;ll end up going to Scotland?\nThese next three months I will blog here about the process of learning a new language from level zero without any language immersion whatsoever and see how far I can take it in three months. I\u0026rsquo;ll share with you all my tips and tricks along the way. Stay tuned for new updates, and if you know Gaelic feel free to contact me and tell me how easy it should be!\nFor those of you who know my background, I won\u0026rsquo;t stop learning Icelandic in the meantime: one of this year\u0026rsquo;s goals is to improve my Icelandic to the point where I can read Egil\u0026rsquo;s saga. I\u0026rsquo;ll just devote more of my time to this new language for the next three months, while still honing my skills in Icelandic when the chance comes.\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2011/02/february-march-and-april-challenge.html/","tags":["Thoughts","Gaelic","Languages"],"title":"February, March and April Challenge: Language Learning Applied to Gaelic"},{"categories":null,"contents":" \nYes, that\u0026rsquo;s me with a polariser.\nWait, playing Dungeon Crawl\nin your Nanonote?\nInstalling Debian on the Ben is pretty easy after the work of the people at pyneo.org. I follow mostly their instructions which can befound here.\nThe first step is installing the package xburst-tools, following the instructions from the Qi Hardware Wiki about reflashing your Ben Nanonote.\nThe package can be downloaded in .deb format for Debian-like distributions. As I am usually in Arch Linux, I installed the confuse library with pacman -S confuse , downloaded the package tarball and uncompressed it, following the instructions therein. The only drawback is that uncompressing the tarball puts the executable files in binary directories which are not in my path, and to use usbboot (the main program talking to the Ben waiting to be reflashed) I had to use global paths. No big deal, though.\nAfter getting this program, you\u0026rsquo;ll need the boot image and the kernel, which can be found in the Qi Hardware\u0026rsquo;s site as Nanonote software repositories (latest) Be sure to pick one file named (something like) openwrt-xburst-qi_lb60-u-boot.bin (the boot part), and openwrt-xburst-qi_lb60-uImage (kernel image). If you want to have sound enabled in your resulting Debian system, be sure to pick also the file openwrt-xburst-qi_lb60-rootfs.tar.gz (this may be deprecated after changes in the OpenWRT build process)\nNow you have the boot and kernel, you\u0026rsquo;ll need to download a Debian rootfs prepared for the Ben. You can find one for Debian-Lenny in the Pyneo.org page, get it with either\n wget http://pyneo.org/downloads/nano/debian-lenny-mini.ubi\nwget http://pyneo.org/downloads/nano/debian-lenny.ubi\n The image I use is a debian-sid which you can get with\n wget http://mister-muffin.de/nanonote/debian-sid.ubi\n You could also follow the instructions in Qi Hardware wiki about debootstrapping any distribution for the Ben NanoNote, but it will be harder and messier.\nNow you have all the ingredients to install Debian on your Nanonote.\nBe sure to have it shut down and connect it with the supplied cable (directly to your computer, no USB hubs whatsoever) and start it in USB boot mode (by pressing U and the power button). Run lsusb (list USB devices) in your console to check for changes, when 601a:4740 appears (or something like Ingenic LB60, depending on your system), you are ready to do the following (as root or using fakeroot).\nIn what follows, path-to-loader is the path to the u-boot file, path-to-kernel to the uImage and path-to-rootfs the path to the ubi file with the filesystem (you should use the Debian you just got,\nbut could use Qi Hardware\u0026rsquo;s OpenWRT image.\n usbboot -c \u0026ldquo;boot\u0026rdquo;\nusbboot -c \u0026ldquo;nprog 0 path-to-loader 0 0 -n\u0026rdquo;\nusbboot -c \u0026ldquo;nprog 1024 path-to-kernel 0 0 -n\u0026rdquo;\nusbboot -c \u0026ldquo;boot;nerase 16 1024 0 0\u0026rdquo;\nusbboot -c \u0026ldquo;nprog 2048 path-to-rootfs 0 0 -n\u0026rdquo;\n Don\u0026rsquo;t skip step 4: I thought that the nerase part wasn\u0026rsquo;t needed as I was just overwriting the filesystem, but if you don\u0026rsquo;t, it won\u0026rsquo;t work and you will be left wondering what is up.\nNow unplug your Nanonote, remove the battery and put it again (it is the easiest way to restart it 100% sure). Boot it up and you should get a nice Debian prompt after the kernel loading screen (which will still show OpenWRT\u0026rsquo;s logo).\nYou are done! No, not really. This barebones system needs something useful. More so, networking and sound enabled!\nGetting sound working in your Ben NanoNote with Debian To get working sound I used a microSD card, if you don\u0026rsquo;t have one you will need to set up networking and some scp enabled system in your Nano.\nTo get sound working, uncompress the rootfs.tar.gz in your /tmp/ directory. Then copy everything from /tmp/lib/modules/kernelversion/ to your card or Nanonote. In my case, kernelversion was 2.6.32.16. In your Ben, create a directory named kernelversion in /lib/modules/ and copy everything in this newly created directory. The files you just copied are the kernel modules to get sound working.\nRun depmod /lib/modules/kernelversion/*.ko This will generate (among a few others) modules.dep in /lib/modules/kernelversion/. You are ready to go! Edit /etc/modules and add snd-soc-qi-lb60 at the end of the file and issue a reboot. You should see the following when the kernel ends its boot up steps:\n No device for DAI jz4740-i2s\nasoc: jz-codec \u0026lt;-\u0026gt; jz4740 mapping ok\n Sound should be working, although you will need some alsa magic to get it to do something. For it, we will need networking. By the way, Debian with sound enabled as a kernel module takes around 17 seconds to boot in my Nanonote.\nNetworking in your Ben Nanonote Now you need networking to check if sound really works, we\u0026rsquo;ll get some useful software in the Ben along the way.\nI have successfully set up this in both Linux and MacOS hosts. Start by plugging your Nanonote to your host with the supplied cable. We will configure the host system first, then the Nanonote.\nFor Linux You may need to be root to do this, I don\u0026rsquo;t remember. First you\u0026rsquo;ll need to enable network forwarding with\n echo \u0026ldquo;1\u0026rdquo; \u0026gt; /proc/sys/net/ipv4/ip_forward\n Now you set up the network interface with\n ifconfig usb0 192.168.100.1 up\n This is it for Linux hosts, at least this was enough for me in Arch Linux. The wiki page on Networking in your Ben NanoNote has a little more information in case this does not work.\nFor MacOS When you plug your Nanonote, a network preferences alert will pop up, asking you to go to Network preferences, like this one:\n\nThere is a catch, though: it may fail to appear. To get it to appear then you have to start playing with power up power down your Nano and switching USB ports. I\u0026rsquo;m not the only one with this problem, agrajag also pointed it out.\nI got my Mac to forget about previous connections by using a USB hub to plug the Nano, then unplug it and plug again in the usual spot. Rebooting the Mac also solves it.\nCAUTION: I tried to use a hub to connect to internet, and after enabling internet sharing my Nano ran out of memory and ended kernel-panic-ing.\nGo there and set up the newly discovered ethernet adaptor and assign an IP manually: fill in with 192.168.100.1\n\nNow go to the System Settings pane and open Sharing. Enable sharing your internet connection with the newly discovered ethernet device and apply, like the following\n\nCommon steps in the Ben Nanonote First set up the network interface with\n ifconfig usb0 192.168.100.2 up\n And enable a network gateway through your host system\n route add default gw 192.168.100.1\n Now point your DNS server to Google\u0026rsquo;s DNS servers with (you\u0026rsquo;ll only need to do this the first time you try networking)\n echo \u0026ldquo;nameserver 8.8.8.8\u0026rdquo; \u0026gt;\u0026gt; /etc/resolv.conf\n This should be it check with ping google.com and it should work if the host steps were done correctly.\nInstalling shiny new software With the packages listed here (maybe you can add octave and some other programming lanaguages), the Ben Nanonote turns into one of the most complete (non-graphing) pocket calculators out there. In theory, you could use fim or fbi to display images generated by gnuplot to a framebuffer console\u0026hellip; but I couldn\u0026rsquo;t manage to get it to work without either seg-faulting or crashing. You can also find a list of interesting packages and hacks in Marc Zonzon\u0026rsquo;s webpage.\nStart by updating the system:\n apt-get update\n Now you are ready to fill it up. Recommended stuff (i. e. What I put no matter what). Small descriptions included.\nemacs23nox The No-X emacs 23 build. It works pretty well in the Ben, even with just 32MB of RAM. Having emacs in your pocket is awesome.\nzile Zile is lossy emacs. It is a quicker loading small clone of emacs. Mostly keybindings, but for quick edits it loads way faster than the full fledged emacs\nfbterm Frame buffer terminal. With it, you can resize fonts with fbterm -s fontsize\ncrawl Dungeon Crawl Stone Soup, one of the best dungeon crawl games out there. To get it to work (albeit very slowly\u0026hellip;) you will need an SD card ext2 formatted to get swap memory in it (more on this later)\nnethack Works out of the box without needing swap hacks\nyacas Yet Another Computer Algebra System. Sadly it is no longer maintained, but it is awesome what it can do in just a tiny machine like the Ben.\npari-gp The calculator for number-theoretic people. I have also ran some computations in Pari, its programming language is pretty simple and its high precision arithmetic routines are awesome\nalsa- You will need all the family of alsa-utils, dev and so on. apt-cache search alsa and pick almost all.\nmadplay a command line music player I used in my powernap script\ncron If you want to run something periodically you need cron\ngcc Are you compiling something in your pocket or you are just happy to see me?\nCaveat: You may see the dreaded Bus errorackage list 0% when apt-getting or updating. This usually solves by deleting /var/cache/apt/*.bin (or /var/apt/cache/*.bin) and apt-get update again. If this does not solve it, clean completely var/cache/apt (files and directories), reboot and apt-get update. This made the trick for me, if it does not for you\u0026hellip; Well, you can try re-installing the system.\nSwap Okay, if you want to run crawl or just get short on memory, you will need either a swap partition or a swap file. As I am not into messing with partitions, I created a swap file. You will need an ext2 (or ext3 too, I think) formatted microSD card, mounted in /mnt/\n dd if=/dev/zero of=/mnt/swap/swapfile bs=1k count=20480\nmkswap /mnt/swap/swapfile\nswapon /mnt/swap/swapfile\n This will add a 20 MB swap file to your Nanonote memory. Currently I have a 50 MB one, previously I had 5 blocks of 10 MB that I swapped on when needed.\nBefore unmounting the card you will need to\n swapoff /mnt/swap/swapfile\n Happy pocket hacking!\nRelated posts:\nGcal: the ultra-powerful command line GNU calendar\nUnpacking my Ben NanoNote\nMy first port to the Ben NanoNote: gnugo\nAnother Ben Nanonote port: pmars\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2011/01/installing-debian-on-my-ben-nanonote.html/","tags":["Programming","Linux","NanoNote"],"title":"Installing Debian on my Ben Nanonote"},{"categories":null,"contents":"\nFrom my cheap dictionary\nI love learning languages. Since I picked my first Teach yourself English (in Spanish) from my grandparents place when I was 10 years old, I have been fascinated by languages and language learning, first human languages and then also by computer languages. Aside from English, Spanish and Catalan I can defend myself in German and French (enough to get directions and keep simple conversations up, although the last time I was in Germany all Germans I talked to said I could keep up pretty well\u0026hellip; Sure they are polite!). I have also tried learning Japanese and Russian, but didn\u0026rsquo;t make it really far, but there they are waiting for a chance.\nRecently (in broad terms, it was March 2010) I started learning Icelandic, through a book I can fully recommend called Teach Yourself Icelandic (this is the link for the latest edition, I have the previous one), and as of last week I started to use the more advanced Colloquial Icelandic. I\u0026rsquo;d love to be a Catalan mathematician in Iceland, but chances look pretty dim so far\u0026hellip; The only step I can do for sure is learning the language. I have been on and off learning Icelandic since then, and very recently I passed completely what I call the language switch.\nWhen you are starting out a new language, thinking or writing new phrases is usually as follows. You have a thought, you generate a phrase in your mother language (or another language you know well enough) and then you transform the phrase using your current knowledge to translate it, usually word by word and then refining the grammar until you have a phrase in your new language.\nAt least, this is more or less how it works for me in the first days and weeks (for some people I\u0026rsquo;ve known, it is always like this). Maybe months, depends on how much practice I can get by. But then, one day this changes.\nOne day, the language switch takes over. Your thought goes straight from idea to your new language. For example, the other day I was thinking some test phrases in Icelandic, about how many languages do I speak. I wanted to express this thought, and it just came out: √âg tala sp√¶nsku og catalansku (this I guessed from the way language names are build) sem m√≥durm√°l. √âg tala l√≠ka ensku, fr√∂nsku og and then here my language switch left me scratching my head, like when you have something in the tip of your tongue but just can\u0026rsquo;t work it out. What I wanted was German language, which then I remembered after thinking about some sample conversations from the book, it is √æysku (Germany is √ûyskalandi in Icelandic).\nThe interesting part is that I didn\u0026rsquo;t \u0026lsquo;know\u0026rsquo; what l√≠ka meant intellectually, out of the box. I wanted to express the concept of also, and my language switch knew l√≠ka from the examples I had read. When I had the phrase done, I had to think about it to remember that l√≠ka meant \u0026lsquo;also\u0026rsquo;. This felt like one step closer to reading Egils Saga in Icelandic, my reading is better as I only need to decode, not encode. My language switch is starting to get Icelandic in.\nThis example also show how I practise new languages. Trying phrases in my head is one of the ways. When I\u0026rsquo;m walking on the street, I try to \u0026lsquo;think\u0026rsquo; in my target language (like √âg er a√∞ fara vinna ‚Äî I\u0026rsquo;m going to work) or name objects I see and can name (b√≠ll ‚Äî car, kona ‚Äî woman, kaffih√∫s ‚Äî coffee place). What kind of tricks do you use in your everyday language learning?\nThis keeps on training the language switch, like learning new karate moves. Practising them slowly and increasing difficulty until you can make them perfect at full speed. The more you practice, the more words you learn and text you read will make your language switch be more precise, faster and broader.\nWhat are your tips in learning a new language when you don\u0026rsquo;t have time (or know anyone) to talk with a native speaker?\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](https://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2011/01/language-switch-or-how-my-brain-seems.html/","tags":["Islensk","Iceland"],"title":"The Language Switch (or how my brain seems to work when learning languages)"},{"categories":null,"contents":"\nNext week is the final exam of the course I\u0026rsquo;m giving, Numerical Analysis. Classes finished before Christmas, and this week is for students questions. I had one of these sessions this morning, when a pair of students came with a few questions related to the problems I solved on the blackboard.\nAll were quick to solve, until one simple question arose, concerning a trivial problem in Calculus 1 (or Analysis 1, as we name it here). The problem is:\n Given a sequence , the fact that for any   does not imply that  is a converging sequence.\n The statement is clear, and as a fact, it is something I\u0026rsquo;ve known for 9 and a half years, since my first semester of Mathematics. But they were not convinced. And I needed a counterexample for it to remove it. But I was out of ideas: out of the cold I just can\u0026rsquo;t find counterexamples unless I\u0026rsquo;ve already thought about that problem before (as a generic property, some times I can do it).\nThis is something I was already aware, but this morning was a big hit. I kept working during the day on my usual tasks, but on my way to take the train back home I had a few minutes to spare a thought or two while going there. But just took me 1 minute, from my office to the university side door.\nLet , then , which satisfies the conditions of the statement, and  does not converge.\nAnyway, I was not happy with this solution, as it was over our level in our first course. A more basic example not involving series should be easy to get. In the afternoon I had asked a friend the question through GTalk, but he was away, and as we picked it up again he wanted to know if I had some solution to it. I told him that indeed, but I was not happy. He then asked if the partial sums of the harmonic series were not enough (this is another name for my sequence ). As I told him that they were not, he suggested using logarithms. Aha!\nLet , then by applying the mean value theorem,\n,\nwhere  is a value between  and . And , which implies that this sequence also satisfies the conditions and clearly diverges.\nIn conclusion, I was able to find the counter-examples, but it took me far more time than needed. Is speed that important?\nOf course, all great mathematicians I know are able to answer these kind of questions (giving simple counter-examples to trivial questions, or finding trivial models to work on before moving to the big task), but does this come from experience or is just innate?\nWhile thinking about this problem, I remembered a book recommendation I was given a long time ago: Counterexamples in Analysis(buy on Amazon link). I never took the chance to read it\u0026hellip; Maybe the time has arrived!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nAnd e Appears from Nowhere\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Maths,Programming)),5)\n","permalink":"https://mostlymaths.net/2011/01/counter-examples-converging-sequences.html/","tags":["Thoughts","Maths","Bizarre"],"title":"Counter-examples, Converging Sequences and Giving Immediate Answers"},{"categories":null,"contents":"This is the notebook where I keep my to-do list, like the one you can see in the picture in Book Review: Do It Tomorrow. A quick and cheap way to have a small multi-page notebook you can keep always with you. Of course, calling this origami is a small lie, as you have to use scissors.\nI read a very good post about going the analog way (How analog rituals can amp your productivity) and this was my tool. I could have gone the Moleskine way (I have a pair of 7 odd cm sized pocket notebooks), but this is way cheaper and more handy. When you need one, you only need a A4, it can even have a side written up!\nAlso, when you finish your notebook, you can unfold it and fold it reversed to have another use!\n\nThis is the finished result\nYou will need an A4 (or any other size) paper and scissors.\n\nPut your sheet of paper in a flat surface\n\nFold in half\n\nFold along the sides in quarters\n\nUnfold and fold in half\n\nAnd fold along the sides in quarters\n\nPinch along the longer crease\n\nCut here\u0026hellip;\n\n\u0026hellip; and here \u0026hellip;\n\n\u0026hellip; and here. Cut also in the same spot above.\n\nIt will look like this\n\nPinch both sides, folding the sides to the center, from below.\n\nFinish the folding and hold.\n\nFlatten all flaps to the part below. The top area should hold the less paper folds.\n\nFold sideways.\n\nFold top to bottom.\n\nFlatten strongly. Ready to use!\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nHow I Got 4500 Visits Through Blog Commenting\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2011/01/diy-origami-notebook-to-keep-in-your.html/","tags":["Origami","Time Management","Productivity"],"title":"A DIY Origami Notebook to Keep in Your Jeans' Small Pocket"},{"categories":null,"contents":"\nThe gnus logo,\nfrom gnus homepage\nEver since my first post of the emacs 30 Day Challenge, I was warned about gnus slowness. A lot of comments in reddit pointed to this, and suggested using wanderlust or installing a local IMAP server (like dovecot or notmuch) to speed up the IMAP back-end (search, retrieval and processing), while also allowing for offline reading.\nThe main drawback was keeping it nicely cross-platform. As you may remember, I split my time between two computers: my MacBookand my Acer netbook. Any solution regarding to gnus had to be completely cross-platform in the most seamless way I could. And having a local IMAP server didn\u0026rsquo;t look like it (although notmuch can be installed through macports).\nWhen I posted my first update on gnus in HackerNews, a kind reader pointed me to the latest development snapshot, as having far, far better IMAP and nnir (the gnus IMAP search system) support. I went to the gnus homepage, and downloaded the latest CVS snapshot. It didn\u0026rsquo;t work any better, it was in fact worse: nnir search didn\u0026rsquo;t even work!\nThe problem? The latest development snapshot is in git, not in CVS! By the way, I have found very hard to know which is the latest version of gnus. I had Gnus 5.13 (if I\u0026rsquo;m not mistaken) before installing the git version, which is NoGnus 0.11 All gnus alpha versions are labeled NoGnus, to distinguish them from the final versions.\nWhat do you need to install the latest gnus? First, a recent copy of git. At least 1.7.0.4 as suggested by the gnus git page. Don\u0026rsquo;t ignore this: I had an outdated git in my MacBook and without upgrading it I could not get the package.\nOnce you have a current git system, fire a terminal window and go to where you want to have your new gnus. I did the following steps in ~/emacs/ Download the repository with\ngit clone http://git.gnus.org/gnus.git  and then you are ready to go with\ncd gnus ./configure  Now make would finish the charm and get you a ready to use gnus\u0026hellip; But sadly, it didn\u0026rsquo;t work in my MacBook (had no problems in the netbook)! The problem?\nCannot open doc string file \u0026quot;/Applications/Emacs.app/Contents/Resources/etc/DOC-22.1.1\u0026quot; make\\[1\\]: \\*\\*\\* \\[gnus-load.el\\] Error 255 make: \\*\\*\\* \\[lick\\] Error 2  I did a ugly hack to solve this,\ncd /Applications/Emacs.app/Contents/Resources/etc cp DOC-22.3.1 DOC-22.1.1 cd - make  YMMV here when copying the correct DOC-emacs-ver file. Just check which one do you have. Then I changed where my emacs looked for gnus by adding\n(add-to-list 'load-path \u0026quot;~/emacs/test-git-gnus/gnus/lisp/\u0026quot;) (require 'gnus-load)  to my .emacs file. When I checked with M-x gnus, it was blindingly fast. Starts up in a whim, and updates in a moment. But when I tried G G to do a mail search I got\nnnir search Symbol's value as variable is void: gnus-registry-install  D\u0026rsquo;uh! What\u0026rsquo;s this? I still don\u0026rsquo;t know\u0026hellip; But after a small google search I found a viable solution:\n(setq gnus-registry-install t)  Now you can check that G G searches amazingly fast through your Gmail inbox.\n(setq nnmail-crosspost t)  On the other hand, to prevent mails you processed through Gmail\u0026rsquo;s website (or another mail reader) to be again in your gnus inbox (and then being unable to delete them or mark them as read as the server responds with a \u0026ldquo;non existent post\u0026rdquo;), add this to your .gnus.el:\n(setq gnus-agent nil)  I hope you enjoyed this second installment in the world of gnus. I hope you give gnus another try, if the problem you had was its speed. The development git gnus will surprise you!\nIf you enjoyed this post, please share it with your emacs (or emacs-wannabe) friends through Hacker News, Reddit/emacs, Twitter or even Facebook. Thank you for reading this far!\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2010/12/emacs-30-day-challenge-get-latest-gnus.html/","tags":["emacs"],"title":"Emacs 30 Day Challenge: Get the latest gnus to improve speed"},{"categories":null,"contents":"During this week you will hear and read a lot about New Year\u0026rsquo;s resolutions. Questions like what do you want to change in your life for the next year and what good habits do you want to build next year are assumed to be always in your mind now. And they should, but not just now.\nNew Year is only a psychological landmark, and a very bad one. Something like 70% of those good intentions you had while the previous year was ending fade into oblivion before February 1st. Forget about New Year Resolutions.\nIf you want to do something, do it now. You will be the same person 31st December 23:59 and 1st January 0:00. Ryan Waggoner also made this point very recently, in a post about delaying things for tomorrow and then not doing them. I don\u0026rsquo;t completely agree with him, as I\u0026rsquo;m a fan of the Do It Tomorrow time management system, but his point should be used for tasks that are just put off until tomorrow, not scheduled for tomorrow.\nIf you want to start writing your book, the best moment is now. Pick a pen and paper and draft. If you want to quit smoking, throw all your cigarettes. If you want to do more exercise, put your running shoes and start strolling around your neighborhood. If you want to start your own business, decide on what, research the competence. If you want to learn a new language, go buy a teach yourself book for that language. If you really want, do it NOW.\nThere is no point in delaying things that you want to do until New Year. Start now, and you will begin the year with a real difference in your life, ready to last until 31st December of he coming year.\nIf you liked this post, please share it with your friends in Facebook, Hacker News, Reddit or Twitter. Spread the word!\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nFocused Interview with Leo Babauta (from Zen Habits)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2010/12/dont-wait-for-new-year-to-act-on-your.html/","tags":["Thoughts"],"title":"Don't Wait for New Year to Act on Your Resolutions"},{"categories":null,"contents":"\nSanta brought me the gift I wanted for Christmas: a pyrograph. In case you don\u0026rsquo;t know, a pyrograph is a tool to draw over wood, by burning it.\nAs you may already know, I love drawing (in particular, ink drawing). This is similar: you don\u0026rsquo;t have a lot of control over tone and a mistake can ruin the drawing.\nThis was the first time I used one, and to test how it worked I decided to draw a Celtic knot over a wooden box. In the central part I tried a little shading and leaving open areas to get other types of tones. I started with the upper left knotted area, then the center, right and ended with the circle and border. I still have to clean the pencil drawing from the pyrography box, add some detail in the front and add some varnish.\nSome tips when starting to use a pyrograph:\n Trace the contour first, then fill it. It is far easier, and the burn from the trace prevents the burn from the filling to spread to the rest. Move quickly, move constantly. If you stop for too long (to get a darker color) you can end with smoked areas (like in the left upper edge). Better to make repeated passes. When you start, a Celtic knot is a good option: it is easy (only filled areas) and looks good. Adjust the power of your pyrograph. My pyrograph has a scale from 0 to 10. I used 5 in the first area (where I got the smokey part) and then switched to 3 for the rest, except the brownish strings in the center know which were done at 0.6  I\u0026rsquo;m considering buying some books on pyrography from The Book Depository, but I\u0026rsquo;m still undecided. The two options are:\n Step by Step Pyrography Great Book of Woodburning: Pyrography techniques, patterns and projects for all skill levels\n  Which one do you think looks better? And what do you think of my first (still unfinished) box?\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nFocused Interview with Leo Babauta (from Zen Habits)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2010/12/do-you-fell-smell-of-burning-wood.html/","tags":["Pyrography","Bizarre","Books"],"title":"Do you Feel the Smell of Burning Wood? Pyrography Box Beta"},{"categories":null,"contents":"\nFrom morguefile\nIt\u0026rsquo;s Friday afternoon after a long day and a long week. You board your train and are lucky to find a seat, soon it is crowded with people standing and chatting. You feel tired after the day, and think just about taking a late afternoon nap upon coming home.\nBut you plug your earphones, turn up the volume just until you can\u0026rsquo;t hear the train sounds and you are in another place. Together with Bill Evans and his trio in Paris, you delight at his glimmering notes, like fireworks in a pitch dark night. You follow the rhythms of Eddie Gomez (the bassist) and Marty Morell (the drummer) for the journey while Bill\u0026rsquo;s piano keeps on gleaming in the night. Your body is inside a noisy train, but your mind is just anywhere else, just you and your music.\nYou can hear the soft mumbles of Glenn Gould while he plays the Goldberg Variations, or the fans reach the heavens at the end of Knockin\u0026rsquo; on Heaven\u0026rsquo;s Door by Guns N\u0026rsquo; Roses. You stand in the middle of the Sydney Orchestra while KISS\u0026rsquo; Paul Stanley tells you he knows a thing or two about her.\nMusic can take us to other places, and drive our mood just through the roof or straight down to the basement. We just need to tune in into the song and we will be there, choose wisely. Be it upbeat or downbeat, if you commit to really listening, be prepared to the change in your mood.\nI started very recently to take guitar lessons and learned a very important thing. Although I don\u0026rsquo;t realise it the day I skip my practise, the day I practise I feel very different after doing my chords and arpeggios. I can spend very easily an hour without being aware of the time, practising first, playing freely a little, or trying to make up the notes of some melody that caught my attention recently. Of course, this can only get better with time, as the mechanics of playing get ingrained in my muscles and my hands just creates the sounds my mind thinks of.\nThink about listening carefully as a form of meditation, probably best suited for today\u0026rsquo;s work life, when the only free time we may have is our commute, between work and preparing supper. Our mind, just like our legs after a 10km run needs a cool down after a work day. If you fail to give it, you\u0026rsquo;ll feel the mental equivalent of sore legs: mental fatigue. Take a deep breath, plug your earphones and disconnect.\nTake also advantage of the effect music has on your mood. Just like \u0026lsquo;music tames the wild beast\u0026rsquo;, it can change how you feel: for the good or for the bad. Choose wisely, depending on what you intend to do.\nWhen you are feeling down or tired, get yourself some moody music, close your eyes and let it flow through you. Let the sounds make you soar and start feeling good again. And when you are feeling terrific, put also some more upbeat music: you will get conditioned to feel terrific with it. And when you feel like it, listen anything: music is meant to be played and heard.\nIf you liked the subject of this post, you may enjoy Effortless Mastery: Liberating the master musician within, by Kenny Werner.\nIf you liked this post, please share it with your friends through HackerNews, Reddit, Twitter or whatever sharing method you like. Thanks!\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nFocused Interview with Leo Babauta (from Zen Habits)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2010/12/give-yourself-to-music.html/","tags":["Blog","Music","Thoughts","Productivity"],"title":"Get into the Flow: Music Meditation"},{"categories":null,"contents":"\nKeep your contacts\nunder control\nBbdb stands for The Insidious Big Brother Database, and is a very powerful contact book for emacs. It holds names, emails, aliases and other information and has good integration with gnus, wanderlust and vm (view mail). In my case, I have only checked gnus integration which is indeed pretty good.\nThis is the third installment in the set of posts for the emacs 30 Day Challenge: doing everything (as far as possible) from within emacs.\nFirst you\u0026rsquo;ll need o get the package from SourceForge here. Uncompress in something like ~/emacs/bbdb. The following lines can be add either to your usual .emacs file (if you want to use it \u0026lsquo;always\u0026rsquo;) or to your .gnus.el if you will use bbdb only when you use gnus. You can activate it with\n(add-to-list 'load-path \u0026quot;~/emacs/bbdb/lisp\u0026quot;) (require 'bbdb)  And activate gnus integration with\n(bbdb-initialize 'gnus 'message) (bbdb-insinuate-message) (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)  You are ready to start filling your database! The first step I took here was moving my bbdb file (the main contact database) to Dropbox with\n(setq bbdb-file \u0026quot;~/Dropbox/bbdb\u0026quot;)  This means that my database keeps automagically in sync from my netbookand my MacBook. Now that everything looks fine, let\u0026rsquo;s check gnus bbdb integration. M-x gnus, open some email from your inbox and press : (colon). Voil√†! You should have a newly created buffer with an automatic bbdb entry for the mail sender. You can edit the newly created record with e or add a new field with C-o. Also, delete the current field with d, and the current record if you are in the first field. For more information, press C-h m.\nOnce you have something in your database, you can search through it with M-x bbdb (or via anything.el integration, but this package is a topic for another post), and send an email to a contact by getting the cursor over their record and pressing m. This uses the default emacs mail sender, and you probably prefer to send this mail via gnus (I do, to take advantage of multiple SMTP accounts). To use it add the following to your .gnus.el:\n(setq bbdb-send-mail-style 'gnus)  But most times, I start writing an email and then decide to whom I want to send it. And bbdb together with gnus has a good method of doing this. You only need to type the first few characters of the name (forename or surname) or the first few characters of the (primary) net address and press tab to fill to the first result, and keep pressing tab to cycle to all possible completions. To get this, add the following\n(setq bbdb-complete-name-full-completion t) (setq bbdb-completion-type 'primary-or-name) (setq bbdb-complete-name-allow-cycling t)  Finally, some other configuration stuff I find useful\n(setq bbdb-offer-save 1 bbdb-use-pop-up t bbdb-electric-p t bbdb-popup-target-lines 1 )  where 1 means save without asking (one yes-and-no question you can skip, usually), and the other options make the default bbdb \u0026lsquo;record found\u0026rsquo; screen very small and disposable by pressing space (i.e. electric).\nYou may find answer to some bbdb questions in the emacswiki.\nIf you liked this, please share it with your emacs friends through Reddit, Hackernews or whatever you enjoy.\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2010/12/emacs-30-day-challenge-glimpse-of-bbdb.html/","tags":["emacs"],"title":"The emacs 30 Day Challenge: A glimpse of BBDB, The Insidious Big Brother Database and gnus"},{"categories":null,"contents":" \nThe gnus logo,\nfrom gnus homepage\nWhen the time to choose a mail reader for emacs came, as part of my emacs 30 Day Challenge, there were not really a lot of options. A long, long time ago I had tried vm (view mail) with no luck. I don\u0026rsquo;t remember the details (it was something like 3 years ago), but the results where unappealing. The only contenders where gnus and wanderlust.\nI managed to configure gnus pretty quickly: in only 30 minutes I had my gmail inbox working and was able to send mails through my main account. As an addition to gnus, I use bbdb to manage my contacts. You can read my post about bbdb and gnus integration.\nI decided to give wanderlust a try, after reading a good review and configuration steps from emacs-fu. But had no luck (at least in my netbook), some kind of connectivity problem, probably due to some package which was not the correct version: wanderlust is very picky with what version of what package you have installed. I gave up and stood with gnus.\nInstalling and configuring gnus with gmail and multiple smtp accounts If you have a recent emacs version, you\u0026rsquo;ll have already gnus installed and you can start it with M-x gnus. But it is far better to configure it first. And it is far better to start by installing gnutls or starttls, depending on your system. You can do this with your package manager in Linux, or using fink or macports in Mac OS. This allows you to use SSL to connect to your mail servers. This is also a required step to use twittering.el (to be covered in a few days) and I guess it is also required (or should be required!) by jabber.el\nI use gmail, together with several accounts from mostlymaths.net, and have configured my main account in gmail to be able to send mails through all my other accounts. Let\u0026rsquo;s configure this. The following configuration is taken from the emacswiki with a few other tweaks from here and there. First C-x C-f ~/.gnus.el, and add the following lines, filling in your details\n;; You need this to be able to list all labels in gmail (setq gnus-ignored-newsgroups \u0026quot;\u0026quot;) ;; And this to configure gmail imap (setq gnus-select-method '(nnimap \u0026quot;gmail\u0026quot; (nnimap-address \u0026quot;imap.gmail.com\u0026quot;) (nnimap-server-port 993) (nnimap-stream ssl))) ;; My version of gnus in my Mac does not handle html messages;; correctly (the one in the netbook does, I guess it is a different;; version). The following will chose plaintext every time this is;; possible. (setq mm-discouraged-alternatives '(\u0026quot;text/html\u0026quot; \u0026quot;text/richtext\u0026quot;)) ;; Available SMTP accounts. The format is;; type of connection - account in the from field - smtp server -;; port - login name - password. You can leave the password field ;; as NIL and emacs will ask every time (defvar smtp-accounts '( (ssl \u0026quot;mainaccount@gmail.com\u0026quot; \u0026quot;smtp.gmail.com\u0026quot; 587 \u0026quot;mainaccount@gmail.com\u0026quot; \u0026quot;yourpassword\u0026quot;) (ssl \u0026quot;mainaccount@mygoogleapps\u0026quot; \u0026quot;smtp.gmail.com\u0026quot; 587 \u0026quot;mainaccount@mygoogleapps\u0026quot; \u0026quot;otherpassword\u0026quot;) (ssl \u0026quot;workaccount@university\u0026quot; \u0026quot;smtp.gmail.com\u0026quot; 587 \u0026quot;mainaccount@gmail.com\u0026quot; \u0026quot;yourpassword\u0026quot;) )) ;; Now lets configure smtpmail.el with your name and functions to send;; mail using your smtp accounts by changing the from field (require 'smtpmail) (setq send-mail-function 'smtpmail-send-it message-send-mail-function 'smtpmail-send-it mail-from-style nil user-full-name \u0026quot;Your name\u0026quot; smtpmail-debug-info t smtpmail-debug-verb t) (defun set-smtp (mech server port user password) \u0026quot;Set related SMTP variables for supplied parameters.\u0026quot; (setq smtpmail-smtp-server server smtpmail-smtp-service port smtpmail-auth-credentials (list (list server port user password)) smtpmail-auth-supported (list mech) smtpmail-starttls-credentials nil) (message \u0026quot;Setting SMTP server to \\`%s:%s' for user \\`%s'.\u0026quot; server port user)) (defun set-smtp-ssl (server port user password \u0026amp;optional key cert) \u0026quot;Set related SMTP and SSL variables for supplied parameters.\u0026quot; (setq starttls-use-gnutls t starttls-gnutls-program \u0026quot;gnutls-cli\u0026quot; starttls-extra-arguments nil smtpmail-smtp-server server smtpmail-smtp-service port smtpmail-auth-credentials (list (list server port user password)) smtpmail-starttls-credentials (list (list server port key cert))) (message \u0026quot;Setting SMTP server to \\`%s:%s' for user \\`%s'. (SSL enabled.)\u0026quot; server port user)) (defun change-smtp () \u0026quot;Change the SMTP server according to the current from line.\u0026quot; (save-excursion (loop with from = (save-restriction (message-narrow-to-headers) (message-fetch-field \u0026quot;from\u0026quot;)) for (auth-mech address . auth-spec) in smtp-accounts when (string-match address from) do (cond ((memq auth-mech '(cram-md5 plain login)) (return (apply 'set-smtp (cons auth-mech auth-spec)))) ((eql auth-mech 'ssl) (return (apply 'set-smtp-ssl auth-spec))) (t (error \u0026quot;Unrecognized SMTP auth. mechanism: \\`%s'.\u0026quot; auth-mech))) finally (error \u0026quot;Cannot infer SMTP information.\u0026quot;)))) ;; The previous function will complain if you fill the from field with;; an account not present in smtp-accounts. (defvar %smtpmail-via-smtp (symbol-function 'smtpmail-via-smtp)) (defun smtpmail-via-smtp (recipient smtpmail-text-buffer) (with-current-buffer smtpmail-text-buffer (change-smtp)) (funcall (symbol-value '%smtpmail-via-smtp) recipient smtpmail-text-buffer)) ;; This wraps send mail via smtp mail, to be able to send multiple;; messages with smtpmail.  Now, we can configure the authentication process. Open ~/.authinfo and fill it with the following data\nmachine imap.gmail.com login john_doe@gmail.com password notapassword port 993\nIf you don\u0026rsquo;t like to store your passwords in plain text, you can either leave it blank (gnus will ask every time for your password) or use an encrypted authinfo file. I could not use this solution, as the emacs I have in my Mac has no encryption. But you can check it if you do!\nReady to use gnus! M-x gnus. After a few seconds of data processing, you should have a buffer named *Groups*. In gnus, you subscribe to groups, and the available groups should be your gmail labels. To subscribe to something, issue U followed by a double tab. This will show all the available labels. INBOX is the one you should not miss, of course.\n [](http://3.bp.blogspot.com/_f3d3llNlZKQ/TQPFumobpyI/AAAAAAAACwo/r3YHPdhoAHg/s1600/gnus-gotmail.jpg)  \ngnus groups -\u0026gt; INBOX -\u0026gt; new mail\nOnce you have INBOX in your *Groups* buffer, you may need to update it for new mails. Pressing g will fetch new mails (or news) from the server. Pressing enter will open that group and show you your unread mails. If they don\u0026rsquo;t appear in the INBOX buffer, it is somehow usual. If you had already checked and read your mail, fetch again in the *Groups* buffer and press enter, it takes you to the old INBOX buffer, without the new mails. Press M-g in it to fetch new headers and summaries. Pressing enter in your mails of course opens them.\nDeleting mails, composing and replying Now let\u0026rsquo;s say you want to move a message to the Trash folder in your Gmail account, or your Spam folder. Scroll to your mail and press B m (Backend command + move). Now you can choose which folder, and if everything worked smoothly, you could press double tab and show all folders. If not, write [Gmail]/Trash. This is the correct gmail trash folder. Once you are done with operating with your mails in this way, press M-g to really do move them to the trash (and by the way, marking them in Gmail as read).\nTo quit gnus, in the groups buffer press q (or Q if you don\u0026rsquo;t want to save \u0026ldquo;your progress\u0026rdquo;). In case of being lost\u0026hellip; Please, use the menus: gnus has a menu for almost anything and they are quite descriptive. And more important, never leave gnus without properly q or Quitting. Also, in my netbook I can\u0026rsquo;t suspend to RAM and then be able to re-start gnus. I have to q first. But in my Mac it works correctly.\nWe are almost done covering the simplest way to use gnus. Of course, we want to be able to write emails, or reply to mails we got! In the INBOX buffer, that would be r while reading or selecting a mail. To compose an email out in the cold, you can either use m in INBOX or *Groups* buffers. If you are in any buffer, you can compose an email with C-x m.\nAnd if you use bbdb (the big brother database, a contact manager with automatic fetching of gnus data), which I will cover in the next writing, you can compose an email after searching for someone (M-x bbdb query and then m in the resulting search results buffer). You can read about basic use of bbdb in A glimpse of bbdb and gnus.\nSearching your mail through imap And another interesting thing would be to be able to search within your mail. To do so you will need the nnir package and add a line in the imap configuration.\n;; To be able to search within your gmail/imap mail (require 'nnir) (setq gnus-select-method '(nnimap \u0026quot;gmail\u0026quot; (nnimap-address \u0026quot;imap.gmail.com\u0026quot;) (nnimap-server-port 993) (nnimap-stream ssl)) (nnir-search-engine imap))  You should subscribe to [Gmail]/All mail, and then press G G to search within your mail. This is a little slow\u0026hellip; But works.\nI\u0026rsquo;m still fiddling with gnus, and learning to use it more effectively, but this can get you going with using it for reading your mail. If I learn something new along the way (or someone more used to gnus posts it here) I\u0026rsquo;ll add it here or in a new gnus post.\nIf you enjoyed this, please share it with your emacs friends through Reddit, Hackernews or whatever you enjoy.\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html/","tags":["emacs","Linux","Mac"],"title":"The emacs 30 Day Challenge: Using 'gnus' to read mail"},{"categories":null,"contents":"Below you can find a commented version of the LaTeX template I used to create two free ebooks and A6 booklets. Now you can tweak it as much as you like it!\nThe syntax highlighted TeX code comes from the htmlize package in emacs, to keep with my emacs 30 Day Challenge.\n\\\\documentclass\\[9pt,openany,final\\]{memoir} % Set the font size with 9pt. Openany states that a chapter may start % in either page (recto or verso in publishing language). Final is the % way to say memoir to remove any comment crap we may have \\\\usepackage\\[pdftex\\]{graphicx} \\\\usepackage\\[english\\]{babel} \\\\usepackage{xcolor} \\\\usepackage\\[latin1\\]{inputenc} \\\\usepackage{wrapfig} \\\\usepackage{fix-cm} % fix-cm is a package to use arbitrary font sizes. I wrote about it in % http://www.mostlymaths.net/2009/03/big-fonts-in-latex.html \\\\usepackage\\[pdftex, colorlinks=true, linkcolor=black, urlcolor=blue\\]{hyperref} % hyperref makes for clickable links inside a pdf and the table of % contents. You can choose different colors as showed \\\\usepackage\\[activate={true,nocompatibility}\\]{microtype} % Microtype allows you to make a lot of nasty things to typography: % adjust kern spacing, font protrusion and font expansion. I think I % don't use it here (I use the fix-cm version), but the original % template I used did \\\\usepackage\\[paperwidth=9cm, paperheight=12cm, hmargin={1cm, 1cm}, vmargin={1.2cm, 0.8cm}\\]{geometry} % The geometry package allows you to set paper sizes. I tweaked it a % little until the size looked good. You can leave it as is and tweak % once you have everything written. \\\\widowpenalty 3999 \\\\clubpenalty 3999 % Options for word and line breaking \\\\makeoddfoot{ruled}{}{}{} \\\\makeevenfoot{ruled}{}{}{} % memoir options for footers. I leave them empty, with a ruled line \\\\makeevenhead{ruled}{\\\\footnotesize \\\\emph{\\\\rightmark}}{}{\\\\footnotesize\\\\scshape The Art of War, \\\\thepage} % Headings from memoir (even) \\\\makeoddhead{ruled}{\\\\footnotesize \\\\emph{\\\\rightmark}}{}{\\\\footnotesize\\\\scshape The Art of War, \\\\thepage} % Headings from memoir (odd) \\\\copypagestyle{chapter}{plain} % This copies the page style from \u0026quot;plain\u0026quot; to the first page of a % chapter. A hack in the memoir class, redefining chapter didn't work \\\\makeevenfoot{chapter}{}{}{} \\\\makeoddfoot{chapter}{}{}{} % Clean footers for chapters \\\\pagestyle{ruled} % I don't know why I state this, as all headings are already ruled. \\\\emergencystretch\\=\\\\maxdimen \\\\hyphenpenalty\\=10 \\\\hbadness\\=10000 % More options for line and word breaking \\\\setcounter{errorcontextlines}{999} % I used this for debug purposes. Can be removed \\\\definecolor{gray}{gray}{0.77} \\\\definecolor{darkgray}{gray}{0.4} \\\\definecolor{black}{gray}{0} % Color definitions in grayscale \\\\setlength\\\\beforechapskip{\\-10pt} \\\\setlength\\\\midchapskip{5pt} \\\\setlength\\\\afterchapskip{10pt} % These lengths are standard memoir names used for chapters. I just % tweaked the values until I liked the result. % Now I define a new chapter style, to be used through all the % document. I think the commands are self-explanatory: I use % renamecommand to change how the chapter will look like \\\\makechapterstyle{plroman}{ \\\\renewcommand\\\\chapterheadstart{\\\\vspace\\*{\\\\beforechapskip} {\\\\color{darkgray}\\\\centering\\\\MakeUppercase {\\\\fontsize{0.7in}{0.7in}\\\\selectfont\\\\romannumeral\\\\thechapter} \\\\par\\\\nobreak\\\\vskip1\\\\midchapskip\\\\hrule\\\\vskip0.5\\\\midchapskip}\\\\color{black}} \\\\renewcommand\\\\chapternamenum{} \\\\renewcommand\\\\printchaptername{} \\\\renewcommand\\\\printchapternum{\\\\centering\\\\MakeUppercase {\\\\fontsize{1in}{2in}\\\\selectfont\\\\romannumeral\\\\thechapter}} \\\\renewcommand\\\\chaptitlefont{\\\\huge\\\\centering\\\\color{black} \\\\vskip0.5\\\\midchapskip\\\\vskip0.5\\\\midchapskip} \\\\renewcommand\\\\afterchapternum{} \\\\renewcommand\\\\afterchaptertitle{\\\\vskip0.5\\\\midchapskip\\\\vskip\\\\midchapskip \\\\hrule\\\\vskip\\\\midchapskip\\\\vskip\\\\midchapskip\\\\vskip\\\\midchapskip} } % Use this chapter style \\\\chapterstyle{plroman} % Some more chapter \u0026amp; table of content redefinitions \\\\renewcommand{\\\\cftchapterfont}{\\\\scshape\\\\mdseries} \\\\renewcommand{\\\\cftchapterleader}{\\\\dotfill} \\\\renewcommand{\\\\cftchapterpagefont}{\\\\scshape\\\\mdseries} \\\\renewcommand{\\\\chapternumberline}\\[1\\]{\\\\hspace\\*{-5em} \\\\vbox{\\\\hfil\\\\hsize\\=7.5em\\\\MakeUppercase {\\\\mdseries\\\\romannumeral#1}.\\\\ \\\\hfilneg}} \\\\renewcommand{\\\\cftchapterbreak}{} \\\\begin{document} % Now the content! \\\\include{taow} \\\\end{document}  Be sure to check the free ebooks I posted using this template: The Art of War and How to Live on 24 Hours a Day.\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nHow I Got 4500 Visits Through Blog Commenting\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/12/commented-version-of-latex-file-to.html/","tags":["emacs","LaTeX","How-to","Books"],"title":"Commented Version of the LaTeX File to Create PDF ebooks and A6 Booklets"},{"categories":null,"contents":" It\u0026rsquo;s been already a week since I started my emacs 30 day challenge, and it is time for an update on how it is going and what packages I am using. I\u0026rsquo;ll start giving configuration updates along the way, I\u0026rsquo;m still fiddling with them. You can check also my post about using gnus to read mail with Gmail.\nBrowsing with Conkeror The same day I started my 30 day challenge, the emacs focused blog emacs-fu posted a wonderful article highlighting the conkeror web browser (not to be confused with Konqueror, the standard browser in KDE based desktops).\nConkeror is a web browser back-end over the Mozilla xul-runner engine, inspired by emacs. What does this mean? First, that it can be completely (or almost, as I have seen so far) used just with the keyboard, with (almost) standard emacs keybindings.\nFor example, C-x C-f opens an url in a new browser tab, C-x b switches tabs and C-x k closes a tab. Lowercase f follows links, which appear numbered as you can see in the screenshot below. Of course, C-g cancels the current command. An interesting thing, is that c copies any URL (works as f), but you can copy the current URL by asking it to copy the url numbered 0 (zero).\n\nWhy did I go with a not fully emacs solution for browsing?\nWell, first problem is that w3m is (mostly) text-based. Conkeror is a full fledged Mozilla based browser: anything that works in Firefox will work in Conkeror. In particular, Flash or Java based pages. Meaning I can use Google Analytics in Conkeror.\nThe other problem, is that the first time I wanted to search in Google in w3m, it wasn\u0026rsquo;t able to acknowledge Google\u0026rsquo;s reply, meaning I could not even search! Then I installed Conkeror in my netbook (Arch Linux) and started playing with it. Felt in love almost instantly.\nI am writing this in Conkeror, in my Mac OS. In principle, I was not going to get fully involved in the emacsification of my Mac computer, but yesterday I made up my mind. More on this later.\nIn my Arch Linux installation, it looked like the mouse did nothing, but so far I have found a few uses in the Mac: interacting with Flash and with the (non-Flash) blogger editor.\nReading mail with gnus. Gave wanderlust a try, didn\u0026rsquo;t work I\u0026rsquo;m reading mail with gnus, mostly. I still use my iPod Touch to read mail in the morning. And I still don\u0026rsquo;t know how to configure multiple smtp accounts. Well, to be precise: I know how to configure multiple smtp accounts! The problem is that they are different smtp accounts based in the same server, and the solution I found (configuring multiple smtp accounts in gnus) seems focused on different smtp servers. But I guess I can work on that to use all my gmail and Google Apps accounts.\nI tried to set up Wanderlust in my netbook, but had no luck. It had some kind of connection problem I was not able to solve in 20 minutes, and I already had a working gnus configuration so decided to give up on it. I got a few comments in Reddit to my previous post regarding Wanderlust. Indeed, it looks like the perfect solution for Gmail reading with multiple smtp accounts, but it didn\u0026rsquo;t work for me. I\u0026rsquo;ll stick with gnus for now.\nAn interesting point is that gnus also works (and works pretty well) to read RSS feeds. I checked this last Thursday with Ryan Waggoner\u0026rsquo;s blog feed (check his blog, is pretty good) and I may move my RSS reading from my iPod Touch to my Nanonote.\nChatting with jabber.el To chat, I use jabber.el to use my Google talk account to chat within emacs. So far no problems: it is a wonderful package. I\u0026rsquo;m using the latest version in my netbook, and an outdated version (but still working) in my Mac, just to save the 3 or 4 minutes of re-configuration. If it works, don\u0026rsquo;t touch it!\nI\u0026rsquo;m missing a little my MSN based friends (previously I used pidgin in my netbook and Adium in my Mac), but not a lot, as most of them also use Google Talk.\nI\u0026rsquo;d also love to have a way to interact with Skype (although I don\u0026rsquo;t use it very frequently), but the only one I\u0026rsquo;ve found only works in Linux, where I don\u0026rsquo;t do any Skype.\nTweet from twittering.el The package Twittering.el is the real deal with twitter posting from within emacs. I have it both in my netbook and Mac, and it works flawlessly, using OAuth. I had a small problem: the latest stable release didn\u0026rsquo;t work straight in my Mac, but once I replaced twittering.el with the latest git version, it started working. Now almost all my tweets come from it, unless a few I have posted through tweetdeck in the last days (as I was in my Macbook).\n\nAnd aside from that? Currently I\u0026rsquo;m using the same packages I\u0026rsquo;ve been using previously. Below comes a digest from my Modes.el, the file where I load all modes I use. I\u0026rsquo;ll talk about most of these during these days.\n AucTeX: The best way to do LaTeX Flyspell: Spell checking on the fly on any buffer Doc-view: View pdf\u0026rsquo;s directly in emacs Slime: whenever I do some Lisp or Clojure, I use slime (Superior Lisp Interaction Mode for Emacs) Yasnippet: Started using it as a suggestion to improve my hacks to write faster LaTeX. I don\u0026rsquo;t use it a lot: I find my hacks simpler. Gforth.el: Whenever I do some Forth, I use it interactively within emacs Cat and mouse: mouse cursor avoidance, your mouse cursor runs from your text cursor to be sure it does not block your view. Artist mode: Drawing in ASCII has never been so fun! Strokes mode: I stopped using it a while ago\u0026hellip; But is so much fun! Control emacs with mouse gestures. Org-mode: This is probably the best way to deal with your agenda. I use org-mode in my Ben Nanonote as a portable agenda. Pari mode: To interact with the powerful programmable gp-pari \u0026ldquo;calculator\u0026rdquo;.\n Recentf mode with timid completion: To be able to open recently closed files just by switching buffers\n Iswitchb mode: You should have this activated in your .emacs. Switch buffers with substrings from the name.\n I don\u0026rsquo;t know if it is deprecated, but boxquote.el is wonderful to create boxed comments in C-code, and are automatically re-boxed with rebox.el\n I started using very recently undotree mode, becase I liked a lot emacs-fu\u0026rsquo;s post about undo modes.\n I\u0026rsquo;m using emms in my Nanonote to listen mp3\u0026rsquo;s. I got a suggestion to use mp321.el, will give it a try later on.\n  Why I emacsified my Mac? Here in Spain, yesterday (Monday) and tomorrow (Wednesday) are national holidays. And today (Tuesday) is an optional holiday day, meaning this week we had a really long weekend: 5 days. I was going to Switzerland with my girlfriend, but the treacherous strike of Spanish air controllers left me on the ground\u0026hellip; With my netbook in my office. That would have mean almost a week without being completely emacs, as my plan was to do it only in the office. After being able to configure gnus without problems in my Mac, I just took the plunge and yesterday I finished all the configuration steps to have all the nice pieces.\nAs you can see in the first screenshot (the conkeror one), I just have 6 application icons in my dock now: Finder, emacs, iTunes, Settings, Preview and conkeror. And I could remove iTunes, Settings and Preview!\nStay tuned for more information on the challenge! Also, consider joining me and asking for specific configuration steps in the comment section.\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2010/12/emacs-30-day-challenge-update-1-writing.html/","tags":["Blog","emacs","Linux","Music","Mac","How-to","NanoNote"],"title":"Emacs 30 Day Challenge Update #1: Writing this in Conkeror"},{"categories":null,"contents":" \nFrom\nThe Design of the Emacs Logo\nAs you may already know, emacs is more than a (cross-platform) text editor. Some say that it is like a whole operating system (and some devil worshippers say that it lacks a good text editor\u0026hellip;). For the next 30 days (starting December 1, 2010) I\u0026rsquo;ll check it as well as I can. I will work just with emacs.\nYou can check the challenge updates below:\n[](http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-update-1-writing.html)\n Update #1: Using conkeror as a web browser, twittering-mode, jabber.el and gnus Update #2: Using gnus to read mail (in particular gmail)\n Update #3: A glimpse of bbdb: the insidious Big Brother Database and gnus\n Update #4: Get the latest version of gnus to improve speed\n  What it means At work, unless completely necessary, I\u0026rsquo;ll have just one open window: emacs.\nWhat I will do within emacs:  Read my email (gnus and gmail) Use twitter (via twittering-mode) Search in Google and basic browsing (within w3m) Search in MathSciNet (with a modified version of bibfind.el) View PDF\u0026rsquo;s (through the emacs23 native doc-view) Open images (emacs 22.3 and up, I think) Chat through Jabber (in Google chat, with jabber.el)  I may even consider reinstalling Emacs Multimedia System (EMMS).\nI\u0026rsquo;ll use my Ben Nanonote (running Debian sid) as emacs-enabled note-taking and portable agenda device, leaving my iPod Touch just for wifi browsing when needed. I\u0026rsquo;ll also use the Ben for writing post sketches on the train and programming on the go.\nWhat I may need to do outside  Checking some websites (mostly javascript based), buying online and similar. I\u0026rsquo;ll use Chrome as usual for this. So far, answering mails through multiple accounts: it can be done through gnus but I have not configured it yet (in 30 days I guess I can do it). Writing in this blog: can be done, but I don\u0026rsquo;t want the hassle. Checking facebook, but could be done through w3m (elisp native web browser) and the mobile site. I\u0026rsquo;ll just do Facebook at night, occasionally. At least for now, reading RSS. I\u0026rsquo;m very happy with my iPod Touch for this task, buy may consider doing it with the Ben Nanonote and gnus (for example) when I\u0026rsquo;m more comfortable with it.  I\u0026rsquo;ve decided to move all these tasks to late afternoon, meaning I\u0026rsquo;ll work within emacs and after work be slighly more flexible.\nWhat I\u0026rsquo;ll write about these 30 days I\u0026rsquo;ll write short (or not so short) tutorials on configuring some of the packages I\u0026rsquo;ve been using, and other interesting additions I have in my .emacs that I feel worth spreading. Expect from 5 to 10 posts, covering gnus configuration \u0026amp; simple use, org-mode as agenda and todo list, jabber for chat, doc-view for viewing pdf\u0026rsquo;s, AucTeX for LaTeX, shell mode hacks and some additional modes and tweaks from my .emacs along the way.\nBeware! I may end up posting some of these by January 2011, after I get fluent enough with these tools.\nI hope you enjoy it and share with your emacs friends.\nParseList(ScrambleList(Relateds(emacs)),5)\n","permalink":"https://mostlymaths.net/2010/12/emacs-30-day-challenge.html/","tags":["emacs","Linux","Maths","Productivity"],"title":"The Emacs 30 Day Challenge"},{"categories":null,"contents":"\nThis is Leo!\nFor those of you who don\u0026rsquo;t know, Leo Babauta is the creator of Zen Habits, a blog on simplicity, productivity and enjoying life named one of the top 25 blogs by Time magazine. He is also the writer of the Amazon best-seller book on productivity The Power of Less (affiliate link) and the un-copyrighted book Zen to Done (meaning you can find it for free somewhere else, this is an affiliate link for purchasing it). He has recently self-published a new book named Focus, which you can download for free (or buy with a nice set of additional content) from his website. I was fortunate enough to be one of his \u0026lsquo;beta readers\u0026rsquo; and even got something added to it: using the emacs text editor as a distraction-free full screen editor.\nBased on his idea of applying more focus to everything in life, I start a new category in this blog: the focused interview.\nFocused interview: three questions, three answers. I\u0026rsquo;m very happy to begin this category with three questions for Leo. Here they go.\nQ: You have been always preaching about simplicity in life: less clutter, less \u0026lsquo;stuff\u0026rsquo;, less tasks and commitments. Now you add a key ingredient: more focus. Given the outcomes that you\u0026rsquo;ve got from these, what would you pick if you could choose only one: more simplicity (without focus) or more focus (without simplicity)? Why?\nLeo: I don\u0026rsquo;t see them as two separate things. When I simplify and cut down on distractions, I find the focus I need to reflect and create. A lack of focus comes from complexity. But if for some reason I couldn\u0026rsquo;t focus even if I found simplicity, I\u0026rsquo;d take that ‚Äì I adore simplicity. Focus is just a nice by-product, but simplicity gives me so many other benefits ‚Äì peace, clarity, the ability to do what\u0026rsquo;s important to me, like spend time with my family.\nQ: At 37 years old you are in the middle of the usual work life. What advice would you give 18 years old Leo? And what advice do you think 60 years old Leo would give you?\nLeo: The 18-year-old Leo wouldn\u0026rsquo;t listen to the 37-year-old me. I was too headstrong and thought I knew everything. Now I know that I know very little. But I would tell the 18-year-old Leo: slow down and enjoy life ‚Äì it passes too quickly. I wouldn\u0026rsquo;t warn him against making any of the mistakes he will soon make ‚Äì wonderful things came out of those mistakes. As for the 60-year-old Leo, I have no idea what advice he\u0026rsquo;d give me ‚Äì but I\u0026rsquo;d like to know a few things: what stocks should I buy, do cellphones or laptops cause cancer, and are there finally flying cars in the future?\nQ: How has your minimalism and productivity ideas shaped your family life? Do your wife and children follow through? Are your kids using or starting to use your ideas?\nLeo: I do minimalism so I can enjoy time with my family. I don\u0026rsquo;t try to impose any of it on them, though I do hope to set an example they might find useful. My wife, for example, has become quite a minimalist, through no urging from me. I think we inspire each other. My kids are anything but minimalists, but I love them the way they are ‚Äì they\u0026rsquo;re perfect.\nThanks to Leo for this first interview, and stay tuned for the ones that will come.\nRelated posts:\nBook Review: The War of Art by Steven Pressfield (very recommended)\nPersonal Development for Smart People: A Not So Short Review\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince LombardiParseList(ScrambleList(Relateds(Productivity)),0)\n","permalink":"https://mostlymaths.net/2010/11/focused-interview-with-leo-babauta.html/","tags":["Focused Interviews"],"title":"Focused Interview with Leo Babauta"},{"categories":null,"contents":"If you are looking for the sample ebooks, scroll down a little (and don\u0026rsquo;t forget to subscribe if you have not done this already!)\nI started to look for ways to use LaTeX for doing ebooks very recently. My plan is to write an ebook on productivity and time management, with no deadline. I strive to make it the book I\u0026rsquo;d love to read when I started reading about time management\u0026hellip; And this means I\u0026rsquo;ll need quite a time.\nI wanted to use LaTeX because it is the typesetting system I use for mathematical typing, I know it well and it works wonders. The default document classes range from book to article to report\u0026hellip; But they weren\u0026rsquo;t completely well suited for an ebook at first look.\nTo solve this problem, I realised that the powerful memoir class covers a lot of ground. Memoir lets you tweak a lot of options, and get nicely looking books\u0026hellip; and with some tweaking, ebooks. To test the settings, I have compiled a few posts from this blog just as a test in a pdf ebook with 2 pages per sheet, cover pages and such and the result looks pretty good. If you think someone may be interested in a Best of Mostlymaths.net, I may consider finishing it and posting it here.\nWhen the time to test the How to do A6 booklets in 7 easy steps (with LaTeX) came, I went for typesetting some good books with the memoir class, and decided to pick up the Project Gutenberg plain text files for The Art of War and How to Live on 24 Hours a Day. Check the results!\n The Art of War: ebook formatted, tex source and A6 booklet format How to Live on 24 Hours a Day: ebook formatted, tex source and A6 booklet format  The settings I used for memoir are as follows (you can download the file from here and read a commented version here)\n \\documentclass[9pt,openany,final]{memoir}\n\\usepackage[pdftex]{graphicx}\n\\usepackage[english]{babel}\n\\usepackage{xcolor}\n\\usepackage[latin1]{inputenc}\n\\usepackage{wrapfig}\n\\usepackage{fix-cm}\n\\usepackage[pdftex, colorlinks=true, linkcolor=black, urlcolor=blue {hyperref}\n\\usepackage[activate={true,nocompatibility}]{microtype}\n\\usepackage[paperwidth=9cm, paperheight=12cm, hmargin={1cm, 1cm}, vmargin={1.2cm, 0.8cm}]{geometry}\n\\widowpenalty 3999\n\\clubpenalty 3999\n\\makeoddfoot{ruled}{}{}{}\n\\makeevenfoot{ruled}{}{}{}\n\\makeevenhead{ruled}{\\footnotesize \\emph{\\rightmark}}{}{\\footnotesize\\scshape The Art of War, \\thepage}\n\\makeatletter\n\\makeoddhead{ruled}{\\footnotesize \\emph{\\rightmark}}{}{\\footnotesize\\scshape The Art of War, \\thepage}\n\\copypagestyle{chapter}{plain}\n\\makeevenfoot{chapter}{}{}{}\n\\makeoddfoot{chapter}{}{}{}\n\\pagestyle{ruled}\n\\emergencystretch=\\maxdimen\n\\hyphenpenalty=10\n\\hbadness=10000\n\\setcounter{errorcontextlines}{999}\n\\definecolor{gray}{gray}{0.77}\n\\definecolor{darkgray}{gray}{0.4}\n\\definecolor{black}{gray}{0}\n\\setlength\\beforechapskip{-10pt}\n\\setlength\\midchapskip{5pt}\n\\setlength\\afterchapskip{10pt}\n\\makechapterstyle{plroman}{\n\\renewcommand\\chapterheadstart{\\vspace*{\\beforechapskip}{\\color{darkgray}\\centering\\MakeUppercase{\\fontsize{0.7in}{0.7in}\\selectfont\\romannumeral\\thechapter} \\par\\nobreak\\vskip1\\midchapskip\\hrule\\vskip0.5\\midchapskip}\\color{black}}\n\\renewcommand\\chapternamenum{}\n\\renewcommand\\printchaptername{}\n\\renewcommand\\printchapternum{\\centering\\MakeUppercase{\\fontsize{1in}{2in}\\selectfont\\romannumeral\\thechapter}}\n\\renewcommand\\chaptitlefont{\\huge\\centering\\color{black}\\vskip0.5\\midchapskip\\vskip0.5\\midchapskip}\n\\renewcommand\\afterchapternum{}\n\\renewcommand\\afterchaptertitle{\\vskip0.5\\midchapskip\\vskip\\midchapskip\\hrule\\vskip\\midchapskip\\vskip\\midchapskip\\vskip\\midchapskip}\n}\n\\chapterstyle{plroman}\n\\renewcommand{\\cftchapterfont}{\\scshape\\mdseries}\n\\renewcommand{\\cftchapterleader}{\\dotfill}\n\\renewcommand{\\cftchapterpagefont}{\\scshape\\mdseries}\n\\renewcommand{\\chapternumberline}[1]{\\hspace*{-5em}\\vbox{\\hfil\\hsize=7.5em\\MakeUppercase{\\mdseries\\romannumeral#1}.\\ \\hfilneg}}\n\\renewcommand{\\cftchapterbreak}{}\n\\pagestyle{ruled}\n\\begin{document}\n\\include{taow}\n\\end{document}\n If you are not LaTeX savvy, this may look like gibberish, but then you should probably skip it, get the books from the links above and tell me if you like them :)\nIf you know enough LaTeX, you\u0026rsquo;ll see that setting up the parameters for memoir is pretty straightforward (and more so given a sample!).\nIf you enjoyed this two ebooks, please spread them! Twitter, Facebook, StumbleUpon\u0026hellip; Whatever! Or subscribe to my newsletter if you want to get some (oddly) email with good tips on time management or productivity.\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nHow I Got 4500 Visits Through Blog Commenting\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/11/creating-pdf-ebooks-with-latex-with-two.html/","tags":["Time Management","LaTeX","Productivity","Books"],"title":"Creating pdf ebooks with LaTeX (With Two Free Examples: Art of War \u0026 How to Live on 24 Hours a Day)"},{"categories":null,"contents":" A few weeks ago I realised that I didn\u0026rsquo;t have a printed copy of Sun Tzu\u0026rsquo;s Art of War, and this thought collided head on with another old thought I had: could I use pdfpages to create A6 booklets? I use it frequently to turn my papers into handy A4 booklets (a few A4 folded in half), butI did not know if I could do it another time to generate A5 booklets, or even another time to get a small and nice A6 booklet\n As these two thoughts collided, I decided that the best way to check was to use as base PDF The Art of War, a book available through The Project Gutenberg. I formatted it as a LaTeX ebook with custom sizes (to get readable fonts) and compiled using the fantastic and powerful memoir class. I\u0026rsquo;ll give the details of how to create ebooks with LaTeX later this year or in the beginning of the next. I also did the same to Arnold Bennett\u0026rsquo;s How to Live on 24 Hours a Day.\nYou\u0026rsquo;ll need three TeX files, based on the one I already used in How to Create LaTeX Booklets. You can refer to that page if there is something missing in here. These files will turn the PDF successively into 2-pages per sheet to 4-pages per sheet to the final 8-pages per sheet printable booklet.\nI named the files Booklet2x1.tex, Booklet4x1.tex and Booklet8x1.tex for pretty obvious reasons. Their contents are:\nBooklet2x1.tex \\\\documentclass\\[a5paper\\]{article} \\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\usepackage\\[left=2cm,top=2.cm,bottom=2.cm,right=2cm\\]{geometry} \\\\usepackage\\[final\\]{pdfpages} \\\\begin{document} \\\\includepdf\\[pages=-, signature=80,landscape, frame=true\\]{Wrapper.pdf} \\\\end{document} Booklet4x1. \\\\documentclass\\[a5paper\\]{article} \\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\usepackage\\[left=2cm,top=2.cm,bottom=2.cm,right=2cm\\]{geometry} \\\\usepackage\\[final\\]{pdfpages} \\\\begin{document} \\\\includepdf\\[pages=-, signature=40,landscape, frame=true\\]{Booklet2x1.pdf} \\\\end{document} Booklet8x1.te \\\\documentclass\\[a5paper\\]{article} \\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\usepackage\\[left=2cm,top=2.cm,bottom=2.cm,right=2cm\\]{geometry} \\\\usepackage\\[final\\]{pdfpages} \\\\begin{document} \\\\includepdf\\[pages=-, signature=20,landscape, frame=true\\]{Booklet4x1.pdf} \\\\end{document} Later I realised that I did not need a5paper in the class part. As I explained in How to Create LaTeX Booklets, the signature is the number of pages per fold: in the case of a booklet, you have to aim for the closest multiple of 4 from above to the number of pages of the PDF file. In this case, I was lucky: the original file had 80 pages, that turned into 40 and then into 20 (resulting in just 10 pages to print).\nThe building can get a little tricky, because you need to cut correctly the booklet. That is why I used theframe=true option of pdfpages, this draws a thin line around the pages for a easy cutting process.\nStart by compiling the first tex file with pdflatex, and follow with the other files until you have Booklet8x1.pdf and print it two sided.\n You start with a bunch of pages resulting from the TeX files above\n   Cut in half to get a few A5 pieces.\n   And repeat to get A6 slices. Beware! You have to cut to have an A6 booklet consisting of A7 pages, not separate A7 pages!\n   You\u0026rsquo;ll end with a bunch of small groups of 2 pages (4 pages per sheet). Pile them in a way that the numbers are consecutive. Keep in mind that you will be folding in half, thus on the left you will have page 2 and the right side you will have page 79. On top of this you need to have page 3 and page 78 (covering pages 2 and 79), and so on. If you don\u0026rsquo;t get it know, you\u0026rsquo;ll understand it once you have the pages in front of you, don\u0026rsquo;t worry.\n Once you have them neatly folded in half and piled, place them over a soft cloth and staple them along the spine. I usually get by with 2 staples, but feel free to go with one or add a third or fourth.\n You are done! Enjoy your pocket reading. If you wish, you can cover in plastic the booklet, it will last longer.\n","permalink":"https://mostlymaths.net/2010/11/creating-a6-booklets-in-7-easy-steps.html/","tags":["LaTeX","Books"],"title":"Creating A6 Booklets in 7 Easy Steps"},{"categories":null,"contents":"Hi readers! (woah\u0026hellip; 235 already! I\u0026rsquo;m so glad you\u0026rsquo;re here with me!)\nThis week I\u0026rsquo;m in Warsaw for a workshop (as I already commented in last post when I talked about the poster I am presenting).\nI was expecting to use idle hours between talks and afternoons to write posts and post a little\u0026hellip; But my internet connection is inexistent. This post is coming from an open wifi connection, which gets connected and disconnected at random, and when at its peak, just makes 3Kb/s.\nIt reminds me of my times with phone dial connection\u0026hellip; When I had to use the command line browser lynx to navigate when I was downloading Debian CD images.\nIn fact, I\u0026rsquo;ve been tweeting using lynx to open mobile.twitter.com\u0026hellip;\nSo, don\u0026rsquo;t expect any more posts this week (unless some miracle happens and I get a decent connection), but next week will be awesome because although I can\u0026rsquo;t post, I still can write and you can bet I am doing it.\nIn the meantime, feel free to read something from the archives or wander through the randomised links below posts!\nRelated posts:\nKeeping Up With Reading Research Papers\nOverwhelmed With Projects? Declare Task Bankruptcy\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nProcrastinating? Find the Next Step Up\nTime boxing: you will work like never before\nWinning Against Your Reading List\nParseList(ScrambleList(Relateds(Maths)),2)\n","permalink":"https://mostlymaths.net/2010/11/worst-connectivity-ever.html/","tags":["Blog","Maths"],"title":"Worst Connectivity Ever"},{"categories":null,"contents":" \nThis week I\u0026rsquo;ll be in a workshop on Complex Dynamics in Warsaw, and will present a poster titled Approximating bifurcation loci by zeros of functions. This is heavily based on a poster I presented last year in Copenhagen (titled Sets approximating regions of instability). The underlying work in progress has changed quite a bit since then, but this does not show in the poster. I just solve some problems in the exposition, from the questions I got back then.\nThe poster I did last year was typeset using Scribus and LaTeX, in my MacBook. I explained the procedure in Scribus for Mathematical Posters. Scribus does a wonderful work\u0026hellip; once you get used to how it works. And LaTeX of course is the tool.\nThe trouble starts in the Mac part The interesting part is that when time came to make the editions, some odd change in my LaTeX system on the Mac made the TeX sources unable to compile. It seems to boil down to the keyval package not working correctly, but I just could not find why as it was installed correctly.\nLast time I messed with my LaTeX system in the Mac I realised I didn\u0026rsquo;t remember exactly how I installed: was it fink, was it TeXLive or is it through MacPorts? Thus, solving this particular problem could result in spending far more time than I really wanted\u0026hellip; And I was already knee-deep in things to do before Monday.\nThe trouble continues in the Linux part I checked my netbook, and the LaTeX files compiled just fine. Thus, no problem: install Scribus on the netbook and go. But turns out I don\u0026rsquo;t have Latin Modern (the LaTeX fonts are Computer Modern, and Latin Modern are its most recent replacement) fonts for Scribus there. And I remember that the last time I installed fonts, back when I was an Ubuntu user was not really enjoyable.\nMy experiences with Arch Linux have been so far wonderful, but wasting half an hour or more solving this particular problem didn\u0026rsquo;t really appeal my Saturday-afternoon-doing-a-maths-poster self. I had to find a simpler solution. Compiling the TeX in the netbook and moving everything to the MacBook to generate the poster? Yes, but\u0026hellip;\nDropbox to the rescue! My solution was somewhat inspired. I registered for a Dropbox account two weeks ago, to simplify transferring files from my Mac at home and my Linux machine at work. Installing it in a Mac is as simple as any other Mac app, surprisingly, installing it in Arch Linux took me less than 15 minutes, together with thunar (file browser) extension and adding it to the start up scripts.\nI started to use it more frequently when I began to use PlainText in my iPod Touch to write blog posts and draft ideas. A few days ago I read this post on Reddit: Share your more creative uses of Dropbox, Hazel, Growl, Automator\u0026hellip; I just remembered it as I was thinking how much work it would be to use a USB drive to do this.\nI moved the poster folder to m Dropbox folder, worked the TeX files in my netbook and the Scribus file on the Mac. The best of both worlds (and the only solution not involving wasting my time) by using Dropbox.\nAnd my poster is finished on time!\nIf you want to get the most out of Scribus, you can get the book Scribus: Open Source Desktop Publishing from The Book Depository (free international shipping, affiliate link).\nAnd if you want to improve your geeky presentation skills, get Even a Geek Can Speak: Low-Tech Presentation Skills for High-Tech Peoplefrom Amazon.com(affiliate link).\nRelated posts:\nKeeping Up With Reading Research Papers\nOverwhelmed With Projects? Declare Task Bankruptcy\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nProcrastinating? Find the Next Step Up\nTime boxing: you will work like never before\nWinning Against Your Reading List\nParseList(ScrambleList(Relateds(Maths)),2)\n","permalink":"https://mostlymaths.net/2010/11/mathematics-poster-dropbox-scribus-and.html/","tags":["Linux","Mac","Maths","Productivity"],"title":"Mathematics Poster: Dropbox, Scribus and LaTeX for the Win"},{"categories":null,"contents":"\nDoesn\u0026rsquo;t it look nice?\nLast week Laia and me went to a toy/book/stuff shop to buy a music stand. Practising guitar without a music stand was starting to feel rather odd. While we were there, we bought several more items, among them an old time favourite from myself: a mirror rubik cube. An addition to my keychain cube, SuperCube, 5x5 cube and Rubik dodecahedron. I had only seen it online, from Amazon.jp. But I was able to buy it in Spain (boxed in Japanese, though), and when I came back home (and photographed it a lot) I found it was being sold in Amazon.comand ThinkGeek.com.\nIt works as an standard Rubik cube, only that there are no colors and the individual cubes have different sizes. It definitely looks gorgeous, although it feels slightly prone to breaking (I haven\u0026rsquo;t broken it yet). Standard Rubik cube algorithms work perfectly on it, I just solved it after scrambling. It costs around 20$/20‚Ç¨ depending on where and how you buy it.\nBuy yours in Amazon.com: Rubik\u0026rsquo;s Mirror Blocks Cube.\nBuy yours in ThinkGeek.com: Rubik\u0026rsquo;s Mirror Blocks Cube.\n \n \nRelated posts:\niHold: an iPod touch credit card stand\nCanabalt for iPod / iPhone game review\nVector Tanks: iPod Touch / iPhone game\nBackbreaker for iPhone/iPod review\nTrundle iPod / iPhone game review\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/11/mirror-rubik-cube-it-just-looks.html/","tags":["Games","Bizarre"],"title":"Mirror Rubik Cube: It Just Looks Gorgeous"},{"categories":null,"contents":"Lately my pile of papers to read has been growing steadily, and I\u0026rsquo;ve done very little to read all that stuff marked with \u0026ldquo;will read someday\u0026rdquo;. It had to come to an end, and it did with my previous Task Bankruptcy.\nReading research papers can be a huge waste of time\u0026hellip; Or end up in forming big piles of To be read someday. The problem is, usually someday never means today. And every time you look at your pile you get that feeling of not keeping up.\nA scheme of what I am doing now:\n Read it over quickly. Note down tools I don\u0026rsquo;t know or I need to refresh. If there are interesting references, note them down for reading Find out the unknown tools, if needed to understand what is done in the paper. Read again quickly. Write down over the first page of the paper the interesting theorems or tools used. (Optional) If a deep understanding of the paper is needed, read again slowly, checking coherence. Note down on the margin key ideas (interesting transformations, relationships with other problems, obscure references). (Optional) Write down a mind-map or scheme of the article if a deep understanding is needed.  This way, in as little as 30 minutes (if the subject is known) a whole article can be scanned for the interesting stuff, stopping in part 4. And usually with most articles step 2 is a very short step, in 1 hour you will have your article read and annotated for future reference.\nDid you find this post useful? If you did, please take two seconds to share it via Twitter/StumbleUpon/Reddit or take one second and subscribe to this blog. This would make a difference!\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nOverwhelmed With Projects? Declare Task Bankruptcy\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nProcrastinating? Find the Next Step Up\nTime boxing: you will work like never before\nWinning Against Your Reading List\nParseList(ScrambleList(Relateds(Productivity)),2)\n","permalink":"https://mostlymaths.net/2010/10/keeping-up-with-reading-research-papers.html/","tags":["Maths","Productivity"],"title":"Keeping Up With Reading Research Papers"},{"categories":null,"contents":" \nOffice mess. Yes.\nThat\u0026rsquo;s a Julia set in my wall\nA pile of papers to read on the side. A stack of notes for several unrelated projects. Assignments to prepare. Questions to answer by email. Inbox full of unclassified mails. Lectures to prepare. Cluttered office desktop. Cluttered computer desktop.\nA few weeks ago, Friday, this was what I saw when I looked at my office desktop. And I decided it was too much to bear and filed my first Task Bankruptcy.\nWhat is Task Bankruptcy? Task bankruptcy is a way to start over again, with a clean slate as your to do list and your old projects under control. It feels like a breath of fresh air when you see so much in your pending piles that you want to scream.\nAn example of task bankruptcy That Friday, my pile of research papers to read (because they were interesting, related to my field or needed some results as references and I had to check them) was of roughly 18 items, ranging from 10 pages to 60 pages (with a probable mean of 30 pages). And I was just in the middle of preparing a new paper, thus needing to read something around 5-10 new references, to see if someone else had done something similar, of I could improve my result by some tool I didn\u0026rsquo;t know at the time. Too much. I filed for research paper reading bankruptcy.\nWhat did I do? I picked a folder, put all old research papers there and marked it with Pending to read. Now I could concentrate on the new references. I printed one of them, the intention was to read it during the weekend. I also picked one of the Pending to read folder. This would also be read during the weekend (more on how I have been dealing with them quickly to appear soon).\nThis is the simple way to proceed after a task bankruptcy. You remove all pending tasks and start processing new task in such a way that they don\u0026rsquo;t overwhelm you. In my case, whenever I have a new reference I have to read, I print it out and add it to tomorrow\u0026rsquo;s to-do list. This avoids the will read one day syndrome, moving some day to just plain tomorrow.\nCan be applied to all types of tasks that tend to pile up This procedure can be applied to all tasks that get piled up. Like icons in your Desktop folder, mails in your inbox or files in your downloads folder. Just create a new folder marked as Pending and make a dent on it daily, until it is solved.\nOf course, for this to work you have to keep on processing new stuff in such a way that the pile does not grow again. Removing or filing your downloaded files, removing unused icons from your desktop or archiving or removing emails as you read them or act on them.\nPrepare a plan to deal with individual items After you have prepared your old stuff folder, you need a plan to deal with new, incoming tasks. And you need to stick to it. Assume there is a penalty for declaring bankruptcy twice in the same month!\nThere are several tactics you can follow to deal with stuff that tends to pile up.\nWeekly clean up: This works best with small number of items. Filing bills and credit/debit card receipts, check your accounts or whatever does not have more than 10-15 items on it.\nLeave it for tomorrow: This works best with items that may take more than 15 minutes to process individually. For example, reading (or even skimming) research papers, long newspaper articles or answering to long, non-urgent emails. Works better for stuff that may or may not happen daily but will take a while to work out.\nDo it as you go/Batch all in a day: This works for daily chores. Like reading your email or downloading files. Every time you download a file and install/read it, classify (or trash) it. Or as you read an email/answer an email, archive or trash it as you go. This works best for daily stuff that can easily run out of control. Keep in mind that if you are receiving 15 mails a day (I do, and I am not a heavy email user), this adds up to 105 mails a week. Hard to cope, fail two weeks and you are already overwhelmed. You can also batch all mails to be archived at the end of the day, to keep with the workflow without stopping to think where it fits during your day.\nRemove all your piles and start over again by declaring task bankruptcy now!\nPostscript: @nochiel asked for a higher resolution image of my office. Here you are (click to enlarge)\n\nDid you find this post useful? If you did, please take two seconds to share it via Twitter/StumbleUpon/Reddit or take one second and subscribe to this blog. This would make a difference!\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nProcrastinating? Find the Next Step Up\nTime boxing: you will work like never before\nWinning Against Your Reading List\n3 Ways to Sharpen Your Saw Daily\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/10/overwhelmed-with-projects-declare-task.html/","tags":["Time Management","Productivity"],"title":"Overwhelmed With Projects? Declare Task Bankruptcy"},{"categories":null,"contents":" \nFrom Yassin Hassan@Flickr\nDon\u0026rsquo;t forget to subscribe to my oddly newsletter!\n Ever tried. Ever failed. No matter. Try Again. Fail again. Fail better.\nSamuel Beckett\n One may say that to be a winner you have to be disciplined, commited, hard-worker, have a thirst for the win. But what a winner has almost always behind are countless failures, terrible defeats and fatal blunders.\nThe topic for this post has been jumping on and off from my mind for a few weeks, and what prompted me to finally write it was a very recent post by Gabriel Weinberg, web entrepeneur and CEO of the alternative search engine DuckDuckGo. In an already cramped web search jungle, he has made a place\u0026hellip; after selling one startup for $10 million and countless \u0026ldquo;failures\u0026rdquo;.\nHis is the most common case. It is very rare for web entrepreneurs to make it in their first try: not everyone can be a Larry Page, Sergey Brin or a Paul Graham, although on first sight it may seem like everyone makes it in their first try without ever failing.\nIf you are not programming inclined, I have another example you may have heard about. One of the most hard-core winners ever, Michael Jordan. Maybe you don\u0026rsquo;t know, but Michael has an older brother named Larry, with whom he used to play different sports as a kid. And as usually happens, the older brother defeats the younger 9 times out of 10. But Michael never gave up, never stopped and finally was able to win their 1-1 games\u0026hellip; And went on to win against everyone he was pitched against. And he went on to win 6 NBA Championships.\nYou may argue with me and say Winners are born! and I vow to disagree and say Winners are made!. More even, winners are forged. Hardship, stress and pressure all combine to turn carbon into diamond. Or as Dragos Roua puts it, turn iron into tempered steel. Take any outstanding personality that can be qualified as a winner (athlete, scientist, programmer\u0026hellip;) and dig a little in his life. You will see that more often than not his current prowess comes from defeat, failure and loss.\nThe difference between a winner and a loser is not the event of a defeat: it happens for both. The difference is standing up again in after a defeat. A loser may come back home, tail between the legs. A winner will clench their teeth and pledge for it not to happen again.\nA winner will keep failing, but will do its utmost to do it less, and less, and less. Until he is as close to perfect as it can get. If we chase perfection, we will attain excellence said the late Vince Lombardi. And he knew a great deal of being a winner: He won the NFL/Super Bowl 5 times. And this was after not being able to win as a player in Fordham University.\nWant to be a winner? Change your mindset There is a saying in the oriental game of Go that you should lose your first 50 games as quickly as possible. It is assumed that in doing so you will fail and learn, and with each defeat improve. In this sense, you should embrace defeat, as every defeat carries a lesson, and with each lesson you are closer to not losing again.\nThe Danish mathematician, artist, poet, inventor and designer (a real winner!) Piet Hein wrote a grook (a type of poem he invented) titled Road to Wisdom:\n The road to wisdom? Well, it\u0026rsquo;s plain\nAnd simple to express:\nErr\nand err\nand err again,\nbut less\nand less\nand less.\n Let\u0026rsquo;s follow this road from now on.\nStart by accepting failure. This does not mean that you should start a project already thinking you may fail. It means that once it is clear that this leads nowhere, accept it. And then move on to the next step.\nAnalyse your failure. From each failure comes a lesson. Get it right and next time you won\u0026rsquo;t fail. But be sincere: don\u0026rsquo;t blame others or the situation for your own faults. If you failed, acknowledge it and don\u0026rsquo;t do it again.\nEmbrace failure. This is the hard part. Take a few moments to embrace your failure. Accept it, analyse it, and then embrace it like you would to a good friend. It is your friend, because it has helped you avoid making the same mistake the next time.\nLet go. Keep trying. Having a failure in your back should thrust you further, not be a deadweight slowing you down.\nDid you enjoy this post? If you did, please take two seconds to share it via Twitter/StumbleUpon or take one second and subscribe to this blog. This would make a difference.\nRelated posts:\n_Overwhelmed With Projects? Declare Task Bankruptcy_\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nProcrastinating? Find the Next Step Up\nTime boxing: you will work like never before\nWinning Against Your Reading List\n3 Ways to Sharpen Your Saw Daily\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/10/what-it-takes-to-be-winner-embracing.html/","tags":["Thoughts","Productivity"],"title":"What it Takes to Be a Winner? Embracing Failure"},{"categories":null,"contents":"\nDisclaimer: For each sale that is made through the purchase links in this post I get a small commission (that does not affect your final purchase price!). Of course, I\u0026rsquo;d love if you bought any app through these links, but I have tried my best to make my review faithful. I don\u0026rsquo;t want anyone to come later at me and say they were tricked into buying any app and the review was unfaithful to the application. Anyway, I won\u0026rsquo;t get rich quickly (probably not even slowly) by these sales, but they will work the normal upkeep of this blog.\nI draft a lot of my posts in my iPod Touch. Writing long posts in an iPod Touch (or iPhone for that matter) may seem tough, but it is not. Once you get used to it, you can write pretty fast on its virtual keyboard using only your thumbs. But using which app?\nI used to do this blog writing using BlogPressLite (I even wrote a review of BlogPressLite), and then switched to just the iOS plain Notes application. But Apple got in the way, and added what at first looks like a good feature: mail syncing \u0026amp; backup. The catch? Its faulty, and you end losing half of what you wrote. I have lost big chunks of text (and even one full post while I was in Iceland) caused by sync problems. Needed to find a better solution.\nI stumbled on this post, reviewing different Dropbox based text writers (Writer, Elements and PlainText), and as PlainText was free, trying it was a no-brainer. PlainText (from the creator of WriteRoom for iPhone) is a very neat and simple application. You can just write, in an almost empty user interface. The only killer feature (besides its charming minimalism) is two way sync with your Dropbox account. Yes, true. You can write in your iPhone, edit in your Mac, close up in your iPhone and draw the final lines in your Linux machine. And at what price? Free. Ad based in a future release (with in-app purchase to remove completely the ads), but the advertising will appear only when reading your text, not when writing. All in all it is almost a perfect solution.\nI have written this review using PlainText (see screenshot below) on the train back home from guitar class, and also made corrections to a draft of this guest post in Dragos Roua\u0026rsquo;s blog.\n\nFree application+solves a real problem=epic win!\nRelated posts:\nSamurai: Way of the Warrior review\niPod/iPhone Origami Case Diagrams\nRetro on iPod Touch (2): ScummVM\niHold: an iPod touch credit card stand\nCanabalt for iPod / iPhone game review\nField Goal: iPhone/iPod Touch game review\nVector Tanks: iPod Touch / iPhone game\nBackbreaker for iPhone/iPod review\nTrundle iPod / iPhone game review\nParseList(ScrambleList(Relateds(iPod, Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/10/plaintext-text-editor-with-dropbox-sync.html/","tags":["Blog","iPod","Productivity"],"title":"PlainText: Text Editor with DropBox Sync for Your iPod, iPhone or iPad"},{"categories":null,"contents":" As you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. This is the sixth (and last) post in the series Things you should read before travelling to Iceland. If you came here directly don\u0026rsquo;t forget to read the previous post in this series\nEating in Iceland (if you are not an Icelander)\nRoad Trip Through Iceland\n_How Is Iceland\u0026rsquo;s Weather?_\n____Iceland\u0026rsquo;s Water: the Best Water in the World____\n__________Shopping in Iceland__________\nSleeping In summer, daylight lasts all day. Full 24 hours of light, more or less. And Icelanders don\u0026rsquo;t love window blinds. It has something to do with the fact that in winter they get no sun\u0026hellip; When there is, they enjoy it like madmen. If you can\u0026rsquo;t sleep with light, bring a sleep mask(Amazon affiliate link, they are cheap) with you. Better yet, wear it a few nights before going to Iceland to get used to it. I love using it when I want to oversleep here in Spain.\nAnother interesting sleepy point is that, from what we have seen, Iceland\u0026rsquo;s beds are incredibly comfortable! Enjoy them while you are there, you will definitely miss them back home. I already do. I have to go there again!\nOddities Iceland feels somewhat\u0026hellip; freak. Freak in the good sense, as Laia and myself consider us real freaks. Icelanders do lots and lots of handcrafts, Laia realised there she loves felting and bought several books on it, in Icelandic. We also bought an Icelandic breads book, also in Icelandic. I can\u0026rsquo;t really say why, but if you consider yourself a geek or freak\u0026hellip; you\u0026rsquo;ll be happy spending your holidays in Iceland. Of course, no offence intended, it is supposed to be a compliment!\nIcelanders are also very trusting. As an example, in M√Ωvatn we had as usual a guesthouse already arranged. We arrived around 17:00, and there was no-one around. The door was open, nobody in the office. We went back, because we saw a paper taped to the door\u0026hellip; It said Mr Berenguel, your room is Nr 3 and you have your keys in the doorknob.\nI hope you enjoyed this glimpse of Iceland, because what comes next is even more Icelandic (and longer). I\u0026rsquo;ll write what we did, with pictures! Seventeen days, with the interesting places and things we did back there. I still don\u0026rsquo;t have a clear schedule (one post per week for 4 months or write them and then post all the same day). But stay tuned, Iceland lovers! Subscribe if you have not done it yet!\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/10/sleeping-where-sun-never-sets-and-other.html/","tags":["Trips","Islensk","Iceland"],"title":"Sleeping Where the Sun Never Sets and Other Oddities"},{"categories":null,"contents":"\nHey! Look! A squirrel!\nGillesGonthier@Flickr\nA few weeks ago I realised I was procrastinating too much. I tend to work in cycles, and it looked like my productive cycle was over and my procrastinator half had just kicked in the worse possible moment: lectures had just begun.\nIt looked like there was no solution. My timeboxing strategies went nowhere, will-do lists (litemind.com) had no real meaning, carrot-and-stick solutions didn\u0026rsquo;t work. Nothing seemed to work at all.\nBut I knew what it really was. As Steven Pressfield explains in The War of Art, this was resistance. My inner demon fighting against me. I needed to strike back, and strike hard. Living my life was on the line.\nThe first step is the subject of this post, cutting on distractions, in particular web distractions. Previously I had been using Leechblock (a Firefox addon, see my review of Leechblock) to keep me from browsing for longer than a set time. It worked, but wasn\u0026rsquo;t perfect. Moreover I am using (and loving) Chrome now. This time I decided to act different.\nThe problem was that my web browser was always open, and it usually had a Gmail tab, a Facebook tab and a twitter tab. Too easy to procrastinate on these. I just don\u0026rsquo;t do this anymore. And this is the key. Sounds easy? It is not.\nI am addicted to checking my email and twitter constantly, checking my AdSense account and blog analytics repeatedly during the day. I can easily get a moment off, move from twitter to reddit or Hacker News and then my morning is gone. Wasting my time.\nI just gave it up. I force myself to check email or blog statistics only in idle time (compiling, printing, these odd minutes just before going to lunch), and no more.\nTo keep track of my twitter stream, I use paper.li, a wonderful free web app that turns your timeline into a kind of newspaper, with all links collected for your enjoyment. If I find an interesting but longish post, I add it to Read It Later to read while commuting in my iPod Touch. And at night I check my timeline for written tweets. I also use notifo in my iPod Touchto get a sound alert whenever someone sends me an @berenguel tweet, thus I can answer promptly.\nThese may sound like trivial solutions, but they are working wonders so far. I am only opening Facebook in the morning and night for just a few minutes, my twitter stream is almost rotting during the day (although I do tweet) and I am being more productive than the previous 2 months.\nOf course this works because it has a cumulative effect. First I drew from my willpower to start, then the ball started rolling on its own, and now I just don\u0026rsquo;t feel the urge to have Gmail always on, or check my blog analytics. They are good as they are, and will wait. It is amazing how just a day of giving up on these felt, and since then the feeling is only getting stronger.\nDo you have the willpower to start it? The endurance to keep on it? The pay-out is staggering: you will win back your life.\nDid you enjoy this post? If you did, please take two seconds to share it via Twitter/StumbleUpon or take one second and subscribe to this blog. This would make a difference.\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nPersonal Development for Smart People: a Not So Short Review\nProcrastinating? Find the Next Step Up\nLuck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\n","permalink":"https://mostlymaths.net/2010/10/cutting-on-distractions.html/","tags":["Thoughts","Time Management","Productivity"],"title":"Cutting on Distractions"},{"categories":null,"contents":"You may remember a post I wrote a month ago titled And e Appears from Nowhere. It was based (through some blogs I read) on a footnote from Prime Obsession(Amazon affiliate link) by John Derbyshire. The footnote reads:\n Here is an example of e turning up unexpectedly. Select a random number between 0 and 1. Now select another and add it to the first. Keep doing this, piling on random numbers. How many random numbers, on average, do you need to make the total greater than 1? The answer is e. (See sketch of proof in the previous post)\n I wrote some clojure code to test it, and even found the proof lying around. It was very interesting.., and the post was quite visited. A few weeks ago I got a comment in that post, hinting at another bizarre happening.\nIf you follow the previous procedure, in each step you will get a number greater than 1, say x(i) (for the step i). What is the average of x(i)? This is the average number you get greater than one in each step. Well, James (he made the comment) had a bug in his first try and computed that. He found out that this average looks suspiciously close to e/2.\nI also checked, and found the same. The modifications from my previous code were minimal:\n (defn PlusRandom2 [initial steps]\n; Initial and step start at 0. Will return how many times it takes\n; to be greater than 1\n(if (\u0026gt; initial 1)\ninitial\n(PlusRandom2 (+ initial (rand)) (+ 1 steps))))\n(defn AveragePlusRandom2 [iterates accumulator]\n; Takes the average of \u0026ldquo;iterates\u0026rdquo; iterations of the previous\n; function. Accumulator should start at 0\n(loop [n iterates accumulator 0]\n(if (= n 0)\n(/ (float accumulator) iterates)\n(recur (dec n) (+ accumulator (PlusRandom2 0 0))))))\n(def ehalf 1.359140914229522617680143736)\n And one run yields\n (AveragePlusRandom2 10000 0)\n1.3563358\n And indeed, a few runs comparing to e/2 return\n (- (AveragePlusRandom2 10000000 0) ehalf)\n-1.0387256539901024E-4\n(- (AveragePlusRandom2 100000000 0) ehalf)\n-4.57122720320946E-6\n The problem now is, how to prove it? I have been thinking it over for a while, and I guess it has something to do with the central limit theorem (maybe indirectly via sums of uniform distributions). But my knowledge of probability is far below the requirements, or maybe isn\u0026rsquo;t, but the time I can allot to keep trying is scarce. If any reader takes the plunge and finds a proof, I\u0026rsquo;ll be very happy to share it here as a guest post. Prepare your pens!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Maths,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/10/and-e2-appears-from-nowhere-follow-up.html/","tags":["Programming","Maths","LISP"],"title":"And e/2 Appears from Nowhere! (Follow up to 'And e Appears from Nowhere')"},{"categories":null,"contents":"\nStairs to Macchu Pichu,\ncourtesy of Shanidar\nI just realised why I procrastinate in some tasks. And it may also be why you do, read on! It is not because they are boring, hard or repetitive. They may be. Hard tasks are a measure of your strength, boring and repetitive tasks, of your stamina. No, the problem is another.\nSome projects are just tombstones. There are certain huge projects, with hardness and boredom along the way that when they are done, they are dead. You can\u0026rsquo;t look at them and say from there I\u0026rsquo;ll do that. They just finish and die.\nThese kind of projects are the hardest to finish because they bring a sense of end to our lives, like a certain death to our productivity schemes. The fear of the unknown ‚Äì what will I do after I finish? ‚Äì adds a stressing component to the uneasiness of the death sentence.\nI don\u0026rsquo;t know about you, but the moments when I\u0026rsquo;m feeling more accomplishee are when I am working in improving over one road with no end. Playing the guitar, training in karate, playing go all are paths without end. You can only keep getting better, and can set milestones ‚Äì play song X by Christmas, get my brown belt in March ‚Äì but you won\u0026rsquo;t feel all ended. Still a lot of fun ahead.\nChange your mental frame when approaching what seems like a sharp-ended project. The following three are the most common situations where you can change your point of view for a project.\n Will you learn some new technique with this project? You can then apply it later, and the hetter you perform in this project the more confidence in your future abilities ou will be. Will you show the results to someone? This may end up in new related opportunities, new relations, new projects. Will it look good in your resum√©? If it does, it may land you a better job\u0026hellip; where you are required to do it again.  Everything is interconnected, if your project does not follow the previous cases, I am sure you can find some situation in which here is a next step related to it. If you can\u0026rsquo;t, re-assess it. Are you sure you have to do it?\nDid you enjoy this post? If you did, please take two seconds to share it via Twitter/StumbleUpon or take one second and subscribe to this blog. This would make a difference.\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nPersonal Development for Smart People: a Not So Short Review\nLuck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi ParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/10/procrastinating-find-next-step-up.html/","tags":["Thoughts","Time Management","Productivity"],"title":"Procrastinating? Find the Next Step Up"},{"categories":null,"contents":"Two weeks ago it was the beginning of this years lectures. Currently I\u0026rsquo;m solving problems in the blackboard, 2 hours per week and take care of one computer lab (programming in C, but they have already done a C programming course and another course of numerical computations with C), all for our Numerical Analysis course (7th semester). This is the same schedule I had 3 years ago, also last year I had one computer lab each semester. I hate it.\nWhat\u0026rsquo;s the problem, you may think? The problem, my friend, is frame switching (more on this later, let me rant a little first). In this computer lab we have 2 big assignments split in smaller pieces (like coding a LU decomposition, implementing a Runge-Kutta integrator), all to be done individually. This results in lots of questions from students. And now comes the frame switching, when a student just rings your bell and asks Do you have 10 spare minutes?. I used to concede. No more.\nQuestions from students are not bad. It is what they are supposed to do when they don\u0026rsquo;t understand something. The problem usually is the amount of previous thinking they do. There are people who just were the code does not compile and I don\u0026rsquo;t know why. Keep in mind that these are not first year students. They have already coded in two previous courses. My answer could be summarised as The compiler writes things on the screen, read, only in a more tactful way. Luckily this question stopped appearing, but another one is pervasive in this course My code just did a segmentation fault and I don\u0026rsquo;t know why.\nIf you have done any amount of C programming, you know that a segmentation fault can be a nightmare to find (without the proper tools, of course). Our usual approach was to just printf all over the place (remember that we are there to teach mathematics, not computer science\u0026hellip;) until we find which value goes out of range. I got fed up of this method and started to use GDB. And last year we started using valgrind (a life saver!) and we gave our students a small example to see how it worked. With valgrind you can find segmentation faults in less than 10 minutes. At most.\nBut they still don\u0026rsquo;t get it. I had one student send me an email the other day (she was not even in my class!), sending me her code and asking whether I was able to find where it seg-faulted, because she could not. It was a rar file, hinting at using Windows. I answered her email suggesting to either use valgrind (not available in Windows, but coding for this classes is supposed to be done in a Linux system), fill the code with printf\u0026rsquo;s or just read the code carefully (and asking her teacher, not me, but that is another story). Then, out of curiosity I opened the code. I didn\u0026rsquo;t even need to compile. She was using an index without proper initialisation in the 5th line of the algorithm. WTF?\nAnd now we can come again to frame switching. When a student comes asking for just 10 minutes, you are usually doing task X. This task X started 1 hour earlier and you plan on finishing in around 30 minutes (be it a proof of a theorem or just TeXing some stuff). The student comes, and you have to listen to the question. Then you switch from your theorem-prover mode to your C-checker. You open the file. Compile, run valgrind, find where the index m should be a n. Answer so, the student does not get it, you explain it again. The student goes happily without ever doing anything to solve his own problem (they have the tools and the wits, they just don\u0026rsquo;t care). Now you have to come back to your problem, 20 minutes later, because usually these just 10 minutes grow to 20.\nHow have I solved the frame switching? My solutions are far from optimal. Roy van Rijn wrote a nice overview of his almost perfect solution in his blog (read it here). Mine is just a hack.\n Have just one hour of questions. By University requirements we need to have at least one hour of presence in our office, to allow students to come by and ask. The first step is to have an hour and just an hour. When the hour is over the questions are over. Even better if you have to go somewhere when it ends. No random appointments. If someone drops an email asking for an appointment to ask just a question, answer No. And then ask them to write the question down in an email. No random questions. If someone drops by asking for 10 minutes, answer No. If they ask when you will be available, make it as long as you can (which usually is true), and get them to send questions by email. No code. I won\u0026rsquo;t look code unless it is extremely necessary. If someone drops by in my scheduled time and has tried her best to find her error ‚Äì i.e. if she has a clear written overview of how the algorithm works, how her code works, has checked previous functions, is not leaking memory and so on ‚Äì then I will have a look at her code.  Why should this work to stop this time and concentration bleeding? Let\u0026rsquo;s see it point by point\n Parkinson\u0026rsquo;s law says that a task will grow to fill any time available. And student questions are no different. Make them come with a well thought question. Get them to do some work. 9 out of 10 questions can be solved in a 5 minutes written answer, whenever you feel like you have the time. Also, putting the question in writing usually means they have to think it over. Then they can solve the problem and don\u0026rsquo;t send the email. If they do, then they can read my answer over and over until they understand what I tried to say (yes, some stuff is better explained in a blackboard, but\u0026hellip;). This is what I most want to avoid, saying No is then the best answer. Then it goes back to point 2. There is a breed of students that think that learning is an osmotic process. They just sit, the teacher solves stuff and they learn by Sponge Bob\u0026rsquo;s magic. Unless you fight with your code, you won\u0026rsquo;t be able to do it alone.  And this is how I\u0026rsquo;m avoiding frame switching in this aspect of my life. Other aspects of frame switching are a little harder, but usually easier to cope with.\n My office mate only asks questions or starts chatting when she sees me idling. My advisor passing by usually means talking about what I am currently doing. Someone from the department asking a quick question could have a delayed answer, but usually does not take more than 5 minutes and by giving an answer I can come back when I need my own answers.   Related posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nPersonal Development for Smart People: a Not So Short Review\nLuck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi ParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/09/frame-switching-and-what-not.html/","tags":["Thoughts","Maths","Productivity"],"title":"Frame Switching and What Not"},{"categories":null,"contents":"As you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. This is the fifth post in the series Things you should read before travelling to Iceland. If you came here directly don\u0026rsquo;t forget to read the previous post in this series\nEating in Iceland (if you are not an Icelander)\nRoad Trip Through Iceland\n_How Is Iceland\u0026rsquo;s Weather?_\n____Iceland\u0026rsquo;s Water: the Best Water in the World____\nIceland\u0026rsquo;s currency is the Icelandic kr√≥na (plural kr√≥nur), with international code ISK. Iceland has a very strong economy, and we thought the prices would be extremely high compared to the Euro zone.\nWe were gladly surprised, prices are not that high compared to European prices, once we got the change right. Luckily for us, the Icelandic kr√≥na was around 160 ISK for an Euro, which is the same the Peseta (Spanish currency before Euro) was when the Euro was introduced, which made thinking about prices a charm.\nIceland was not as expensive as we expected. We packed a lot of food (instant soups, mostly) to avoid spending a lot of money on eating, but in the end, those same instant soups were available there for just a little more. If I were to go again to Iceland, I would buy instant food right there.\nThe best place to buy souvenirs is probably Reykjavik, just don\u0026rsquo;t buy in the first place you come upon and look a little around, almost all shops carry the same items. Anyway, prices are pretty much even across the city, but we saw Hnefatafl, the viking board game (wait for an upcoming blog post about it) priced from 6000ISK (~40‚Ç¨) to 9000ISK (~55‚Ç¨) all around Iceland. Look around, but not too much, time is also money.\nThere are also souvenir shops all around Iceland, offering different stuff than in the capital. We found a very nice shop in Egilssta√∞ir where we bought several wonderful items (fish scale diadems and scrunchies, two small leather satchels) for just around 40‚Ç¨, and another one in Husav√≠k where we bought 9 rhubarb jam jars as a gift for friends for just around 25‚Ç¨ total (not counting the overweight we had to pay coming back to Spain\u0026hellip;).\nIf you enjoy reading, you will find several book stores in Reykjavik and all over Iceland, the biggest one being the Eymundsson franchise, which extends all over Iceland (we found it in Reykjavik, Akureyri and Isafj√∂rdur). There is no problem in finding English books, but they are more expensive than they would be in Spain or where you live. And Icelandic books on Icelandic are quite expensive: I bought Egil\u0026rsquo;s Saga, Litli Prinsinn (The Little Prince) and an Islensk-Ensk or√∞abok (Icelandic-English dictionary) for the equivalent to 20‚Ç¨, 20‚Ç¨ and 60‚Ç¨ respectively. If you like languages and consider learning Icelandic, buy there, it will be cheaper than buying overseas.\nIceland will probably surprise you for the quality of the \u0026lsquo;souvenirs\u0026rsquo; you can buy there: wool is very common, and they produce a lot of different things, all very high quality. Also they are very keen of felt, and make wonderful stuff with it. Just walk around Reykjavik and enjoy your shopping, you will be probably surprised. And then enjoy the rest of the Iceland with its distinctive town shops.\nBefore I forget, the Icelandic sign for a souvenir shop with hand-made stuff looks like a snowflake (and is very similar to the sign for the Landsbankinn, the Icelandic national bank.\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/09/shopping-in-iceland.html/","tags":["Trips","Islensk","Iceland"],"title":"Shopping in Iceland"},{"categories":null,"contents":"\nAs you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. This is the fourth post in the series Things you should read before travelling to Iceland. If you came here directly don\u0026rsquo;t forget to read the previous post in this series\nEating in Iceland (if you are not an Icelander)\nRoad Trip Through Iceland\n_How Is Iceland\u0026rsquo;s Weather?_\nIf I had to gamble before going to Iceland, I would have thought tap water would be horrible. With so much volcanic activity, I was pretty sure tap water would have a sulphurous taste. And so, the first day I tasted it a little worried. It turned out I had no need to worry\u0026hellip;\nIceland\u0026rsquo;s (cold) tap water is considered to be the best and purest in the world, and when you come there you will realise it. We drank only tap water all over Iceland, except for two bottles we bought in the airport when coming back. We still miss Iceland\u0026rsquo;s water.\n\nVatnasafn\nOur host in Stykkish√≥lmur told us Iceland\u0026rsquo;s best water was right there in that town\u0026hellip; Indeed, it tasted fresher and colder. If you come there, drink a cup for us :) Stykkish√≥lmur also holds Iceland\u0026rsquo;s Vatnasafn: museum of water. It is over a cliff hanging over the city, with fantastic views. Consists of 4 meter columns of water, coming from all Iceland\u0026rsquo;s glaciers.\nHot tap water smells odd all over Iceland, but you get used to it pretty quickly. Just don\u0026rsquo;t think about drinking hot tap water or using it for cooking.\nAlso, Iceland\u0026rsquo;s running waters are safe to drink almost everywhere (i.e. don\u0026rsquo;t drink in \u0026ldquo;hot\u0026rdquo; places where there is a lot of geothermal activity). I drank a little in the beautiful Svartifoss waterfall. It tasted rocks, but was good and cold.\nFinally (not directly related to drinking water), Iceland is full of hot pools, either natural or man-made with natural waters. The ones we enjoyed the most were in Hoffell, they belonged to our guest-house owner and they are fantastic.\nRemember this is the fourth post in a series: you can find all other posts below as related posts.\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nShopping in Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/09/icelands-water-best-water-in-world.html/","tags":["Trips","Islensk","Iceland"],"title":"Iceland's Water: the Best Water in the World"},{"categories":null,"contents":" What? Biology and time management? Limiting factors? Okay, take it easy. First, let\u0026rsquo;s read this Wikipedia entry:\n A limiting factor or limiting resource is a factor that controls a process, such as organism growth or species population, size, or distribution. The availability of food, predation pressure, or availability of shelter are examples of factors that could be limiting for an organism. An example of a limiting factor is sunlight in the rainforest, where growth is limited to all plants in the understory unless more light becomes available.\n Yes, I know. You are wondering what this has to do with time management, or maybe what the heck is that for that matter. In biology, a limiting factor is something that keeps some species from growing without stop. As a simple example, the mould growing over your piece of stale cheese has a limiting factor of water, at first (it starts growing where moistness is at its highest) and if you let it run all over the cheese, will have food supply as a limiting factor.\nOk, now we have an idea of what a limiting factor is. And it has something to do with limiting growth. Again, what does this have to do with time management? Keep on reading!\nFor this example, I am assuming you are either working from home or with a flexible enough schedule to work whatever hours you want in every project. This may also apply to cubicle dwellers who are also used to doing whatever they want, but lets keep assuming flexible schedule.\nNow, assume you have something you love more than working, for example, writing your novel. You would do that all day long (more on that in a next article about finding your passion), but your work needs to be done or you won\u0026rsquo;t get paid. What could you do?\nThis is where limiting factors enter the play. Pair these two tasks: you won\u0026rsquo;t write your book if you do not work. Add a factor: for every working hour, half an hour of writing. Apply it. How? Now comes an example.\nExample: Let\u0026rsquo;s say you get up at 6 and write in your novel from 6 to 7:30. That is 1.5 hours, thus now you need to work today 3 hours. This example looks like there is no limitation, but the idea comes in reverse: if today you work 6 hours, you have put a limit of writing at 3 hours.\nHow can this help your overall productivity? Of course, the first step is commitment. You have to follow through with your set limits and times. If you don\u0026rsquo;t, this will not help your productivity, it will just give you some warm sense of well-being while wasting your hours.\nOnce you are committed, you will be playing with balance. You will be balancing how much time you can spend in good leisure (writing your novel) and good work (your work time). As much as you spend in one will limit how much you have to spend (or still have to devote) in the other.\nWhen these two tasks are balanced throughout your week, you can expand the system to all your tasks. Pair home management with TV viewing, for example, or going to the gym with reading. Of course, in the best case you can pair two tasks you love and which are also good for you: this is a win-win scenario in which you can work endlessly.\nHave you tried this technique? Are you willing to try it? Share your thoughts below in the comments section! Also, please feel free to contact me through twitter if you have any question!\nRelated posts:\n_Personal Development for Smart People: a Not So Short Review_[](http://www.mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html) Luck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/09/limiting-factors-biology-enters-time.html/","tags":["Time Management","Productivity"],"title":"Limiting Factors: Biology Enters Time Management"},{"categories":null,"contents":"\nThe Sun street\nAs you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. This is the third post in the series Things you should read before travelling to Iceland. If you came here directly don\u0026rsquo;t forget to read the previous post in this series\nEating in Iceland (if you are not an Icelander)\nRoad Trip Through Iceland\nWeather is not as bad as you may expect. As the saying goes, Iceland is green and Greenland is ice. Iceland\u0026rsquo;s weather in summer is mildly warm, ranging from around 2¬∫C to 15¬∫C (or more). The cold weather comes from the wind, which blows almost constantly and can reach easily gusts of 120km/h which in the Beaufort wind scale corresponds to hurricane strength. And 2 degrees with strong wind can feel really cold.\nMoreover, a lot of Iceland\u0026rsquo;s sights are either near the coast or are waterfalls, thus the wind blowing gets you wet and helps in getting you colder still. As an ultimate addition, it rains quite often. Rain means just a little water from the side, not huge precipitation levels, but just a little every few hours. As locals say, if you don\u0026rsquo;t like Iceland\u0026rsquo;s weather, wait 5 minutes. You can go from sun to rain to wind to calm in 30 minutes. A funny quote from our travel guide says It\u0026rsquo;s not like Iceland has bad weather, it is just that it has weather, and lots of it.\n\nDriving in the middle of\na cloud: When foggy,\nweather is cold\nBe prepared for cold with wind. At least 3 cloth layers and a wind-shield jacket. I wasn\u0026rsquo;t as prepared, and bought a wind-shield and a jacket from North 66 (Amazon affiliate link: 66 North). They are pricey, but I found them up to it. Beware: my jacket is an European XL and my wind-shield an European M\u0026hellip; keep an eye with the sizes.\n \nThe same picture\u0026hellip; Different weather\nBut you should be also prepared for warm and sunny days, and don\u0026rsquo;t be disappointed if you don\u0026rsquo;t see them. But when they come, they are a big surprise: the sun really heats, even at 15¬∫C.\nRelated Posts:\nIcelandic Waterfall and Rock Wallpaper\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nShopping in Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Things you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)[The 100 Most Common Words in Icelandic (more or less)](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/09/how-is-icelands-weather.html/","tags":["Trips","Islensk","Iceland"],"title":"How Is Iceland's Weather?"},{"categories":null,"contents":"re\nIceland is one of the few places\nwhere you can park inside a\nvolcano\nAs you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. You can read the day-by-day exploration with plenty of pictures by browsing the tag Iceland2010, which accounts our road trip. This is the second post in the series Things you should read before travelling to Iceland. If you came here directly don\u0026rsquo;t forget to read the previous post in this series\nEating in Iceland (if you are not an Icelander)\nWe rented a car. Maybe it is not obvious if you don\u0026rsquo;t know anything about Iceland, but public transportation is scarce, and the best way to get around is either with a full tourist bus or self-drive. And self-drive is more fun, as you spend the time you want where you want. The drawback\u0026hellip; driving in Iceland can get in your nerves. And I was the co-pilot\u0026hellip;\nThe main road in Iceland (Ring Road, or Road Number 1) circles the island around the coast. And is the biggest and most cared one. To give you a glimpse of what you can find\u0026hellip; a lot of places are just one-way in this main road. See it? Be prepared.\nMost secondary roads are bumpy gravel roads. And sheep in Iceland are everywhere, and more than a few are non-fenced. You are driving happily and a sheep with his/her two lambs can appear just in the middle of the road. Driving tip #1: Don\u0026rsquo;t brake when running over a sheep. Most Icelandic roads have mountain on one side and cliff in the other. If you brake strongly and turn to avoid a sheep, you can easily slide over the gravel and fall off the cliff. It is far safer to run over the sheep and then find the owner and settle the price with him.\n [](http://1.bp.blogspot.com/_f3d3llNlZKQ/TH6jS-TFnYI/AAAAAAAACoI/lX57wEK-RUY/s1600/SheepOnTheRun.JPG)  \nGravel+Animals+Sheep on the run!\nSome mountain roads can be filled with mud, which will cover your front and back wind-shield, even your headlamps. In all gas stations there are free water hoses to clean your car. Do it often, at least clean your lights for safety. Yours and everyone else\u0026rsquo;s.\n\nMud!\nI guess you came to Iceland hoping to see fjords. Well, if you drive counter clockwise, i.e. from Reykjav√≠k to V√≠k to Egilsstadir\u0026hellip; Maybe you don\u0026rsquo;t see a fjord unless you go to the West fjords. We had very thick fog all our way through the East fjords. And thick fog means thick fog. Thick as in mortar thick. Icelandic fog feels like a cloud coming down from the skies, you start getting up in a cliff\u0026hellip; and then you see just one meter ahead. Driving tips #2 and #3: Drive slowly under fog and don\u0026rsquo;t stop driving in the middle of the road! I guess this is common sense, but common sense is not that common, and better have a reminder.\n\n \nFeels like driving inside a cloud.\nWhat\u0026rsquo;s the smell of clouds?\nIf you come from a flat country, and even Spain counts as flat for this, blind heads may sound like nothing special to you. They are not in Iceland. Blindh√¶d (blind head) and blindh√¶dir (blind heads) are pretty common, and they are really blind, as some times you don\u0026rsquo;t even see the signal because it is too foggy. A lot of blind heads have a white arrow over a blue circle, pointing to the way you should go in a one lane two way road. Driving tip #4: when there is a signalled blind head ahead, slow down a lot, and beware of the arrow as it can lead you to a cliff! (no, I\u0026rsquo;m not kidding here).\n\nArrow to a cliff? Slow down\nIceland is bumpy, without any big mountain but a lot of ups and downs. You will find strong road rises and falls. Mixed with fog, strong turns and whatever it can throw you.\n \nUp \u0026amp; Down\nAnd this bumpiness some times leads to very long tunnels\u0026hellip; Like the 9km one-lane tunnel near Isafj√∂rdur!\n \nG√∂ng means tunnel\nAnother risky event are\u0026hellip; landscapes! Iceland has amazing landscapes, and the driver can be easily distracted\u0026hellip; and run down a cliff, or just over the side of the road, overturn the vehicle and ruin your trip. Driving tip #4: The driver should concentrate on the road, if the co-pilot sees something amazing, stop in one parking place, enjoy your views and keep driving.\n \nHey! Look! A volcanic cone!\nAs a final note, you will probably drive over some birds. A lot of birds nest by the sides of the road, or eat there, thus they start flying ahead when you drive nearby\u0026hellip; and others are dumb and will drive straight\u0026hellip;\n\nBird alert!\nYou have to ask you two questions daily: do you have fuel? do you have and know how to change a tire? There are some places where the next fuel station is more than 100km away, and you can run out of fuel in the middle of exactly Nowhere. Moreover, such bumpy roads mean that flat tires can be pretty easy: we had one!\n \nGame over: insert another tire\nBut don\u0026rsquo;t be too scared: we found an old Volkswagen Beetle coming all the way from Germany. If they did it, you can do it too!\n\nBeetle: Reaching places no one has been before\nOur mighty travel guide (Iceland, by Andrew Evans, The Book Depository affiliate link, free international shipping!) was pretty obsessive about Icelandic driving fines. Don\u0026rsquo;t run over the limit (there are plenty of radars, and on clear days, air-planes) to spot fast drivers and people who try to drive through F roads (the bumpier roads, where only 4x4 vehicles are allowed to pass). Don\u0026rsquo;t go off-roads. Fines can ruin your trip.\nYou can also be fined by parking in not allowed places, but we had no problem and found plenty of free places. For instance, in front of almost all tourist information spots there is free parking, and also beside the Hallgr√≠mskirkja in Reykjavik there are a lot of free spots.\nFinally, before allowing you to rent a car, they will tell you to watch this video. You can do it now and save you the waste of time there.\nDon\u0026rsquo;t forget to look at the previous posts in this series, and subscribe to read the following!\nRelated posts:\n_How Is Iceland\u0026rsquo;s Weather?_Eating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html) Shopping in Iceland\nIcelandic Waterfall and Rock Wallpaper\nThings you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html) The 100 Most Common Words in Icelandic (more or less)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/09/road-trip-through-iceland.html/","tags":["Trips","Islensk","Iceland"],"title":"Road Trip Through Iceland"},{"categories":null,"contents":"\nDisclaimer: For each sale that is made through the purchase links in this post I get a small commission (that does not affect your final purchase price!). Of course, I\u0026rsquo;d love if you bought this book through these links, but I have tried my best to make my review faithful. I don\u0026rsquo;t want anyone to come later at me and say they were tricked into buying the book and the review was unfaithful to the book. Anyway, I won\u0026rsquo;t get rich quickly (probably not even slowly) by these sales, but they will work the normal upkeep of this blog.\nAs you may guess from my previous post about bests blog posts I have read recently, I read a few self-improvement blogs. I\u0026rsquo;m more for the time-management and general tips than for other self-improvement stuff, but sometimes the advice they give in other areas can be interesting. And this book covers both areas.\nI came to Steve Pavlina\u0026rsquo;s blog a few years ago via StumbleUpon (to this article, if I remember correctly) and started to read it from then on. And when I got the chance to pick his book, I did. Good book. Worth the money.\nI really love the way this book starts. It begins with a short biography and how he came into self-development. From ther he goes on how he came to write a book on self-development.\nSteve splits one\u0026rsquo;s being in 3 principles: truth, love and power. And from four combinations of these three pillars, oneness (truth+love), courage (love+power), intelligence (truth+power+love), and authority (truth+power). He found these principles and combinations using a \u0026lsquo;mathematical\u0026rsquo; approach, requiring them to satisfy constraints (being universal, complete\u0026hellip;) and be applicable in real life. Good idea and good results.\nAfter this introduction we find the main chapters, getting in depth with these 3 principles. This may sound silly at first, you already know what truth is! But of course, truth in this context is broader than a thing that is known or proved to be true. At the end of the first chapter, Truth, comes a self-assessment test, in which you have to rate your life areas from 1-10 (definitely not getting what you want - absolutely experiencing what you desire) according to the explanations of the text. These life areas are\n Habits \u0026amp; daily routine Career \u0026amp; Work Money \u0026amp; Finances Health \u0026amp; Fitness Mental Development \u0026amp; Education Social Life \u0026amp; Relationships Home \u0026amp; Family Emotions Character \u0026amp; Integrity Life Purpose \u0026amp; Contribution Spiritual Development  If you wonder why I copied verbatim this list here, read it again. It is a fantastic list on life areas, covering anything. Read it again. See? This self-assessment helps with filling your life with Truth.\nOne of the parts that touched me the most in the Truth chapter (besides this list) was about Journaling. For Steve, journaling comes as a free flow of text out of your head, with goal-setting and problem solving intertwined. You can see it here in his blog. The seeds of that journaling eventually grew in my life bookmarking approach, which is not real journaling, but is exactly what I need.\nNext chapter is Power. Did you guess? This chapter also talks about goals. And the best point I saw is: do not relate goals to suffering. The goal setting process is usually as follows: you want to do something, you set a goal, you reach that goal. The problem is, the moment you are setting the goal, you are already thinking of what the struggles and hardness you have ahead. And you start to relate goals with suffering. When you set a goal, focus on the present moment.\nPower is also the foundation of motivation and self-discipline. When you are moving, your motivation is high but when you stop your motivation fades. If you can get enough discipline to start rolling again, there you go! Use self-discipline to start rolling and then move with motivation. It is like riding a bicycle. Pedal with self-discipline and move along with motivation.\nTo raise power in your life, you have to keep challenging you. Raise the bar a little each day. The best example is for work. Do you work your entire 8 hours? Probably no. Maybe you don\u0026rsquo;t want to. If you do\u0026hellip; Start with what you can (even 30 minutes) and raise it daily. You can read his ideas here, and my ideas on (micro) time management here.\nAnother good advice comes from the chapter titled Authority, and is about failure. When you start a new endeavour you may feel frightened by the fear of failure. What you have to keep in mind is that failure is to be expected, but also improvement over time, because you have already been there with something else. And from Authority comes Persistence\u0026hellip; Which is for me another way to talk about continuous improvement.\nAfter the first 7 initial introductory chapters comes another self-assessment, more complex and embracing these first chapters. Roughly 6 questions for each chapter. Then a plan on how to improve yourself in these subjects.\nAfter this first part comes the real world application of these principles. This is where the real deal comes, but you need the introductory chapters first, around 130 pages. Don\u0026rsquo;t expect to skim right here.\nThis book offers an interesting view of self-improvement. His principle-based approach, and how he came to them is very interesting, as are the results. All in all, this is a good book. Most of the content is already available in his blog, and you can get a good view of his opinions and writing there. Just beware, this book was published in 2008 and his ideas and blogging style have changed quite a bit.\nJust to remind you, you can buy it from my affiliate links (I get a small commission from these sales, but the price for you is the same):\n Amazon.com: You already know Amazon\u0026hellip; You can buy more stuff there, but no free international shipping. Amazon Kindle: You can also buy the book for your kindle device. Don\u0026rsquo;t have a kindle? Buy it here!  Related posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\n[](http://www.mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html) Luck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nLove thy tools to maximize your productivity\nBook review: How to be #1, by Vince Lombardi\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/09/personal-development-for-smart-people.html/","tags":["Productivity","Books"],"title":"Personal Development for Smart People: A Not So Short Review"},{"categories":null,"contents":"This is a picture I shot in Iceland, in the Dynjandi Waterfall. If a caption is needed, it would be Never give up. Click the thumbnails to download the high resolution images.\n\nDynjandi Waterfalls\nI have not set any download tracking, thus I don\u0026rsquo;t know if you are downloading these: Please, if you download one of these wallpapers, please leave a comment in the form below!\nIf you like this wallpaper, please share in StumbleUpon or Twitter.\nThanks!\n\n2520 x 1575 pixels\nWorks for 1680 x 1050 with a higher resolution\nDownload\n\n2560 x 1600 pixels\nWorks for 1280 x 800 (MacBook size) with a higher resolution\nDownload\n\n2560 x 2048 pixels\nWorks for 1280 x 1024 (standard 5:4) with a higher resolution\nDownload\n\n2048 x 1200 pixels\nWorks for 1024 x 600 (Netbook size) with a higher resolution\nDownload\n\n1536 x 1536 pixels\nWorks for 1024 x 1024 (iPad size) with a higher resolution\nDownload\n\n960 x 1440 pixels\nWorks for 320 x 480 (iPhone size) with a higher resolution\nDownload\nIf you have a screen resolution that does not work with these sizes, don\u0026rsquo;t hesitate to leave a comment and I\u0026rsquo;ll create it ASAP.\nYou may also be interested in this other wallpaper: Douady Rabbit Wallpaper, or this one Siegel disk wallpaper.\nRelated posts:\n_How Is Iceland\u0026rsquo;s Weather?_\n_Road Trip Through Iceland_Eating in Iceland (if you are not an Icelander)\nThings you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html) The 100 Most Common Words in Icelandic (more or less)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html/","tags":["Downloads","Places","Trips","Iceland"],"title":"Icelandic Waterfall and Rock Wallpaper"},{"categories":null,"contents":"As you may remember, Laia and me spent three weeks in Iceland for holidays two months ago. This is the first post in the series Things you should read about before travelling to Iceland. Be sure to stay tuned for the following posts!\nFirst I would like to say you one thing about Iceland\u0026rsquo;s food: don\u0026rsquo;t be scared! They don\u0026rsquo;t eat anything odd, except for a few national foods which are not that usual: h√°kari (rotten shark meat) and hrutspungar (pickled ram testicles). These two are delicacies Icelanders eat for √ûorramatur (a celebration held in February). You can find actual, day-to-day recipes in this book if interested in cooking when back home.\nAs almost every restaurant offers a carte in English, you can be pretty safe of what you will eat. Unless it is some soup, as soups are usually just s√∫pa dagsins (soup of the day) or kj√∂tsupa (meat soup). Enjoy them, Iceland\u0026rsquo;s soups are pretty good, just a little bland (don\u0026rsquo;t have a lot of salt, but are a little spicy).\nThe national fast food is the pylsur (or pylsa). It is a hot dog variant, with ketchup, sweet mustard, fresh and dried onion and remola√∞i, a mayonnaise-like sauce. The best place to eat them is in B√¶jarins Beztu Pylsur (Best pylsurs of the city, in Icelandic) in Reykjavik, near the harbour and the flea market. It is definitely the best hot dog we have eaten ever, and ate quite a lot when we were at the capital. It can be found in gas stations all over the country, but better eaten in the best place!\n \nPylsur at B√¶jarins Beztu\nI have tried to do something similar at home and the results were pretty decent, although the original is better. You can read more about my home-made pylsur recipe.\nDried fish is one of the other typical fast food here. We read in our travel guide that it is a typical snack while driving. I conceded and bought a pack of dried cod (once we realised which fish it was). If you like fish, you may find it interesting, but it was not that good. If you dislike fish\u0026hellip; you better don\u0026rsquo;t eat it. But it is worth a try nevertheless.\n\nDried cod\nWhile you are in Iceland, don\u0026rsquo;t be shy and try all types of bread you can. There are several local bread types, the ones we liked the most were the flatbrau√∞ and the kryddbrau√∞. The first is a flat bread (as the name suggests) but it tastes quite different from any bread I had eaten. It is odd, but good. It looks like a cr√™pe, it is very flat. The second one is a spice bread (krydd means spices) and it made Laia go nuts for it. A lot of guest-houses also baked its own bread and gave it for breakfast. Fresh baked bread in the morning is delightful!\n\nFlax bread. Yummy\nThere are also local dairy products, produced only in Iceland. The most important dairy product 100% Icelandic is skyr. It reminds of yoghurt, but I found it too sour. In fact, is a type of cheese, not yoghurt by preparation. I didn\u0026rsquo;t really like it\u0026hellip; until I found drykkur, which is a drinkable skyr preparation. It is available in several flavours (blueberries, peach and raspberries, papaya, strawberries and my favourite, vanilla), and can be found in almost all gas station supermarkets. Look in the fridges, it is worth the (usual) price of 250ISK.\n\nVanillated drykkur\nThe other typical dairy is smj√∂r, butter. It is a very good butter. Slightly salty and creamy. You will find it everywhere for breakfast, and will probably forget you are eating a different kind of butter. Pay attention, it is different from the one you eat usually ;)\nAnother treat I loved was Fr√≥n\u0026rsquo;s P√≥l√≥ chocolate and coconut cookies. You can buy them in some supermarkets (look for the cookies section and then for a blue tube with P√≥l√≥ written on it). If you like chocolate-coconut combinations, you\u0026rsquo;ll love these cookies.\n\nChocolate and coconut goodness\nRelated posts:\n_Icelandic Waterfall and Rock Wallpaper_\nHow Is Iceland\u0026rsquo;s Weather?\nRoad Trip Through IcelandThings you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html) The 100 Most Common Words in Icelandic (more or less)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/08/eating-in-iceland-if-you-are-not.html/","tags":["Trips","Islensk","Iceland"],"title":"Eating in Iceland (if you are not an Icelander)"},{"categories":null,"contents":" \nA nice warm Sunday afternoon, I wanted something cold to drink and a good book to read in my garden. I glanced at my pile of books beside the door, the books I grab to read in the train to my office, a pile of 8 books. Then I remembered I had a few books in the library I wanted to read, another pile, 10 books. As I went down and put them all over the table, I realised I had a few books more in the computer room, 3 books. And what!? My iPod Touch holds some ebooks, too. Add 6 more to the \u0026lsquo;Things I wanted to read soon\u0026rsquo; list. I give up, no reads today, I\u0026rsquo;m writing a blog post. This post.\nToo many books, maybe, but as an avid reader, I enjoy reading, fiction or non-fiction. Also, a lot of these books will teach me something useful about writing, time management, languages or just be an enjoyable read in a Sunday afternoon.\nDiscovering The Book Depository (affiliate link), a place to buy online cheap books with free international shipping has turned my reading list from bearable into devilish. The ease of buying books online, where you don\u0026rsquo;t see how heavy they are, or how many are you really purchasing is an evil creation! A good evil, at least\u0026hellip; But now I have an enormous reading list to tackle.\nThe only way to tackle such a big list is to plan ahead, and keep reading. Of course, keep enjoying the reads!\nDivide The principle of divide and conquer is already a common concept. But how can you apply it to your reading lists? The answer is simple. You need two lists:\nA list for your leisure time books, the ones you want to read - All books mixed, as long as you are the one who wants to read but are not forced by external pressures to read them. Novel, self-improvement, cooking.\nA list for your work related books, the ones someone else wants you to read - In the case you are your own boss, think about your working self as another person, without succumbing to mental illness if possible. This covers manuals, tutorials, articles if you are not leisurely interested in them.\nKnow yourself, know your enemy In the previous step we started the know yourself part, as we divided our lists in two: external and internal. Not it is time you finish your self-knowledge journey by classifying the lists.\nFor each item, assess how much you want to read this book. For this, you may make a table with entries like interesting, urgent, useful ranging from 1 to 10. You have to also keep in mind the toughness of the reading. For this, you can use just a simple piece of paper, a spreadsheet or an online book list keeper like 22books.com. You can even do it in your head, if you have good memory.\nNow you will have a clear overview of what do these books mean for you, so you can start acting on them. But now comes the latter, know your enemy.\nFor this step, just pick each book and add another column to the previous table, with the page number (or paragraph number if it is a blog post). Thus you now know how long will they take, more or less.\nYou are ready to hunt now.\nStrike Now it is time to start the fight. Sort your books according to overall score in the previous table. Theoretically, from this you would get the book you should read soonest, overall. It can work, but there are times when you need some light reading, or want something interesting or are in a creative mood and want new tools. Thus, you can either pick the best overall score or pick the best score for categories. In case of a draw (or books very close in rating), pick the shortest/easiest. This is so because in my list, the shortest may be my Teach yourself Icelandic (BookDepository affiliate link) which is short but hard, and I can\u0026rsquo;t read it straight but by chapters.\nVictory Now it is time to wage war. Start reading the book you feel more likely to enjoy now. Read for as long as you want. Stop and do whatever else. Repeat every time you want to read, with a caveat: always read the same book for a category. Thus, you won\u0026rsquo;t be reading more than 3 or 4 books at once, non-stop. Also, keep always one e-book or easily portable book for short idle moments (waiting on queue or for your order, public transportation).\nYour list will slowly, but surely decrease. When you add new books, shuffle your list without changing what you are currently reading. It is fundamental that you keep focused on your current book and don\u0026rsquo;t exchange it for another. Focus on finishing, one at a time (or 2 or 3, try not to pass the 3 books at the same time barrier). Of course, don\u0026rsquo;t rush and enjoy your reads!\nOf course don\u0026rsquo;t forget The Rights of the Reader (affiliate link, you can download a poster for free in Walker Books page here).\nRelated posts:\n[](http://www.mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html) Luck favours the procrastinator (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nTime management systems\nLove thy tools to maximize your productivity\nBook review: How to be #1, by Vince Lombardi\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/08/winning-against-your-reading-list.html/","tags":["Thoughts","Productivity","Books"],"title":"Winning Against Your Reading List"},{"categories":null,"contents":" Interesting things to know before going to Iceland As you may remember, Laia and myself went to Iceland for a 2 and half weeks trip last June-July. It was a wonderful experience, managed by the wonderful (and helpful!) people at Nordic Visitor. This is the first post in a series named Things you should read before travelling to Iceland. In these posts I will cover the following (I will add links to the individual posts here as I write them, bookmark this page!):\nEating in Iceland (if you\u0026rsquo;re not an Icelander): Some typical foods and what you should not miss. (To appear the week of August 30th) Update: Posted 31st of August\nRoad Trip Through Iceland: Tips after being there, done that. (To appear the week of September 6th) Update: Posted 6th of September\nHow is Iceland\u0026rsquo;s Weather? Iceland has weather, and lots of it. (To appear the week of September 6th) Update: Posted 11th of September\nIceland\u0026rsquo;s Water: the Best Water in the World: You should drink plenty there, you will miss it. (To appear the week of September 13th) Update: Posted 18th of September\nShopping in Iceland: Not as expensive as we thought. (To appear the week of September 13th, delayed for next week) Update: Posted 26th of September\nSleeping Where the Sun Never Sets and Other Oddities: It may be hard for you, or not. (To appear the week of September 20th, delayed for next week) Update: Posted 9th of October\nWhen I finish this preliminary series of posts, I will post another, with a daily account of our trip: sightseeing places, where we got lost, what we saw, what we didn\u0026rsquo;t. Share and enjoy!\nRelated posts:\nIcelandic Waterfall and Rock Wallpaper\n_How Is Iceland\u0026rsquo;s Weather?_\n___Shopping in Iceland___\n[](http://www.mostlymaths.net/2010/09/waterfall-and-rock-wallpaper.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html) The 100 Most Common Words in Icelandic (more or less)\n9+4 fundamental things you should pack in your travels\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/08/things-you-should-read-before.html/","tags":["Trips","Islensk","Iceland"],"title":"Things You Should Read before Travelling to Iceland"},{"categories":null,"contents":"\nYacas is an advanced computer algebra system, with its own programming language and a lot of handful operators available.\nIt comes handy when you need to do that odd symbolic computation which is too big to handle by hand (or you are plain lazy).\nBy looking at the wikipedia entry, I discovered an startling truth: as of 2009, yacas is no longer maintained.\nI should have guessed, because yacas does not compile out of the box (the program needed to generate the manuals does not compile), and this led to some na√Øve patching (just removing all instances of said program\u0026hellip;).\nThe compilation process for the NanoNote with OpenWRT follows the usual lines, with a twist. Yacas uses a host program to generate code, named mkfastprimes. And when cross-compiling, the resulting executable cannot be used.\nTo solve this small problem, you need to compile yacas in your host computer, and use the generated mkfastprimes to get the desired files. To do so, in the makefile I download the package, uncompress it, configure and make. Some minor problem is that configure generates several makefiles and folders in the working directory\u0026hellip; and looks like OpenWRT\u0026rsquo;s makefile system does not allow to change it. Thus I copy the original Makefile to Makefile2, let configure generate a new one, make yacas and copy back the original Makefile.\nAnd this can get you yacas working in the NanoNote. You can download the Makefile and patches from here.\nFor additional instructions on how to set up a build environment, please refer to Qi hardware\u0026rsquo;s wiki here.\nRelated posts:\nGcal: the ultra-powerful command line GNU calendar\nUnpacking my Ben NanoNote\nMy first port to the Ben NanoNote: gnugo\nAnother Ben Nanonote port: pmars\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/08/get-yacas-in-ben-nanonote.html/","tags":["Linux","Maths","NanoNote"],"title":"Get Yacas in the Ben NanoNote"},{"categories":null,"contents":"A month ago, Oscar del Ben posted an interesting tip in his blog to take power naps when you are feeling tired, How to Get a Quick 5-10 Minutes Nap Without Using an Alarm Clock. His idea is simple: pick a spoon on your hand. Once you fall asleep, your grip will relax, the spoon falls and you awaken with the sound. I found it amusing and interesting, as I am one of those types who feel really well after a 10 minutes nap. Thus I wanted to solve some problems of his approach in a Unix way, and I wrote the power nap script.\nThe catch of Oscar\u0026rsquo;s method? You sleep almost nothing, with this method. You doze, and when you enter real nap mode, you awaken. It can (and does!) refresh your mind, but it does not qualify as a Power nap:\n Scientific experiments (see Benefits section below) and anecdotal evidence suggest that an average power nap duration of around 15-30 minutes is most effective. Any more time, and the body enters into its usual sleep cycle. People who regularly take power naps may develop a good idea of what duration works best for them, as well as what tools, environment, position, and associated factors help induce the best results. Others may prefer to take power naps regularly even if their schedules allow a full night\u0026rsquo;s sleep.\nFrom Wikipedia entry\n Thus the ideal sleep length is around 15 minutes. How do you get yourself to sleep 15 minutes? I find it very hard, because a power nap is ideally taken after lunch, when you may be sleepy, but not that sleepy to fall asleep instantly, less if you are sitting in your office chair. You can estimate how long it takes (for you!) to fall asleep, but from my own experience, this varies greatly. I usually take around 5-15 minutes at night, but can take around 20 minutes when it is daytime. How to sleep for exactly 15 minutes after falling asleep?\nThe solution is pretty easy: what do you have in your office, always on? Yes, your computer. If you are a Windows user, I am sorry: my solution works in Linux or Windows. You can use Cygwin, or fight your way to implement the same in your own platform. I encourage you to do so!\nWhat is this solution? A power nap bash script, with several command line parameters. Once started, it waits for a second for a key press. If a key is pressed constantly, i.e. you have your finger over a key, nothing happens. As soon as you release the key, a counter starts running, and when it finishes your computer plays a beeping sound or a file of your choice.\nThe idea is that you get in a comfortable position in your desktop, start the script and keep your finger pressing on a key. You have to be in a position such that when you fall asleep, your finger falls of the keybord. One option is to slouch in your chair with your arm extended pressing the space bar, when you fall asleep, your hand will fall over your desktop. Another option is crossing your arms over your desktop, with your head over them and the keyboard on a side. You just press enter with your hand and when you fall asleep your hand will fall.\nWhen you sleep, the counter keeps ticking, and when it ends, music (or console beeps) awaken you. And the power nap is over and you can get away with your terrific job.\nUsage is ./nap.sh naptime \u0026ldquo;musicplayer\u0026rdquo; or ./nap.sh test \u0026ldquo;musicplayer\u0026rdquo;. If musicplayer is empty, it will use the system bell, and test is used to be sure it will do something after the selected time. As of this writing, the music file is encoded in the script (feel free to change it to some file you like!), and you have to use the music player best suited to your system. In my MacBook, I would use open as music player, in my NanoNote or netbook, madplay (command line music player) with the option -a -30 to adjust the volume.\nAn example use (the way I use it in my NanoNote) is ./nap.sh 15 \u0026ldquo;madplay -a -20\u0026rdquo;\nYou can get the most up-to-date script from my Google Code repository here: nap.sh. In a future version, I will add a safety control to beep after naptime+safetymargin minutes, to solve the problem of pressing a key and then falling asleep over the keyboard.\nIf you have any suggestion or improvement to the script, or have used it please drop by and leave a comment! Also, share with your friends in Reddit, HackerNews, Digg or StumbleUpon.\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nLinux is a time killer (follow-up ‚Äì Ditching Ubuntu: Arch Linux in my Acer Aspire One)\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nParseList(ScrambleList(Relateds(Maths,Programming,Linux)),5)\n","permalink":"https://mostlymaths.net/2010/08/power-nap-via-command-line-in-linuxmac.html/","tags":["Programming","Linux","Productivity"],"title":"Power Nap Via the Command Line in Linux/Mac OS"},{"categories":null,"contents":"Last Tuesday I made the move. I ditched Ubuntu and installed Arch Linux in my Acer Aspire One. After my post Linux is a time killer (which attracted a lot of attention, and didn\u0026rsquo;t really carry the message I wanted) I got a lot of comments to think about. The two most suggested Linux distributions were Debian/unstable and Arch Linux. Well, maybe Arch Linux was not that talked about, but the following comment bought me out:\n [\u0026hellip;]\nI finally tried Arch and haven\u0026rsquo;t looked back. Initial setup is a little more lengthy (more config files, etc. to edit than say, Debian/Ubuntu net-inst), but the config files are really well layed out and easy to understand. Once its set up, its rolling release, so you should basically never have to reinstall from scratch again (which is what drove me away from Ubuntu originally - new system install every 6 months, I have better things to do). Updates just stream in continuously (and very quickly after they\u0026rsquo;re developed).\nBut the killer feature is probably the community documentation. The Arch Wiki is a massive, thorough and well made resource. If you have an issue with setting up something in Arch, its probably covered in the wiki. The first few times I thought they missed something, I was later proven wrong - its amazing. The Arch community is just really good at documentation.\nIf you\u0026rsquo;re not too new to Linux (if you\u0026rsquo;ve ever thought of Ubuntu as \u0026ldquo;too mainstream\u0026rdquo;), then give Arch a try, its awesome.\nNick W.\n I had used and installed Debian previously, knew it wasn\u0026rsquo;t a thrilling experience. Thus, installing Arch Linux in my AAO was worth a try (while implementing some disaster-preventing solutions from other commenters), at least one or two days of Linux fiddling. Thus I sat up, copied my important stuff in a USB stick and started the process\nThe first step is just downloading the image file to write in your USB stick. As I was already inside a Linux system, it was plain easy following the instructions on installing from USB stick. I went for the net install image, where just the base system is written in the disk and the rest will be downloaded from the Internet. I managed to even configure my wifi connection from the command line, if I did it, you can do it too!\nNow comes one of the last easy steps. Reboot, press F12 (in my Acer Aspire One) to change the boot device to the USB stick. Once it has booted, and before starting the installer, it is better to configure the keyboard map, console font and wifi.\n\nI like a lot this console font!\nTo configure the keyboard and font, run km. I choose, of course, the qwerty_es key map, and as for a font, one I hadn\u0026rsquo;t used before and I liked a lot afterwards, ISO01-12x22. It looks very Times New Roman, very nice and big.\nAfter that, it is the wireless moment. For me, this worked:\n ifconfig wlan0 up\niwconfig wlan0 essid \u0026ldquo;myId\u0026rdquo; key \u0026ldquo;mypasswd\u0026rdquo;\ndhcpd wlan0\n because my key was WEP. If your router uses WPA passphrases, you need to use WPA_supplicant, which isn\u0026rsquo;t as hard as it looks. But if it is not your router, maybe you don\u0026rsquo;t know which encryption it uses\u0026hellip; start with WEP and then go to WPA. Maybe you\u0026rsquo;ll need to do the two last steps of it twice, or wait a little before issuing the dhcpd.\nAfter this, test your net with an ifconfig wlan0 and ping www.google.com. If everything works as expected, run /arch/setup. If you have DNS problems, add nameserver 8.8.8.8 to /etc/resolv.conf (Google\u0026rsquo;s DNS).\nThe installation procedure is guided, but there are several possible pitfalls\u0026hellip; I slipped in at least two. Well, three counting my problems in configuring the wifi connection.\nFirst, when selecting your packages, be sure to select wireless-tools. If you don\u0026rsquo;t\u0026hellip; When the installation is complete and everything is working, there will be no networking. And you can\u0026rsquo;t install any package.\nOnce the base packages are installed, you need to configure them. First, you will be asked which editor do you prefer: nano, joe or vi. I selected nano the first time. Just before, you will be asked to either copy the current networking configuration into the future network configuration, or leave it as is. I decided to copy\u0026hellip; And then all configuration files you were supposed to edit with nano were empty. Moreover, nano could not write the files either. And when I selected change root password, the installer broke. Restart needed.\nOnce restarted, I selected vi as my editor (and I am an emacs guy\u0026hellip; here you can find a cheatsheet) and not to copy. Everything worked out as expected, following the guidelines of the Arch Linux beginners guide. After a while, the system was working.\nTweaking started. First, some modules and daemons from Acer Aspire One in the Arch Wiki. Not everything, just one after the other to get xorg installed and working. In case you don\u0026rsquo;t know, installing in Arch Linux packages is done via pacman, with pacman -S package. You can also look for a string in the packages list with pacman -Ss package.\nOnce I could startx, I had to choose a display manager (you can find them in this Arch Wiki list and set-up, I went for Slim) and a window manager, which of course had to be Fluxbox. Fluxbox installation details here.\nAfter some wrestling with .xinitrc and the like, I got it working, and realised it was the moment to adduser. I added my main user, forgot about groups and had to manually add the user to all the relevant groups, detailed here.\nNow everything started to get downhill, as I had some working X. I installed the networkmanager and networkmanager-applet from Gnome, to control my wifi connections, although you have a lot of possibilities in this page for wireless set-up. Installed emacs-23.6 and firefox-3.6, checked they worked and left the rest for the following day. It is the day of package installing, configuring Fluxbox keybindings and these small and long chores.\nFirst, as I was in my office, I needed to get working the external monitor as I like it. Before it worked somehow ok, when setting up the external resolution the laptop monitor shut down. Now, for some odd reason it didn\u0026rsquo;t happen\u0026hellip; Thus I set up WinKey+F5 to display in external monitor and Shift+WinKey+F5 to switch back to the laptop screen. In Fluxbox\u0026rsquo;s keys file:\n Mod4 F5: exec xrandr \u0026ndash;output VGA1 \u0026ndash;mode 1152x864 \u0026ndash;output LVDS1 \u0026ndash;off\nShift Mod4 F5: exec xrandr \u0026ndash;output LVDS1 \u0026ndash;mode 1024x600 \u0026ndash;output VGA1 \u0026ndash;off\n To find out which resolutions are available to your external monitor (even for your LCD screen), plug the monitor VGA connector and issue\n xrandr -q\n This will give you a list of available resolutions for all devices, with its corresponding names. In case of doubt of which is the external and which the LCD, unplug and repeat: one will disappear.\nNow, my computers are always on duty. This means, I need suspend on lid. To do so, be sure to add your default user to the power user group (in fact, read this list of user groups you should consider), then just read these steps. They work perfectly\u0026hellip; Except maybe for some X problems. Do it at your own risk, of course. For me, it worked ok after xrandr was configured correctly, see above. After coming back from sleep, the external monitor will flicker. Turn back to the LCD and then again to the external monitor (just 4 keypresses and 2 seconds) and it will be solved.\nInstalling emacs packages was a charm using ELPA, texlive was installed in just 20 minutes (I didn\u0026rsquo;t find a generic texlive with all packages, thus I had to write several texlive-stuff to get everything installed) and working in no time. The main afternoon problem was setting up networkmanager and gnome-keyring-daemon to work together. After much, much googling and changing, the solution can be found here. In broad terms, you check that dbus is running, together with the addition of\n auth optional pam_gnome_keyring.so\nsession optional pam_gnome_keyring.so auto_start\n to /etc/pam.d/slim (you should change slim for your session manager) and this line\n eval $(gnome-keyring-daemon -s \u0026ndash;components=pkcs11,secrets,ssh)\n to your .xinitrc. All these three changes, together and nm-applet and gnome-keyring-daemon where happy ever after. Because writing a 16 hex digits key several times can be nerve-wrecking (I know, I know, I have it in a file, but anyway).\nThen, as I checked my twitter timeline, I followed a link to youtube\u0026hellip; Installing the flash plugin was done via pacman -S flashplugin, then I had to copy /usr/lib/mozilla/plugins/libflashplayer.so to ~/.mozilla/plugins and chmod +xr it. Then, I realised I didn\u0026rsquo;t have sound enabled\u0026hellip; A little looking around until I realised it just was that Alsa is muted by default. You can solve it with\n amixer set Master 90% unmute\n After this, I wanted to be able to raise and lower the volume with the dedicated fn keys of the laptop\u0026hellip; The proposed solution in Arch Linux wiki page on Acer Aspire One (using xbindkeys) didn\u0026rsquo;t work directly, had to change it for\n \u0026gt; \u0026quot;(amixer sset Master toggle)\u0026quot; \u0026gt; m:0x0 + c:121 \u0026gt; XF86AudioMute \u0026gt; \u0026quot;(amixer set Master 2+ unmute)\u0026quot; \u0026gt; m:0x0 + c:123 \u0026gt; XF86AudioRaiseVolume \u0026gt; \u0026quot;(amixer set Master 2- unmute)\u0026quot; \u0026gt; m:0x0 + c:122 \u0026gt; XF86AudioLowerVolume \u0026gt; \u0026quot;(sudo pm-suspend)\u0026quot; \u0026gt; m:0x0 + c:150 \u0026gt; XF86Sleep  I.e. remove the db after 2. This didn\u0026rsquo;t satisfy me, I wanted libnotify (which I installed together with pidgin\u0026hellip; remember to enable the pidgin notify plugin!) to tell me the volume levels. A solution I found over the web is a nice bash script called bashmixer. I modified a little the code to show volume after every operation. Maybe there is a better solution for this\u0026hellip; Any idea? Anyway, the AAO has problems with audio playback from its speakers. Remember it!\nI also added gnome-power-manager, to see my battery levels (I forgot to install it the first day\u0026hellip; bad!). As the netbook stands, everything I need is installed and working correctly. Just 1 day more or less. And Arch Wiki and Arch Forums are fantastic places to find solutions to Arch Linux problems and configurations (beating by a wide margin Ubuntu forums).\nOh, I almost forgot! I got the left hand and right hand card readers to hotplug by adding pciehp to the MODULES line in /etc/rc.conf, i.e. MODULES=(\u0026hellip; pciehp) and creating the file /etc/modprobe.d/pciehp.conf with the following content:\n options pciehp pciehp_force=1\n After rebooting, both card readers will hotplug (when inserting an SD card, which is the one I use).\nIn case you wonder, I am not the only one loving Arch Linux in my Acer Aspire One:\nArch linux HOWTO ¬´ Acer Aspire One ZG5 - The system I have now runs better than any other OS I‚Äôve tried on my AAO ‚Äî I may switch all my computers to Arch if this proves to be stable.\nAnd another user blog:\nInstalling ArchLinux on Acer Aspire 7720-934G ¬´ Where r00t has no land - ArchLinux installation and configuration on Acer Aspire 7720-934G.\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nLinux is a time killer\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nParseList(ScrambleList(Relateds(Maths,Programming,Linux)),5)\n","permalink":"https://mostlymaths.net/2010/08/arch-linux-in-my-acer-aspire-one.html/","tags":["Linux","How-to"],"title":"Ditching Ubuntu: Arch Linux in my Acer Aspire One"},{"categories":null,"contents":" I have a problem: I know quite a lot different programming languages (you can read my list of the best 9 books I have read about programming), but I am proficient only in two. I\u0026rsquo;d love to choose a few to concentrate and build my skills up, but I don\u0026rsquo;t know which. Read on for background and possible candidates.\nSince I discovered there were different programming languages, I\u0026rsquo;ve liked learning different ones. It is the same with languages, I love learning new languages.\nBut I have focus problems, and after a while I just give up and forget half of what I learnt. I can write in C and Lisp without much problems, except for looking some function up in the Lisp Hyperspec and a recurring forgetting of how do is used. But my working knowledge quickly decreases:\nAwk: wrote several scripts to solve some problems, but could not write anything out of the cold. Useful enough for what I do in awk.\nBash: wrote more than a few scripts. As bash is not hat deep I guess I know enough for my uses.\nForth: wrote a little to see how it goes, but not enough. I like stack based languages.\nJava: I have a little working knowledge and a small cheat-sheet I wrote and used. I had a course on databases where we had to write a mail back-end (SQL) and write accessing user code in Java. Learnt enough to do it, no more as I had no time back then.\nJavaScript: wrote several na√Øve scripts. They work, but are pretty amateurish.\nPostScript: wrote a few programs and a small tutorial. Used too little to work from scratch, but enough for what I actually use it.\nPython: wrote a few small programs and read a few times a book. Didn\u0026rsquo;t code for long enough to write programs out from scratch.\nI want to pick one language from this list or new (or a few, no more than 3) and really get into them, up to being able to write code out of the blue. If possible, not too amateurish code. In my free coding I usually do fun things\u0026hellip; I have half a raytracer and half a SIRDS generator, both in Lisp. I also have an image approximator by triangles, stochastic, in C. These are slow programs, requiring quite a work of optimising. Now, I don\u0026rsquo;t know which languages I should choose next, less in view of what I use them for. General usefulness is welcome (if I can get something out of a language I learn in my free time, the better). Here are the options I am considering, together with pro\u0026rsquo;s and cons. If you think something is missing for your favourite language, please tell me so!\nDisclaimer: I consider being hyped as a pro feature, because it means it has a wide array of developers and documentation, not because I want to learn the top of the wave language right now.\nClojure Pros (Clojure): It is a Lisp based language, and this means that I have a great deal already learned. It is also being hyped and talked about. I have already written some kind of hello world program in it, in my post And \u0026lsquo;e\u0026rsquo; appears from nowhere I approximated e using Clojure. Google Trends indicate the language is currently in a local decline from an increasing trend.\nCons (Clojure): But I know very little Java, thus I could not get the full power of the language straight out. Also, I don\u0026rsquo;t know what I would use it for. How fast is Clojure? How does its memory management work?\nFactor Pros (Factor): Factor is a Forth like language with a deep set of libraries. It is currently being actively developed.\nCons (Factor): I feel like I don\u0026rsquo;t know enough of he \u0026lsquo;mother\u0026rsquo; language, Forth, to switch to a derivative. Not enough volume to show in Google Trends.\nGo Pros (Go): Written by Google and actively developed. Much hyped. It is very much C-like.\nCons (Go): Google Wave was killed, it could also happen to Go. Also, I guess pure C would be faster for a C-like compiled language, thus I could use C instead. Google Trends doesn\u0026rsquo;t seem to indicate it is very interesting. A big spike on anouncement and a bumpy constant curve afterwards.\nRuby Pros (Ruby): Hyped a lot. Looks like everyone around is using it for something. Steady constant curve in Google Trends.\nCons (Ruby): As of now, I don\u0026rsquo;t even know if it is compiled or interpreted, or what it is good for.\nJavaScript (in depth with jQuery and node.js) Pros (JavaScript): I could write a few iPhone apps I have in mind in JS. I know a little JS already, and it is pretty much an interesting language.\nCons (JavaScript): Too much work for too little output, maybe. I don\u0026rsquo;t even know if there are good references for in-depth Javascript, or for jQuery/node.js. Declining (heavily) in Google Trends, but jQuery and node.js are rising strongly.\nPython Pros (Python): From what I already read and programmed, it feels like a wonderful language, very thought out. His creator even has a beard!\nCons (Python): I don\u0026rsquo;t know what uses I could put it for. Speed would be an issue for a lot of programs I may write, but not for all of them, of course. Slight decline in Google Trends.\nThus, what do you suggest? If I was to choose right now, I would probably pick Python, Forth and Clojure (although I\u0026rsquo;m afraid of how much Java I need for it). Which one would you pick? Or which 2-3 languages do you suggest for me? Do you think 3 languages at the same (probably not same as in the same day or week) time are too many?\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Maths,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/08/which-programming-language-should-i.html/","tags":["Programming","Thoughts"],"title":"Which programming language should I learn next?"},{"categories":null,"contents":"Preface: I have been using Linux since around 1998, when I installed Debian from scratch in my old Pentium II. I am more end-user than power user, but the computer I use most often (my netbook) has Linux in it by default. Also, my office computer is a Linux computer. And I am writing this in my MacBook. Which is not Linux, but at least it is Unix. What comes now is a personal rant, after a fight with my netbook. Probably not completely a Linux fault as an Acer one. But anyway, be warned this is a rant.\nLinux is a time waster. It can come in two time-wasting fashion:\n Good: you find a new command/application and play with it. Bad: you try to configure something (or install a package from scratch).  I have nothing against the good part. I even enjoy it, by learning to use gcal, or a2ps. I even wrote a (guest) post on why I think learning these side tools can be rewarding.\nBut the bad part\u0026hellip; this always gets on my nerves. I don\u0026rsquo;t mean that Windows is better in the bad part\u0026hellip; but Mac OS is. Mac OS just works, but they have the best thing to be that way: all Mac computers are Apple controlled. Thus they can test everything and say \u0026lsquo;OK\u0026rsquo;. Every hardware part will work perfectly and smoothly with Mac OS version N.\nLinux has to work in almost all strange configurations possible\u0026hellip; And this means big hardware fuss. You have a winmodem? You can\u0026rsquo;t use a dial-up connection (that happened in my Pentium II days). More recently, you have an internal SD card reader? You can\u0026rsquo;t hotplug it.\nAll started with an upgrade from Ubuntu 9.10 to 10.04. I assumed dist-upgrade was a good option, I wanted to upgrade my distribution. Then I learned, and was advised that it was a bad idea\u0026hellip; But how could I know it beforehand? It was the first time I had to upgrade, in my office this is automatic, and previously I had so little content that overwriting with a newer version was not a problem. It looked like the best tool for the job. The ~6 hours process began, and finally, ended.\nWithout keyboard, without trackpad, without USB. I had something similar to a brick, under X11. I could boot in console mode and tinker to solve it. I googled and digged into forums, and after around 2 hours I found some maybe solutions. Tried two (both took a while of editing) and they didn\u0026rsquo;t work at all. Gave up (I remember fighting against X11 back in my pure Debian days, and it not enjoyable) and tried to download the latest Ubuntu to install from a Flash drive. Did you know that Ubuntu no longer gives system boot images you can write in USB flash drives? It is either net-install (but how do you boot it?) or CD. It looks like a good move in these days where netbooks have no CD drive. In case you are interested, you can find a flash drive image here.\nThis process started around 11 am and ended 11 am the day after. Then add quite a few more hours for installing all programs I use, and configuring a few of them. Luckily, I use fluxbox and emacs where configuration back-up is a dream.\nRoughly two days for a system upgrade.\nThen, the other day, I had some pictures I wanted to post somewhere. Don\u0026rsquo;t remember exactly, and put my SD card in my right-hand internal reader. Nothing. D\u0026rsquo;oh! I remembered I had to enable hotplugging when booting, by adding some lines somewhere. Googled for a while, found the solution I used back in my 9.04 days.Which needed writing in a non-existent file. Duh. Ok, look for a solution for Ubuntu 10.04. More googling. Several tries (which mean edit, reboot and try). Nothing, I only got the LH reader working. The right one, which is the easily removable, the LH is an expansion slot, isn\u0026rsquo;t. Just from upgrading from 9.10 to 10.04.\nAnd it took me one other day.\nThese are just two of my everyday examples, and I guess you could share a few of your own. More if you are a sysadmin, or do something with web servers. Share your story, it will relax you. At least, I feel a little better.\nIf you ended up enjoying this post, consider subscribing to mostlymaths.net newsletter. If you don\u0026rsquo;t have the time right now (or didn\u0026rsquo;t like my \u0026ldquo;Linux bashing\u0026rdquo;), you can just share this post with the buttons below if you feel so inclined. Thanks!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n[](http://www.mostlymaths.net/2010/04/approximating-images-with-randomly.html)\nParseList(ScrambleList(Relateds(Maths,Programming,Linux)),5)\n","permalink":"https://mostlymaths.net/2010/08/linux-is-time-killer.html/","tags":["Blog","Linux","Thoughts"],"title":"Linux is a time killer"},{"categories":null,"contents":"Three months ago Oscar Del Ben posted an interesting post in his blog, FreestyleMind. In it he said that he saved (quite) a lot of money and a lot of back pain with a special office chair: he uses a gym ball.\nThe gym ball in question is the one used in yoga or Pilates training. They come in two sizes, 65 cm 75cm (diameter). I had recurring back pain, and decided to give it a try at home. I don\u0026rsquo;t think my University would allow me to switch a 100‚Ç¨ office chair for a 8‚Ç¨ gym ball, also there is no place to put my chair.\nFor more than two months I have been using it at home. In July I gave up: if it is too hot, it is not very comfortable. You can solve it putting a cloth over it.\nBut the results have been very, very interesting. I\u0026rsquo;ll explain you the results as a list of questions and answers.\nCan\u0026rsquo;t you fall off the ball? Absolutely not! Unless, of course, the ball is not the right size. If you are less than 1m80cm (around 6 feet), you need a 65cm ball, and consider a bigger one if you are taller. If the ball is the correct size, your body will be in the vertical of the ball and you can\u0026rsquo;t fall, at least you can\u0026rsquo;t fall easily. Also, try several inflate strengths. A 75cm ball is different at full strength than at half strength. Try different inflate levels.\nDon\u0026rsquo;t you get tired? Indeed. At first your back muscles are not used to that much support work, and you will get tired and have strange feelings in the lower part of your back. It will be getting better over time. For the first weeks or months, keep your old chair around just in case. Also, try not to sit on it for longer than 5 hours every day the first weeks.\nWon\u0026rsquo;t you roll around on it? Yes and no! The good point of using a gym ball is that you are not completely steady. You move a little (no more than a few cm around) and this keeps you from being completely still. This helps a lot with back pain, which usually comes from a very tight posture for long stretches of time. With a ball, there are no big stretches in the same position. Also, when you are feeling high, you\u0026rsquo;ll start rolling your hips back and forth over the ball, or start bouncing off it. It is kind of fun seeing, but more fun doing.\nWon\u0026rsquo;t it explode leaving you on the floor with a bruise in your arse? In my experience, no. I have bought the cheapest available and it doesn\u0026rsquo;t look as if it will explode any time soon. It is very thick, and from seeing it, I think it would deflate very, very slowly if a hole appeared on it.\nWhat if I have back problems? If they are severe or you have a medical condition, don\u0026rsquo;t try it without asking your physician. If you just have \u0026ldquo;standard\u0026rdquo; back pain, give it a try. I did, and I don\u0026rsquo;t regret it at all.\nIn case you are wondering, I weight 70kg! And 8 people I know (either friends or friends of friends) started using them at their offices or homes. And I heard no regrets!\nYou can find a gym ball in your local sports store, Amazon(affiliate link) or shopping mall. Give it a try and let me know how it felt.\nRelated posts:\nPower nap via the command line in Linux/Mac OS\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Maths,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/08/gym-ball-as-office-chair-review.html/","tags":["Bizarre","Productivity"],"title":"Gym ball as office chair: review"},{"categories":null,"contents":"As I posted in Best Posts I Have Read in June and July, I liked a lot a numerical experiment in Re: Factor, a blog about learning the Factor programming language. The idea comes from another blog, this time about Clojure (a Lisp dialect running in the Java Virtual Machine), based on a footnote from Prime Obsession(Amazon affiliate link) by John Derbyshire. The footnote reads:\n Here is an example of e turning up unexpectedly. Select a random number between 0 and 1. Now select another and add it to the first. Keep doing this, piling on random numbers. How many random numbers, on average, do you need to make the total greater than 1? The answer is e. (See sketch of proof below)\n In the original post, a quick Clojure implementation is programmed, and in Re: Factor, a Factor implementation is added. When I originally read the post, I missed that the original version was in Clojure, and decided I was good to go by writing a Common Lisp version. I\u0026rsquo;d prefer a Forth version, but as Factor is very close to Forth, it was close to cheating. Keep in mind that I wasn\u0026rsquo;t aware that the first version was in Clojure!\nI switched to my emacs session and started slime. To my surprise, slime fired up Clojure, instead of Common Lisp! I didn\u0026rsquo;t remember that a few months back I got interested in this language, and set up slime to start Clojure. Oh well. My first program in Clojure, I thought.\nThe first function was easy to define. A function which picks random numbers from 0 to 1 and keeps on adding them until they are bigger than 1. As this was my first Clojure project, I didn\u0026rsquo;t want to bother learning how Clojure loops work\u0026hellip; I wrote a recursive version. I did not try to make it even tail recursive:\n (defn PlusRandom [initial steps]\n; Initial and step start at 0. Will return how many times it takes\n; to be greater than 1\n(if (\u0026gt; initial 1)\nsteps\n(PlusRandom (+ initial (rand)) (+ 1 steps))))\n Ugly, I can hear you mutter. Maybe, but this was my first ever Clojure function, and it is almost the same I would write in Lisp. Moreover, after inspection, it looks like it is indeed tail recursive. It still amazes me that it worked! Of course, this can be improved, at least to make it more clear, with an auxiliary function:\n (defn PlusRandomAux [initial steps]\n; Initial and step start at 0.\n; Will return how many times\n; it takes to be greater than\n; 1\n(if (\u0026gt; initial 1)\nsteps\n(recur (PlusRandomAux (+ initial (rand)) (+ 1 steps)))))\n(defn PlusRandom []\n(PlusRandomAux))\n After this function, we have to take averages of what the last function returns, for a large number of iterates. My first version of this function was recursive, too. But it blew away the stack, which is not good. I conceded, and looked at Clojure\u0026rsquo;s loop construct, and the result was\n (defn AveragePlusRandom [iterates]\n; Takes the average of \u0026ldquo;iterates\u0026rdquo; iterations of the previous\n; function. Accumulator should start at 0\n(loop [n iterates accumulator 0]\n(if (= n 0)\n(double (/ accumulator iterates))\n(recur (dec n) (+ accumulator (PlusRandom))))))\n Now, I look at recur, because it looks odd. Turns out, Clojure does no tail call optimization! Big fail for my PlusRandom function. Rewritten with a loop construct, with recur:\n (defn PlusRandom []\n(loop [cnt 0 accumulator 0]\n(if (\u0026gt; accumulator 1) cnt\n(recur (+ 1 cnt) (+ accumulator (rand))))))\n for a gain of an 11% execution time (from 3.9 to 3.5 seconds). It looks like too little for a tail call\u0026hellip; but as most calls end either with 2 or 3 recursions, the improvement should be small? No! It turns out that the auxiliary function call adds an overhead\u0026hellip; which accounts for a change from 3.9 seconds to 3.7 seconds! And the real improvement from tail call optimization is just a mere 6%.\nOf course, if you want a quick program, you do it in C, if you want to program quick, you do in (insert your favourite quick language). The convergence of this scheme is too slow, too. But the answer comes from the mathematical proof.\n user=\u0026gt; (time (AveragePlusRandom 100000))\n\u0026ldquo;Elapsed time: 421.315711 msecs\u0026rdquo;\n2.71938\nuser=\u0026gt; (time (AveragePlusRandom 1000000))\n\u0026ldquo;Elapsed time: 3445.167485 msecs\u0026rdquo;\n2.718408\nuser=\u0026gt; (time (AveragePlusRandom 10000000))\n\u0026ldquo;Elapsed time: 34082.850845 msecs\u0026rdquo;\n2.7182318\n By the way, the proof from the convergence to e is quite straightforward, but this morning I was in no mood for this kind of problem (I am not fond of counting or probabilities) and googled it. I found it in the Google cache for Derbyshire\u0026rsquo;s book FAQ. I have edited a little his version\nThe first step is key. What\u0026rsquo;s the probability that the sum of just two random numbers exceeds 1? The same probability as that a point (x,y) in the unit square (corners are at (0,0), (0,1), (1,0), and (1,1)), satisfied the inequality x + y \u0026gt;= 1. This is of course 1\u0026frasl;2; draw the diagonal from (0,1) to (1,0), and it\u0026rsquo;s the probability that (x,y) is in the upper right triangle.If you now go to three random numbers, the chance that their sum exceeds 1 is got by \u0026ldquo;cutting a slice\u0026rdquo; across the unit cube through the corners (1,0,0), (0,1,0), and (0,0,1). Observe that this pyramid (shown below) also cuts the unit square along the diagonal! This pyramid has volume 1\u0026frasl;6, and the probability x + y + z \u0026gt;= 1 is then 1-1\u0026frasl;6=5\u0026frasl;6.\n\nA little calculus, plus the principle of induction, shows that the pyramid (standard simplex) sliced off an n-dimensional unit cube by a hyper-plane through its corners (1,0,0,0,\u0026hellip;), (0,1,0,0,\u0026hellip;), (0,0,1,0,\u0026hellip;),\u0026hellip; has volume 1/n! If you don\u0026rsquo;t believe it, you can check Wikipedia for the volume of the standard simplex.\nThe probability that a total of 1 is exceeded after adding n random numbers is therefore 1 - 1/n!The probability that a total of 1 is exceeded after adding n random numbers but not before is therefore (1 - 1/n!) - (1 - 1/(n - 1)!), which simplifies to (n - 1) / n! The expected number of selections until a total of 1 is exceeded is therefore the following sum:\n\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Maths,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/08/and-e-appears-from-nowhere.html/","tags":["Programming","Maths","Bizarre"],"title":"And e appears from nowhere!"},{"categories":null,"contents":"I just want to introduce you Fatou, our little cat.\n\nI like napping in the sofa\nWe adopted him last Saturday, and he is 2 months old. He is named after French mathematician Pierre Fatou\u0026hellip; Mostly because Laia didn\u0026rsquo;t want him to be named Kolmogorov, and Fatou was the first mathematician name she liked.\nHe is very cute (as you can see), and well-mannered. Last Monday he had to go to the veterinary clinic for a revision, and the vet told us it is amazing how good he is: he even wears his collar!\n\nHi everyone!\nAt the moment he has a cold, and sneezes quite often. He also loves wool strings and playing with balls, which he moves around with his front paws somewhat like a hockey player.\nHe has a little injure in his back leg which makes he misstep a little when he is running at top speed. The vet told us he is too young to really do something about it except keeping him from playing too much.\nTo avoid filling mostlymaths.net with posts with pictures from him, he decided on his own to open a (photo)blog at tumblr, which you can reach at Fatou The Cat. You can subscribe to his RSS here. He will probably post a picture with a small caption (or a video with a small caption) daily, if he is not napping, of course!\nCome in and say hello to Fatou!\nParseList(ScrambleList(Plants),0)\n","permalink":"https://mostlymaths.net/2010/07/new-family-member-and-photoblog.html/","tags":null,"title":"New family member and (photo)blog"},{"categories":null,"contents":"While I was in Iceland, I started to see visits coming to my blog from www.hanselminutes.com\u0026hellip; A site I didn\u0026rsquo;t know about. As soon as I got a decent wifi coverage I went to see what it was about\u0026hellip; And it was a podcast!\nFrom his own description,\n Hanselminutes is a weekly audio talk show with noted web developer and technologist Scott Hanselman and hosted by Carl Franklin. Scott discusses utilities and tools, gives practical how-to advice, and discusses ASP.NET or Windows issues and workarounds.\n The interview where my blog was mentioned was Hanselminutiae Eight: Interview with Dan Fernandez, and the post they talked about was 8 reasons for reinventing the wheel as a programmer, after it appeared in HackerNews for a second time. I thought you could not re-post things to HackerNews, but it looks like I was wrong!\nRelated posts:\n7 Links For Bloggers (√† la ProBlogger)\nParseList(ScrambleList(Relateds(Programming)),5)\n","permalink":"https://mostlymaths.net/2010/07/featured-in-podcast.html/","tags":["Blog","Programming"],"title":"Featured in a podcast"},{"categories":null,"contents":"Being a copilot in Iceland can be either stressing or boring. It depends if you are going to an almost unmarked farm where you will spend the night or just in the middle of an unending straight road. And in the boredom moments, I decided to compile a list of things we had packed and were really useful. I hope this helps you in your next trip!\n Fishing line: Fishing line is quite useful for several things. We used it mostly as a clothes line. The one we bough, for just 1.50‚Ç¨, can hold 8kg and is 250m long. It can also serve to wrap things up strongly.\n Sporks: LightMyFire\u0026rsquo;s sporks are pretty useful. They work as spoon and fork, and also have a cutting side. Really useful for tight packing. You can buy them from this affiliate Amazon link: Spork.\n Ziplock bags: They can hold food, of course. But also pebbles or shells from a beach, plants\u0026hellip; You name it. Also great for papers risking getting wet.\n Dental floss: It doubles for the uses of the fishing line, although it can hold way less. Its main use is that neat small cutter, which can easily cut fishing line. Only necessary if you don\u0026rsquo;t check your baggage.\n Steel paper clips: I am not the only one thinking paper clips are really useful. You can check this page for 101 uses for paper clips and this one for how to make a safety pin from a paper clip (these instructions ask for pliers, but you can get something working just by hand).\n Big handkerchief: You can turn a big handkerchief into a portable bag/purse, use it as a scarf, mosquito shield (if it is transparent enough), rope\u0026hellip; Put it somewhere and you will find an use for it.\n Folding raincoat: This is not necessary if you already have a raincoat as your usual jacket, but can save you from bringing an umbrella. A raincoat also serves as a windshield when it is cold and windy.\n Night mask and ear plugs: I don\u0026rsquo;t need ear plugs in any case, but strong lights disturb my sleep. In Iceland, my night mask was invaluable and I hope I had one when I was in Warwick: the windows did not have blinds and at 5 am it was already dawn.\n Paracetamol 1g: This should cover your needs for throatache, toothache, general muscle pain and headache. Check wikipedia to know what it is (as it is named differently in some places) and of course, consult your physician before.\n  As extra options, depending on what you plan to do/can pack:\n Swiss knife: Far better than having just your dental floss cutter. Imagine what McGyver could do with your previous 9 items and a Swiss knife! Of course, if you don\u0026rsquo;t check luggage you have no option to pack it.\n Technogadget of choice: I always travel with my iPod touch. If offers me reading for bored moments (either mathematics, books, you name it), and also playing. Moreover, music, time and internet connection whenever I find a wifi hotspot. You can buy an iPod touch in you nearest Apple reseller, or from this affiliate Amazon link: iPod Touch 3rd Gen. 32 Gb Notebooks, pen, pencil: If you enjoy writing or drawing, I don\u0026rsquo;t need to say you how useful this items are. I rarely draw while traveling, too little time usually, but just in case always carry my Moleskines and pens.\n One instant soup dose: It doesn\u0026rsquo;t take any space, and could save you from an expensive supper when you just want to get back to your bed.\n  What are your fundamental items when traveling? Let\u0026rsquo;s create the perfect list together!\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/07/94-fundamental-things-you-should-pack.html/","tags":["Trips"],"title":"9+4 fundamental things you should pack in your travels"},{"categories":null,"contents":"A few weeks ago I saw in my Google Analytics that someone came to this blog looking for \u0026ldquo;Origami iPhone case\u0026rdquo;. As I have a Origami CD case, and several posts on iPhone/iPod Touch games\u0026hellip; it was a page hit. But I thought: if I can have a neat CD case, I can also design a neat origami case for an iPhone! Said and\u0026hellip; done. It took a few tries (and a few days), as you can see below. The main problem was that the first worked by luck, and the second, too. But the third didn\u0026rsquo;t, and it took a while of disassembling to solve all problems.\n\nThe final case is pretty nice, if I can say it, moreover by tweaking a little the size doubles as a neat bus card holder (for Barcelona\u0026rsquo;s size, which is roughly the same as a credit card), with 3 pockets (one is the iPhone pocket, the other is a thin pocket for just one ticket and another larger in the front/back). You can find the diagrams below the pictures.\n   \n\nClick to enlarge!\n\nClick to enlarge!\nRelated links:\nDiagrams: How to do an easy origami CD case\nDiagrams: Origami Flower Box\nModel: Origami masks\nModel: Satoshi\u0026rsquo;s pegasus\nParseList(ScrambleList(Relateds(Origami,Drawing,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/07/iphone-origami-case-diagrams.html/","tags":["Origami","iPod","How-to"],"title":"iPhone origami case diagrams"},{"categories":null,"contents":" Don\u0026rsquo;t miss the latest posts Learn to Remember Everything: The memory palace technique or Remembering Facts: USING Mental associative chains\nIf you are an avid self-improvement reader, you know already what timeboxing is. But maybe you don\u0026rsquo;t harness all its potential For the rest, timeboxing is a time management technique focused on time spent, not tasks done. Therefore, you will need to set aside some project tracking system to have a clear idea of what you are working on. The concept of timeboxing may sound really simple, but it is really very powerful. This post is as much about timeboxing as it is about my personal approach to timeboxing.\nDo you remember your college or high school days? Those papers you only seemed to start writing 3 days before your due date? If you do, ask yourself another question: which day saw the best of you in terms of work done and work focus? If you ever did this, the answer will be, without doubt, the last night.\nWhen we are in a real hurry to finish something, we start to produce our best work, or we break down. The good point is that timeboxing techniques can help both types of workers: those thriving under pressure and the ones who avoid deadlines. You can raise your productivity near your maximum without breaking down.\nTimeboxing\u0026rsquo;s basic premise is to allocate a certain amount of time (oddly named a time box) to your tasks. I. e. work for 1 hour in your lawn. But there are several ways to allocate this time, and also several ways to deal with your timer bell once the time box is over. And this is what makes timeboxing great: flexibility.\nAllocating fixed amounts of time repeatedly This is one of the simplest ways to do timeboxing. You allocate a certain number of timeboxes (of say, 30 minutes, 50 minutes) to your day\u0026rsquo;s (or week\u0026rsquo;s) tasks.\nThis method, simple as it is can work wonders. I found it out as The pomodoro technique, a freely downloadable ebook from here.\nAllocating a variable amount of time repeatedly This is of course more flexible than the previous system. You decide for how long you want to work on a certain task in your to do, either for the day or as a total amount. For example, today I may work no more than 30 minutes in drafting this post, and should not work on it for longer than 2 hours.\nRing the bell: keep on working or stop cold? These are two possible approaches when the bell rings. There are other possibilities as well. You may set a \u0026ldquo;reserve time\u0026rdquo; for each task to keep on working if it can be completed in that time, or you can set a new box at the end of the day.\nKeeping on working works better when your initial span was short and the task at hand is big (really big). You use the time box to get momentum on a big task to keep on working on it, assuming once you start it won\u0026rsquo;t be that bad. I personally don\u0026rsquo;t use this too much for a simple reason: it leads me to be really tired too early in the morning. Last Tuesday I was preparing an exam, and had to write the exam statement and solve it. It was a programming assignment, so it took quite a while. And despite I had clearly defined boxes of 30 minutes for each task, I just did around one hour and a half (according to my logs more like 2 hours) straight without even moving\u0026hellip; And I felt wasted after that, took quite a few hours to get enough momentum to work more. I suggest you better adhere to a strict pausing regime.\nStopping cold means that when the alarm rings you just finish where it rang. You may write that last phrase, or compile to check if what you wrote works, but can\u0026rsquo;t keep on working on the same task after this. This is what I have found definitely more useful! Why? Well, when there is a task I don\u0026rsquo;t like, working for 30 minutes on it is really no big deal. And I can do it around three times a day. Think of it: with this approach you can work for 1h30 (or more, depends on you!) on the tasks you dislike! On a first read you may think just that!? I work a lot more! Ok, I ask you Really? Do you work more than that on your hard tasks? I mean those big things you never seem to start, or that long term project you are always deferring or procrastinating on. And of course, 1h30 is just for the big ones, and now I am starting. In between big tasks you can cram a lot more!\nHow I use timeboxing My approach is based on the variable length schedule and stop at the bell, with some tweaks. I have a projects list (not complete: only short to mid term projects, future projects are not in this list until I have not cleared others) and each day I fill my to do of the day.\nI usually schedule for 10-12 items in the list, adding up around 3 hours of purely work time. I\u0026rsquo;m currently gauging how much more I am able to add to the list, looking for my golden spot. I\u0026rsquo;m still juggling with it, this is why you may think 3 hours is too little, I think it too. But I\u0026rsquo;ve managed to do more in a day with this method than in a week of my previous state of continuous procrastination with a pinch of work in it.\nMy future plan (and currently I am already doing it but ignoring it) is to add a rest time to each task. For example, proving a theorem or doing LaTeX for 30 minutes are more tiring than proofreading one of your papers or reading an article for 30 minutes. I would then schedule for a 10 minutes break in the first two cases and for a 5 minutes break in the lat two cases. But as I said, for now I rest for as long as I want. Which is not that much, really, some days I\u0026rsquo;ve found that at 13:00 I was almost done with all my (scheduled) day worth of work!\nIf this happens you have two options, and which you decide is up to you and your current energy levels. If I\u0026rsquo;m feeling energetic, for example, if that happens on evening Tuesday, I might add a few more schedule tasks to the list, not a lot: from one to three.\nHow I tackle my day schedule depends on how I am feeling.\nIf I don\u0026rsquo;t feel very much like working I start with some small task for 15 minutes with 5 (real) minutes for rest, something like doing LaTeX or proofreading, and then turn to a big task. After the big one, I turn to something unrelated and not very tiring: if I am at home I may fold the clothes or do the dishes, water plants. If I am at my office, I may sketch a blog post (if scheduled!) or read a page or two of some paper I am interested in, deeply but really slowly, as this is supposed to be a \u0026ldquo;relax\u0026rdquo; time. After this unrelated task I usually tackle another big task if I have enough time before lunch/dinner. That big task may be related to the previous big or not: it doesn\u0026rsquo;t matter. After each four tasks (which I number 1-4 in my to do) I take a longer break, from 15 to 20 minutes. Repeat until you clean your day list.\nIf I feel like working big, I start straight with my first big task, and then go on with a more relaxed one. You can also start with two big tasks, if you are really in an amazing mood! You can continue with your small scheduled tasks and repeat until you clean your day list.\nAt the moment I am resting for quite a little longer than I schedule, but usually manage to finish all tasks on time (maybe late at night!). Why does it take so long?\nWhat to do when distracted If some external circumstance forces me to stop my current task before the timer runs out\u0026hellip; I eithe write it down (if it can be deferred) or I solve it in the moment. If I have to solve it, I stop the timer and reset it at the start time again. This way I get to work a little more on that big task: basic probability (and Murphy\u0026rsquo;s law) says that the hardest the task (i. e. the more time you give yourself to do the task) more easy it is for someone to come in and stop your work. See it as a way to overcome big tasks: one small step at a time.\nI hope you enjoyed this post. If you did, please share with your friends with Twitter, Reddit or StumbleUpon. This would make a difference!\nRelated posts:\nOverwhelmed With Projects? Declare Task Bankruptcy!\nWhat It Takes to Be a Winner? Embracing Failure\nLife Bookmarking and Why It Could Change How You Learn\nTime Management Systems\nDoing Your Best and 8 Tips on Continuous Improvement\nBook Review: How to be #1, by Vince Lombardi\nSlow, Natural, Deadly: The Importance of Fundamentals\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html/","tags":["Productivity"],"title":"Timeboxing: You Will Work Like Never Before"},{"categories":null,"contents":"\nToday I am leaving on holiday\u0026hellip; Destination: Iceland. It is funny, because we arranged everything (accomodation, car rental and such) just two weeks before Eyjafjallaj√∂kull started spitting ash. It have been a few months wondering whether we could make it to Iceland and come back\u0026hellip; Fortunately the little volcano took a pause and here we go.\nI have a few scheduled posts for this few weeks (I\u0026rsquo;ll be back around 16th July) but I will be again posting more frequently after I am back.\nIf I can get Internet connection there (in Reykjav√≠k it should be no problem, but I can\u0026rsquo;t be so sure about the rest of the island) I\u0026rsquo;ll try to post a comment or picture.\nOnce we are back we will try to write a joint post: Laia\u0026rsquo;s pictures with maybe one or two mine (she is the photography enthusiast) and my text (with Laia\u0026rsquo;s ideas and proofreading) explaining what we did, saw and experienced.\nSee you soon!\nParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/06/leaving-on-holidays.html/","tags":["Blog","Places","Trips","Drawing"],"title":"Leaving on holidays"},{"categories":null,"contents":" [](http://3.bp.blogspot.com/_f3d3llNlZKQ/TBn_-WQeyvI/AAAAAAAACaw/-yEzFJadcjQ/s1600/IMG_0193.JPG)[](http://4.bp.blogspot.com/_f3d3llNlZKQ/TBn_lAEoOuI/AAAAAAAACaI/cbTo8mFgkDU/s1600/IMG_0188.JPG)[![](http://3.bp.blogspot.com/_f3d3llNlZKQ/TBn_-WQeyvI/AAAAAAAACaw/-yEzFJadcjQ/s400/IMG_0193.JPG)](http://3.bp.blogspot.com/_f3d3llNlZKQ/TBn_-WQeyvI/AAAAAAAACaw/-yEzFJadcjQ/s1600/IMG_0193.JPG)\nOne inbox to rule them all Since I started printing everything in A5 booklet format, more and more articles and printed stuff gets scattered over my desk, in this format. Which is really handy for reading and travelling, but not so much for piling over the desk.\nA pile of inner stapled A5 is slightly womb\u0026hellip; when there are more than 5 big documents stacked, it can easily fall. And I had several piles over my desktop: To read someday (better sooner than later), current references (papers I am using more than twice a week or so) and past references (the ones that were in the previous category but have not used in a while).\nTo solve the stacking problem I took 3 paper folders, these that come in different shiny colours and folded them into the easiest origami box, which serves pretty well as A5 inboxes. As an added benefit, if you fold another box following the same procedure you will have a lid for your inbox, allowing you to store it neatly.\nThe diagram is below, click to enlarge it. It is suited to be printed in A4, but I think all steps would also work in Legal sized paper and paper folders. Below it you will find some pictures of the procedure, just in case the diagram is not clear enough. Enjoy your origami inbox!\n\nClick to enlarge\n     [](http://2.bp.blogspot.com/_f3d3llNlZKQ/TBn_lxpvmJI/AAAAAAAACaY/Jmi_owRCkIo/s1600/IMG_0190.JPG)[![](http://4.bp.blogspot.com/_f3d3llNlZKQ/TBn_-OvAuCI/AAAAAAAACao/YC8hknN5YAc/s400/IMG_0192.JPG)](http://4.bp.blogspot.com/_f3d3llNlZKQ/TBn_-OvAuCI/AAAAAAAACao/YC8hknN5YAc/s1600/IMG_0192.JPG) \nRelated links:\nDiagrams: How to do an easy origami CD case\nDiagrams: Origami Flower Box\nModel: Origami masks\nModel: Satoshi\u0026rsquo;s pegasus\nParseList(ScrambleList(Relateds(Origami,Drawing,Programming)),5)\n","permalink":"https://mostlymaths.net/2010/06/origami-a5-booklet-size-paper-inbox.html/","tags":["Origami"],"title":"Origami A5 (booklet size) paper inbox"},{"categories":null,"contents":"Most of you may not know who Vladimir Arnold (–í–ª–∞–¥–∏–º–∏—Ä –ê—Ä–Ω–æ–ª—å–¥, also written as Vladimir Arnol\u0026rsquo;d) was, but for me his death on 3rd June 2010,was some kind of landmark. I own two books by him (Mathematical aspects of classical and celestial mechanics [1] and Mathematical methods of classical mechanics [2]), and are quite high in my list of most checked books, at least when I was starting my journey into the realm of dynamical systems.\nArnol\u0026rsquo;d is one of the few mathematicians to give his name to a theory: Andrey Kolmogorov (–ê–Ω–¥—Ä–µ–π –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤) and J√ºrgen Moser share with him being part of KAM theory. And this theory traces back to the KAM Theorem.\nAn integrable system is a dynamical system such that there is a way to see all trajectories as nested tori in the phase space. Think for example of the system generated when you take two bodies and apply Newton\u0026rsquo;s laws of motion: trajectories of the particles follow ellipses (skip some details here) which can be thought as tori in the plane.\nKAM theory studies what happens to these tori when you perturb the system: for example, you add a third planet to this. The answer was not clear\u0026hellip; Maybe all were broken? How many were left? Kolmogorov had the original idea, and Arnol\u0026rsquo;d proved all analytical details it in one case, and J√ºrgen Moser proved another case, using John Nash\u0026rsquo;s implicit function theorem.\nThis may sound uninteresting\u0026hellip; but it has deep implications. A classical question: is the solar system stable? I.e. if you are given a fast-forward controller and start advancing the time, will the planets keep on rolling around\u0026hellip; or at some moment will all fall into the Sun (or escape from the solar system)? This is just one of the settings where this applies. Deep physics problems.\nArnol\u0026rsquo;d had a very geometrical view of mathematics. If you take any of his books you will see his geometrical vision. Just as an example, his Lectures In Partial Differential Equations [3] show more geometrical ideas than in any other book I have read on PDE\u0026rsquo;s (and I have at least leafed through a few of these). He also disliked the formalisation and alienation from physics that started in France in the 50\u0026rsquo;s, he said\n Mathematics is a part of physics. Physics is an experimental science, a part of natural science. Mathematics is the part of physics where experiments are cheap.\nOn teaching mathematics, V.I. Arnol\u0026rsquo;d, 1997 (talk)\n Following this, in the preface to Arnold\u0026rsquo;s problems, he says\n I would wish the reader not to be held back by the fact that such applications are not evident at the beginning: if a result is truly beautiful then it will certainly be of use in due course!\nArnold\u0026rsquo;s problems, V.I. Arnol\u0026rsquo;d [4]\n He also chose examples in quite a funny way. See the Arnol\u0026rsquo;d cat map, for instance. He even drew a cat\u0026rsquo;s sketch to show how an area preserving dynamical system works (it can be found in [1] or [2]).\nHe was also a fighter for his beliefs. He thought people should be judged on their merits, and not on other things, and as such wrote several letters criticising the persecution of dissidents and discrimination. And as a reward, he could not leave the URSS until the perestroika years.\nA funny thing I didn\u0026rsquo;t know about him, is that when he was stuck with a problem he didn\u0026rsquo;t know how to solve, he would ski for 20 or 25 miles wearing nothing but swimming shorts. Or at least that is what one of his former students, Yuli Ilyashenko (–Æ–ª–∏ –ò–ª—è—à–µ–Ω–∫–æ) said, as it appears in this Times obituary. And this January I\u0026rsquo;ve had the pleasure of attending a course given by him, and he doesn\u0026rsquo;t look like making this up.\nI feel ashamed he didn\u0026rsquo;t get an Abel prize prior to his death.\nReferences (these are Amazon Affiliate links, I get a small fee if someone buys in Amazon using these links):\n [1] Mathematical Aspects of Classical and Celestial Mechanics [2] Mathematical Methods of Classical Mechanics [3] Lectures on Partial Differential Equations (Universitext) [4] Arnold\u0026rsquo;s Problems  ParseList(ScrambleList(Relateds(Programming)),0)\n","permalink":"https://mostlymaths.net/2010/06/vladimir-arnold-one-of-greatest.html/","tags":["Thoughts","Maths","Books"],"title":"Vladimir Arnol'd one of the greatest mathematicians of 20th century"},{"categories":null,"contents":"\nA few days ago I found this recipe via StumbleUpon. I had two apples I would not eat, and decided to give it a go. But I didn\u0026rsquo;t have oatmeal, so I improvised. This is my version, which I call Crispy Apple Pie.\nIf you have ever been to Denmark, they eat something named √Üblekage. I ate it last November, and I loved it. This is very, very similar\u0026hellip; with a little whipped cream it would be almost the same.\nIt is not a good-looking dessert, but it is the kind of dessert you can bake in a big plate for quite a few people\u0026hellip; and when the party is over, there will be no Crispy Pie left. Guaranteed. Moreover, it does not take very long to do it (around 30 minutes only, plus 40 of baking time).\nWhat you will (roughly) need:\n Two apples 200 gr creamy cheese (Philadelphia or similar) 2 eggs Crispy cookies (Graham crackers, galletas Mar√≠a\u0026hellip;)\n Walnuts or some other nut (optional, more if you are allergic)\n Brown sugar (around 1\u0026rsquo;5 cups, but not all in one batch)\n Cinnamon, powdered ginger, vanillated sugar or vanilla extract\n Melted butter (around 7 tablespoons)\n  I know the measurements are wishy-washy. This kind of dessert allows for quite adding sugar, removing sugar, adding butter or removing it. So feel free to put whatever you want. This is just the blueprint, you are the architect.\nThe procedure is easy. Peel the apples and cut them like French fries Grease a pie plate liberally with butter, and place the apple sticks there. Add a quarter cup of brown sugar, a teaspoon cinnamon, a pinch of salt and a teaspoon ginger. Mix thoroughly (I used a fork for this).\n \nMix 200 gr of creamy cheese (Philadelphia, for instance) with two eggs, another quarter of cup of brown sugar and a teaspoon vanillated sugar or vanilla extract.\n \nOnce beaten, pour over the apples, extending evenly\n\nNow crush some crispy type cookie (in Spain that would be Galletas Mar√≠a, in other parts of the world, Graham crackers\u0026hellip; the kind of cookie you would use to make a cheesecake pie crust, crispy but not really sweet) to fill half a cup. Crush some walnuts (up to your taste), add 1\u0026frasl;3 of cup of brown sugar, more cinnamon and 6 tablespoons melted butter. Mix thoroughly, all the cookie bits should be moist with butter.\n \nOnce you are done, spread it over the previous mix, as evenly as possible.\n\nBake for 40 minutes at 180¬∫C. It will be almost done when the sugar from the bottom starts to bubble at the top.\n\nLet it cool down. When it is cold, the top will be crispy, the bottom soft and the taste amazing (if you like apple pies, of course).\n\nKeep it in the freezer, it can last a few days\u0026hellip; if you don\u0026rsquo;t finish it before.\n\nIf you feel creative you can change the walnuts for pistachios or almonds, or the apples for peaches. The peach+almond combination is the next I\u0026rsquo;ll try.\nIf you enjoyed this recipe and want to share it with more people, please consider thumbing it up in StumbleUpon or upvoting it in Reddit. If you don\u0026rsquo;t use these, share with your friends!\n\nHere you can see the recipe diagram using emacs\u0026rsquo; artist mode and ditaa\nRelated posts:\nSnickerdoodles (tea time nutmeg cookies)\nMatjessalat recipe\nMy grandpa\u0026rsquo;s doughnuts\nCurry and cheese bread\nKey lime pie (vegan friendly)\nParseList(ScrambleList(Relateds(Cooking)),4)\n","permalink":"https://mostlymaths.net/2010/06/crispy-apple-pie-similar-to-danish.html/","tags":["Cooking"],"title":"Crispy apple pie (similar to the Danish √¶blekage)"},{"categories":null,"contents":"A week without writing here. A week with little thesis related work done. But it has also been a week with ideas and things and such. You know, two weeks ago I was in Dresden for a conference. Lots of parallel sessions, and quite a few time to think. This post is mostly a digest from my life bookmarks for these two weeks.\nSeveral complex dynamic ideas: Unrelated to my thesis, but I\u0026rsquo;ve been thinking about them these days. I even rewrote a program to test an idea, and did some calculations yesterday. Looks like it will work out, and I will be able to finish some things.\nHeard a few interesting plenary talks: Cloaking, invisibility and inverse problems by Gunther Uhlman, who talked about theoretical solutions for creating invisible objects, as well as some real life applications like a cloaking system against tsunamis (by making an island invisible to water waves). Recovery of Data Matrices from Incomplete and Corrupted Entries by Emmanuel Candes was really interesting. He talks about a method (and related theorems) for recovering a full matrix from a very small sample of it (one of his examples was a 30000x30000 low rank matrix, where he only sampled 0.4% of its entries, and recovered the full matrix with a very low error. Really interesting! You can read the preprint in ArXiV.\nHeard also a few interesting short talks: partial differential equations related talks, mostly, also one about neuron networks. Had an idea about the wake-sleep cycle problem as a synchronization problem.\nAte interesting things: I didn\u0026rsquo;t remember sp√§tzle were that good. Should cook some day. Also tasted Pho bo soup in a Vietnamese place, and it is really a wonderful soup.\nAfter coming back, I have also done a few things, but not so much related to my thesis\nInstalled Debian on the Ben NanoNote: Now I use emacs and org mode to keep my life bookmarking. In the nanonote you need emacs23-nox, emacs22-nox complains about little memory, don\u0026rsquo;t really know why (it only uses 7mb, there are still a lot left!). Also, if you happen to find a bus error while reading the aptitude package list (which will appear as Bus errorackage list 0% in your console), first try to delete /var/cache/apt/*.bin (or /var/apt/cache/*.bin) and apt-get update. If it does not work\u0026hellip; I advise you to reinstall your debian system. I was not able to solve it, and ditched Lenny for Sid, then it worked well. But if you Ctrl-C while apt-getting something, you\u0026rsquo;ll find the bus error again, which can be solved by removing all these bin files.\nOrdered, got and tried a pair of Fivefinger KSO\u0026rsquo;s: These are a barefoot-like running shoes. You can buy your pair from Amazon(affiliate link). They are really good, running never felt like this before.\nHad some origami ideas: It was really long since I created something. Have a few ideas, or at least, a few things worth sharing.\nDecided to finish unfinished things: I have one lemma left since my DEA (advanced courses) days. I need to finish its proof. I am also considering having another look at my previous thesis topic. I don\u0026rsquo;t feel like keeping things undone is good for my mental health.\nDiscovered an interesting site: CreateSpace.com for self-publishing and selling in Amazon.\nBaked an interesting dish: Very close to Aeblekage, a Danish recipe I like a lot. Ate it today for breakfast.\nI don\u0026rsquo;t know when I will be able to post this coming week\u0026hellip; I used to write my posts in advance (usually one Friday and two Saturday), but this week I have none! But don\u0026rsquo;t think I am not here, this is just being out of sync.\n","permalink":"https://mostlymaths.net/2010/06/on-productivity-down.html/","tags":["Blog","Programming","Linux","Origami","Thoughts","Fractals","Maths","Bizarre","Productivity","NanoNote"],"title":"On a productivity down"},{"categories":null,"contents":"\nThe easiest flatbread, really\nI bet you have felt like this some day. You just prepared a soup, one of those soups in need of crumbs of bread. Or you prepared a nice meal, asking for bread to dump in the sauce. And you have no bread at home! Not a single piece of bread.\nThis is the answer\nThis bread, soft in the inside, slightly crispy in the outside and chewy, only takes 20 minutes from taking ingredients out of the cupboards until breaking it into pieces with your hands. Please consider thumbing up on StumbleUpon or upvoting in Reddit. Thanks!\nWhat you will need:\n 1.5 cups all-purpose flour 1 teaspoon baking power 1\u0026frasl;2 teaspoon salt (add a little more if you want it saltier) 1 cup water 2 tablespoon water 1 tablespoon olive oil add your preferred spices here (curry, thyme\u0026hellip;)\n  That\u0026rsquo;s all. Preparing it is a breeze: mix the flour, baking powder and salt, then add the cup of water and mix thoroughly. Take out a cold pan (it has to be a cold pan) of around 20 cm wide (around 9 inches) and spread the olive oil in it. Pour the dough and put the two tablespoons of water around the edges of the dough. Close the pan with a tight lid and turn on the fire on medium-high. Wait for 10 minutes and flip over. Cook for 5 more minutes, and you are done!\n\nIf you think you will try this recipe, please consider thumbing up on StumbleUpon or upvoting in Reddit to share it with your friends. Thanks a lot!\nRelated posts:\nSnickerdoodles (tea time nutmeg cookies)\nMatjessalat recipe\nMy grandpa\u0026rsquo;s doughnuts\nCurry and cheese bread\nKey lime pie (vegan friendly)\nParseList(ScrambleList(Relateds(Cooking)),4)\n","permalink":"https://mostlymaths.net/2010/05/tibetan-flatbread-easiest-flatbread.html/","tags":["Cooking"],"title":"Tibetan flatbread: the easiest flatbread recipe"},{"categories":null,"contents":"I discovered this tool by accident, when a colleague asked me why I printed a .txt file straight without using a2ps first. My first reaction of course was thinking What? and promptly asking google.\nGoogle answered with this page, and it was interesting enough to deserve an apt-get install. And indeed, it is great! Usually, when I have some straight text file I need to print, I use emacs old postscript-print-buffer, which is nice, but not as nice as all options a2ps has.\nAs default, a2ps prints in landscape format, 2 pages per sheet. Moreover, it adds a black border around the page and a header with the filename, time and who printed this. Below an example of straight a2ps:\n\nBack a few days ago I had to print my flight details (it was too early to print the boarding pass), and you know, they look like a nicely formatted text file. But when Gmail tries to print it, it removes all white spacing, rendering it unreadable.\nA solution? Creating a flight.txt file and pasting from the mail. Then\n a2ps flight.txt -B \u0026ndash;portrait \u0026ndash;columns=1 -o flight.ps\n What does all this mean?\n -B removes the header, which is useful only if more than one sheet is needed, --portrait turns on portrait print mode (landscape by default), --columns=1 Just one page per sheet. 2 by default, -o output file name. By default it would send to the default printer,  And the same example with these settings:\n\nThere are also other interesting options. For example -catman (or -m) selects 66 lines per page, as if the job comes from a man page. A companion program to a2ps is card: turns man pages into pretty PostScript files. Its usage is simple:\n card a2ps -o a2ps.ps\n Generates the manual entry for a2ps for pretty printing:\n\nThe card program invokes a2ps, thus you can add a2ps options after --, for instance\ncard a2ps -o a2ps.ps \u0026ndash; -B to remove the headers\n\na2ps\u0026rsquo; slogan is Do the right thing, meaning that it will pass the processing to any other processor. For example, if trying to process html files, it will pass them to html2ps, if you try a gif file, it will pass it to ImageMagick.\nThis is only meant as an introduction to a2ps, as it has around 50 options for processing files. For more info\u0026hellip; man a2ps :)\nRelated posts:\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nParseList(ScrambleList(Relateds(Linux)),4)\n","permalink":"https://mostlymaths.net/2010/05/command-line-postscript-swiss-knife.html/","tags":["Linux"],"title":"The command line PostScript swiss knife: a2ps"},{"categories":null,"contents":" Life logging, journaling\u0026hellip; what now? The idea behind this post grew from an insight I had, two months ago. I realised that I was bookmarking a lot of web pages because I liked what they explained and wanted to remember what I read. More precisely, I wanted to remember that I had read that. At that time, this seemed the more natural way to approach this problem.\nA month later, more or less, I landed in this New York times article: The Data-Driven Life. This was closer to what I needed (and geekier), but after trying to log my activities, I had to give up. There is no point in knowing that yesterday at 16:33 you had a coffee. This is not what I needed.\nAll pieces felt into place last week, when I read this post (How to keep track of what you\u0026rsquo;ve learnt) at Oscar del Ben\u0026rsquo;s¬†blog. I don\u0026rsquo;t need to track my daily activities, I have to track my daily knowledge flow.\nMy understanding of Oscar\u0026rsquo;s approach was a little biased at first. How could I track what did I learn yesterday from my Icelandic self-course? This would mean something like rewriting the full lesson. Not like it would serve nothing, but was not what I needed. Then I realised.\n\n What\u0026rsquo;s in a name? That which we call a rose\nBy any other name would smell as sweet.\nRomeo \u0026amp; Juliet, W. Shakespeare\n I just gave it another name, and then it was natural. Known before as journaling, recently hyped as life logging. Maybe a rose\u0026rsquo;s scent would not be better, but life bookmarking is the name that makes this interesting.\nLife bookmarking implies writing (electronically) what you have learned today. It can be Lesson 10 in Teach Yourself Icelandic, a game you discovered while reading Slashdot (foldit) or a good blog with a nice owner (friendlyanarchist.com).\nA sample from my life bookmark file for 20100517 follows as an image.\n\nClick to enlarge\nI usually do a clean sweep from everything I learnt today each night on the Notes app in my iPod Touch. It takes me around 15 minutes while watching the TV. The naming scheme is YYYYMMDD, this naming scheme makes alphabetical sorting work as date sorting. Why is it important? As I read yesterday\u0026rsquo;s endeavours today, I may remember something I have to add, and then date sorting is screwed.\nI use also categories for each entry. An entry is just something that is below a category, and categories are in lines starting with a #. This makes it easier to write a Linux shell script that could select relevant files based on category lines (using grep).\nThe goal of all this is having an electronic database of your life. You can then easily track when you wrote that post in your blog, or which day you sent that paperwork to your government.\nSlowly (well, in 3 days) my life bookmarking looks a lot like journaling. I keep writing all I learn, but also more and more what I have done today, from a top-down approach. Just log the what (sent that silly paperwork) and not the how (went to the post office to). If something interesting happened in the PO, you may add that, maybe under another category.\nThis serves to track what I have done, but more important to track what I learnt that day and all in the tip of my fingertips.\nRelated posts:\nTime management systems\nLove thy tools to maximize your productivity\nDoing your best \u0026amp; 8 tips on continuous improvement\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nSlow, natural, deadly: The importance of fundamentals\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/05/life-bookmarking.html/","tags":["Thoughts","Productivity"],"title":"Life bookmarking and why it could change how you learn"},{"categories":null,"contents":"Scroll down to download the file if you want to skip the how I did it part!\nAs you may already know, I\u0026rsquo;m travelling to Iceland this July, and started learning Icelandic a few months ago. It advances slowly but firmly, but I found a problem: when you are self-learning a new language, an invaluable tool is a list of most common words. I was able to find the 100 most common words, from a research paper (√çslenskur Or√∞asj√≥√∞ur - Building a large icelandic corpus). I don\u0026rsquo;t want to dismiss their results, but for a published paper you can\u0026rsquo;t count twice Hann and hann, or count f. as a word, I think. However, they explain the procedure in the paper, and it looks pretty good. Just that the list they give leaves a little to be desired, and I could not find a way to use the corpus they generated to get the frequency list.\nI decided to do something different. First I thought of sampling a lot of Icelandic data (online news and such), but I didn\u0026rsquo;t want to waste that much time\u0026hellip; I downloaded is.wikipedia.org. A meagre 42Mb of compressed data! Well, it could be even smaller!, if I was the one sampling it.The article sampled 142Gb, in comparison. Truly an amazing corpus!\nAfter I had the data, I wrote a small script that moved all html files to the same directory:\n #/bin/bash\n# Navigate through directory tree and copy all html files here\nfor FILE in $(find ./ -name *.html -type f); do\nmv $FILE ./\ndone\n My idea was then to cat all these files into one big html file, and then do word frequency analysis there. Problem: cat *.html \u0026gt; file does not work: *.html yielded too many results (around 60 thousand, I think). Instead of writing a script (the solution I should have used) I just cat-ed every letter as in cat A*.html \u0026gt; is-a.dat. I should have used a script similar to the one I created for the Christmas postcard:\n for i in `seq 1 $FILES`;\ndo\nlet NUM=$i*$COLUMNS\nls *.jpg | head -n $NUM | tail -n $COLUMNS \u0026gt; F$i\ndone\n This is the original code. In the file F$i I would have a list of all files I need to cat together. Anyway, I did it by hand. On my way to the end file, I found several letter combinations (Fokkur which means Categories, for instance) with a lot of pages, which cat also could not manage. (I think the problem was bash, more than cat) I removed them, because the Categories page could have a strong bias towards certain words.\nOnce I had this really big WPislenska.dat file, it was just standard command line tricks (which I got from the Linux Cookbook) (where /lt and /gt stand for \u0026lt;\u0026gt;)\n tr \u0026lsquo; \u0026rsquo; [return]\n\u0026rdquo; /lt WPislenska.dat | sort | uniq -c | sort -g -r /gt IslenskaWF-FromWP.dat\n This turns spaces into returns, sorts alphabetically, counts unique words and orders in decreasing frequency order.\nNow IslenskaWF-FromWP.dat contains word-frequency counts for data from this Wikipedia dump. The next step was the maddening one: removing all html entities, wikipedia words (like page, visitors, users\u0026hellip;) and find the English translation, via Wiktionary, my Icelandic dictionary, my Icelandic learning courseand Ubiquity.\nThe final result is this file, with the 100 most common words in Icelandic\u0026rsquo;s Wikipedia. If you can help with some messy translation, feel free to add a comment in the comment box below.\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\n[](http://www.mostlymaths.net/2010/04/9-programming-books-i-have-read-and.html) Road Trip Through Iceland\nEating in Iceland (if you are not an Icelander)\nIcelandic Waterfall and Rock Wallpaper\nThings you should read about before travelling to Iceland\n[](http://www.mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html) The 100 Most Common Words in Icelandic (more or less)\n9+4 fundamental things you should pack in your travels\n8 reasons for re-inventing the wheel as a programmer\nParseList(ScrambleList(Relateds(Programming)),4)\n","permalink":"https://mostlymaths.net/2010/05/100-most-common-words-in-icelandic-more.html/","tags":["Programming","Trips","Islensk","Iceland","Bizarre"],"title":"The 100 most common words in Icelandic, automatically generated from Wikipedia"},{"categories":null,"contents":"Music to listen with this post: Piotr Ilich Tchaikovsvkii\u0026rsquo;s Concert 35 D-major, Allegro (Spotify link , Youtube link). I\u0026rsquo;ll write why this piece in a forthcoming post.\n_\nIf you are new here, have a look around and if you like what you find, don\u0026rsquo;t forget to subscribe.\n_\nA week and a half ago, @nochiel, a twitter follower retweeted the following, initially written by @marcoarment (lead developer of Tumblr and Instapaper):\n If you sit on, sleep on, stare at, or touch something for more than an hour a day, spend whatever it takes to get the best.\n This is a very sound advice, probably the best in terms of where to spend your money. Don\u0026rsquo;t get a cheap laptop, lousy pen or bad-looking notebook. If you follow this rule, you will be always using the best tools.\nBut there is more. Your work or passion probably involves doing something that someone should use. What would happen if everyone followed this rule? People would only use the best, thus\n You should fight to do your best\n Bold, italic and I have even considered yellow background with blinking red text. This should be your motto, your driving force, the fuel in your rocket, the metaphor in your book. But doing your best is far easier said than done, isn\u0026rsquo;t it?\nVince Lombardi said it before I was even born,\n Perfection is not attainable, but if we chase perfection we can catch excellence.\n Perfection and excellence are far away in a long (and maybe winding) road. If you have ever taken part in some endurance competition, you know how to do it: just one more. Just 1 minute more, just 1km more. This is constant improvement. If each day you do just one thing that improves one facet of your life, the cumulative effect in the long run can be astonishing.\nBrainstorm your life areas and related projects. For each project, think about a task you can do daily that will lead to an improvement in the long run for that particular project. Don\u0026rsquo;t be tempted to just break projects into small tasks and then assign each to a day. I\u0026rsquo;m talking about those projects that seem to wander in your Someday list, the projects you would love to do if you had the time, and the projects without deadline you just procrastinate day on day off.\nAs a sample, each day you could\n Improve your domain knowledge:\nBy reading something in your field, a chapter, an article, a page. Or by practising the skills you need, or a skill you know could be improved.\n Learn one or two words of a new (or old) language, translate a phrase:\nThis also serves as a review for languages you already know. One word a day translates into 365 words a year. Three words a day translates into 1095 words a year. If you were learning a full new language, 1000 words would roughly cover 70% of text in that language (extrapolating from English). Three words a day is not that big a deal, isn\u0026rsquo;t it?\n Write a paragraph of a book:\nAny writer can tell you that a book is written step by step. If each day you add a well-crafterd paragraph to your book, it will be finished in no-time. Some day you will finish and will be able to publish your book online or in paper.\n Improve a paragraph of a book:\nRe-writing is what takes a lousy text and produces great text. Don\u0026rsquo;t underestimate this, rewrite what you wrote previously. In the game of Go there is a distinction between urgent moves and big moves, a big move being a move that is a gain for one side. An urgent move is one that keeps a previous move from being meaningless. In writing, you can rewrite, thus before playing that big chapter, be sure that what you have written previously is almost perfect.\n Write a new function for your pet project:\nThis is the paragraph metaphor, applied in computer programming. This could also cover improve or optimise a function in the program.\n Draw something you see on TV:\nIf you want to improve your drawing, you have to draw daily. Just while you are idling in front of the TV, draw some scene that catches your eye. Repeat.\n Exercise for 10 minutes (or more):\nExercising daily should already be in your routine. If it is not, add it now.\n Keep in touch with a friend:\nStrengthening relationships is fundamental these days, when being friends means clicking Accept on Facebook. Write an e-mail to a friend, or pick the phone and phone him just to say Hello.\n  If you try to tackle all this straight ahead, it will overwhelm you. Be warned. You are the only person who knows how much you can handle, but if you can spare an hour and dedicate 10 minutes to 6 projects, they will start to roll ahead, and before you know, like the proverbial snowball turned into avalanche.\nRelated posts:\n_How to Find Your Passion? Your Passion Is Sticky (Just Like Chewing Gum)_\n_[](http://www.mostlymaths.net/2010/09/how-to-find-your-inner-passion-your.html) _Natural Productivity Ebook Review: the ADD Productivity System in Depth_\n_Personal Development for Smart People: a Not So Short Review_[](http://www.mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html)[Luck favours the procrastinator](http://www.friendlyanarchist.com/luck-favours-the-procrastinator/) (guest post in The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\nBook review: How to be #1, by Vince Lombardi_ParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/05/doing-your-best-8-tips-on-continuous.html/","tags":["Time Management","Productivity"],"title":"Doing your best \u0026 8 tips on continuous improvement"},{"categories":null,"contents":"\n\nNew and old\nFor around 4\u0026frasl;5 years I have been the proud owner of a Canon Ixus 30. A small and versatile pocket digital camera. But I missed a lot being able to tweak some settings, having manual focus, aperture and exposition controls is fantastic. Moreover, it shoots in RAW.\nUsing it is quite easy if you have used a previous Canon model and if you have ever touched a digital reflex. It has a control rim around the lens, which (in some modes) can be used to control several adjustments: manual focus, focal distance, manual zoom, white balance and ISO speed. If you set the camera in Auto, it will work almost exactly as the Ixus 30 did.\nIn manual mode it is really fun to use. The lens ring controls focus, and the back control ring can be used to adjust aperture and shutter speed. Moreover, you can use a programmable buton to do whatever you want. For instance, to adjust ISO speed, or white balance.\nIt is a wonderful camera, and after reading this review, I was completely decided to buy it\u0026hellip; And did it that same afternoon. You can check more reviews and buy it in Amazon(affiliate link).\n \nThe only thing I did not like about the camera is the security wrist strap that came in the box, and changed it for the one of my Ixus. The problem? It didn\u0026rsquo;t have a strap length adjuster! What security comes from attaching it to your wrist without a strap?\nRelated posts:\nUnpacking my Ben NanoNote\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nWhy I bought an iPod touch (as mathematician)\n","permalink":"https://mostlymaths.net/2010/05/my-new-camera-canon-powershot-s90.html/","tags":null,"title":"My new camera: Canon PowerShot S90"},{"categories":null,"contents":"Today, while I was thinking of the best implementation solution for the vector operations, I realised that I am just not motivated by writing a raytracer in Forth. I\u0026rsquo;ll have to find something more interesting, or at least, more Forth minded to work on.\nIf I want to raytrace, better to improve the Lisp raytracer, which is sitting idly in my Code/Lisp folder. Steps that will follow in the raytracer path:\n Code commenting: I almost forgot how the main loop was rolled Performance: ditch temporary image matrices and output straight RGB data. This means no antialiasing, out of the box without some tweaking. But I can tweak that with Monte Carlo methods New objects: Where are my triangles? I only have spheres. I need triangles, and triangle meshes. Triangle mesh importer: from a nice ASCII format generated by some open source program\n Transparency: My previous version had it, this new one, does not.\n  With respect to Forth, I asked the question on Reddit#Forth, and from the answers, I\u0026rsquo;ll probably switch the Logical maze generator/solver into a Forth program (looking at my code, maybe it is better suited to it, even), with an incorporated player. Then, if it is nice and playable, I can write a small JavaScript Forth interpreter (or even easier, use just some kind of intermediate layer to translate Forth into JavaScript) to be able to play it on a webpage.\nIf you have any other suggestion for a Forth project, leave a comment here or in Reddit. Thanks!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Programming)),4)\n","permalink":"https://mostlymaths.net/2010/05/giving-up-forth-raytracer.html/","tags":["Programming","Forth","LISP"],"title":"Giving up the Forth raytracer"},{"categories":null,"contents":"\n- Mr(s) Red Square is doomed to donate\n","permalink":"https://mostlymaths.net/2010/05/ngo-volunteer-deployment-tactics.html/","tags":["Drawing"],"title":"NGO volunteer deployment tactics"},{"categories":null,"contents":"Yes, I know it: it is easy. But I will be doing a wipe and reinstall of my MacBook, and when I need to reinstall everything I want a place to check for the steps I did. I found almost all tips needed here.\nThe first step is checking for Mercurial (wikipedia) in your system. Open a terminal and type\n hg version\n If your terminal complains about command not found, you don\u0026rsquo;t have Mercurial installed. You have to install it, but prior to it you need to check your Python version. In your terminal,\n python -V\n will tell you which version you have. You\u0026rsquo;ll have it installed, as Mac OS has it by default. In the improbable case you don\u0026rsquo;t, you can install from here as a standard dmg-pkg Mac OS install. Anyway, it is a good idea to update it. After you have Python installed, you can install Mercurial from here. Beware, you need to install a version suited to your Mac OS version and Python version. If in doubt, upgrade Python and install the latest available Mercurial.\nI forgot to mention that you need XCode, and all the usual development tools for Mac OS (gcc and the like). But I guess you already have all this installed if you are interested in installing go. If not, they are in your companion CD for Mac OS.\nAfter you have all this requirements, you are ready to download the latest version of Go from the Google repositories. Open your favourite editor and open ~/.bash_profile. Add the following lines to its end\n export GOROOT=$HOME/go\nexport GOOS=darwin\nexport GOARCH=386\nexport GOBIN=$HOME/bin\nexport PATH=$GOBIN:$PATH\n Now, to reload your bash profile (without needing to open a new terminal window) type\n source ~/.bash_profile\n All these variables should now be working correctly. The time to fetch go has arrived! Be sure that you don\u0026rsquo;t have a ~/go directory prior to this step, as this could wipe or corrupt data in that directory.\n hg clone -r release https://go.googlecode.com/hg/ $GOROOT\n This step can take around one or two minutes. Once you are done, you need to create a ~/bin directory and make it executable, if it doesn\u0026rsquo;t exist. If this is the case,\n mkdir ~/bin\nchmod 755 !$\n Just one step left\n cd $GOROOT/src\n./all.bash\n This will take a while and write a lot of information in your terminal window. If everything worked smoothly, you will get a line saying\n 3 known bugs; 0 unexpected bugs\n or something along these lines.\nFor me something didn\u0026rsquo;t work perfect the first time. The problem is that I left it compiling and walked away. When I came back I saw some error related to http tests. I Tried again later, without walking away: I have the Mac OS firewall set on ask. As I didn\u0026rsquo;t answer when prompted if some test program could connect to the Internet, the connection broke and the networking tests didn\u0026rsquo;t proceed. If you also have this firewall setting, you will have to allow 5 or 6 programs. I recommend that you turn off the firewall while compiling, remember to reset it afterwards.\nNow, you should have a nice working Go environment. Check if the compiler and linker are to be found\n which 8g\n/Users/ruben/bin/8g\nwhich 8l\n/Users/ruben/bin/8l\n If you want to test if it works, you can find a sample hello world program here (Go homepage).\nI hope this helped your process of installing (and learning) this language.\nRelated posts:\n8 reader reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\n8 reasons for re-inventing the wheel as a programmer\n9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nParseHighlights(ScrambleList(Programming),5)\n","permalink":"https://mostlymaths.net/2010/05/installed-go-in-mac-os-105.html/","tags":["Programming","Mac","How-to"],"title":"Installed Go in Mac OS 10.5"},{"categories":null,"contents":"Last saturday I was in a porting mood, and tackled two interesting packages to have in the Ben NanoNote: yacas and 4th.\nYacas (Yet Another Computer Algebra System) is a very interesting application to have in such a small device. The best calculator I have used is my old faithful HP49g. But in these days, it is bulky, heavy and slow. It was superseded by m48 (a HP48+ emulator) inside my iPod Touch. Quite nice: the HP48 is programmable, has graphing capabilities and quite a good computer algebra system.\nHowever, the NanoNote is a computer. It has a fully featured (fully as in you can put whatever you want in it, if you are able to do so) operating system, and as such, can hold far more than a pocket calculator. And it has a real keyboard, not a fake touch keyboard as in the iTouch or a (horrible) plastic keyboard like the HP49g.\nIt turned out to be easier than I expected. The process needs a previous step, like Gnugo did. You have to compile it in your host system, and then use an intermediately generated file to cross-compile. I am almost done in writing a completely automatic Makefile that handles everything for you. As it stands, it is quite messy moving files around, but the program is usable.\nThe other, 4th is a multi-platform Forth interpreter and compiler. My first try of porting a Forth system was gforth, but it didn\u0026rsquo;t work: gforth compiles itself (more or less), and in a cross-compilation process this is really hard to handle. The developers even acknowledge it in the INSTALL file.\nFortunately, 4th is easy to cross-compile on purpose and indeed, it worked like a charm. I didn\u0026rsquo;t need to do anything more than write the Makefile and copying the libraries to the Nano afterwards. I\u0026rsquo;m also halfway writing a decent Makefile that copies these libraries where 4th can find them in the Nano.\nRelated posts:\nGcal: the ultra-powerful command line GNU calendar\nUnpacking my Ben NanoNote\nMy first port to the Ben NanoNote: gnugo\nAnother Ben Nanonote port: pmars\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/05/nanonote-ports-yacas-4th-forth.html/","tags":["Linux","NanoNote"],"title":"NanoNote ports: Yacas \u0026 4th (Forth interpreter, compiler)"},{"categories":null,"contents":"Do you own a Mac? I use both MacOS and Linux everyday, and found myself with a problem. Before I found Shutter taking screenshots in Linux felt like a PITA. In MacOS you can take region screenshots by pressing Cmd-Shift-4. And I missed this feature in Linux, until I cared enough to look for a solution.\nShutter was the answer, an open source screenshot grabber that fills my needs, and probably yours too. Installing is relatively simple, if you have an updated version of Ubuntu. If not, you\u0026rsquo;ll have to manually add the launchpad repositories. All instructions are on Shutter\u0026rsquo;s homepage.\nOnce you have it running, you can take region specific screenshots, do some adjustments to them before you are ready to use your shot. It is simpler than opening The GIMP and editing. It was heaven when you write tutorials with screenshots. When you tap the cross for selection, the shutter screen automatically disappears and you can select the location you want to shot.\n\nAs a bonus, I found Screenie, which is a quick 2.5D compositor √† la Apple KeyNote. I have used it for my post about porting pMars to the Ben NanoNote. It is easy to use, drag and drop and some sliders. Afterwards by right-clicking you can then export the image to PNG. You can see an example below.\n\nRelated posts:\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nParseList(ScrambleList(Relateds(Linux)),4)\n","permalink":"https://mostlymaths.net/2010/04/linux-screenshots-made-easy-shutter.html/","tags":["Linux"],"title":"Linux screenshots made easy: Shutter \u0026 Screenie"},{"categories":null,"contents":" Fundamentals, fundamentals, fundamentals. Everyone knows it, fundamentals are fundamental. It\u0026rsquo;s like saying water is wet, isn\u0026rsquo;t it? But again and again the greatest teachers of hard disciplines remind us that we need to master the fundamentals to become the best.\nVince Lombardi, said it:\n Fundamentals win it. Football is two things; it\u0026rsquo;s blocking and tackling. I don\u0026rsquo;t care about formations or new defences or tricks on defence. If you block and tackle better than the team you\u0026rsquo;re playing, you\u0026rsquo;ll win.\nWhat it takes to be #1, Vince Lombardi Jr.(page 7, Amazon link)\n Kageyama Toshiro, said it:\n Faithfulness to the fundamentals is something that becomes second nature to a professional.\nLessons in the fundamentals of go, Kageyama Toshiro(page 28, Amazon link)\n Professionals of two very different fields said this. Why don\u0026rsquo;t you listen?\nIn karate (I assume it is the same in most martial arts) there is a standard way of learning. You start with slow movements. Be it a punch or a lock, you start slowly, training your muscles to do the move. This is the fundamentals learning part.\nAfter this, you start to move naturally, close to real-life speed. You train your muscles and nerves to get the movement into yourself. However, to do this you need to have practised thoroughly the fundamentals first. If not, your knowledge is empty. You will ace some movements, but others will be crap.\nFinally, you know the movement so well that you don\u0026rsquo;t need to think about it. It is now instinct, and you will make the perfect move the situation requires. But how could you do it if you learnt it wrong in the first place?\nIf you find yourself struggling with some task, review your fundamentals on it. Almost all tasks you procrastinate on are tasks with brittle foundations. If you are about to start a hard task, don\u0026rsquo;t jump straight into it: first review the fundamentals.\nRelated posts:\nNatural Productivity Ebook Review: the ADD Productivity System in Depth\nHow To Find Your Inner Passion? Your Passion Is Sticky (Just Like Chewing Gum)¬†(Featured!)\n[](http://www.mostlymaths.net/2010/06/timeboxing-you-will-work-like-never.html)[Luck favours the procrastinator](http://www.friendlyanarchist.com/luck-favours-the-procrastinator/)¬†(guest post in¬†The Friendly Anarchist)\nTime boxing: you will work like never before\nWinning Against Your Reading List\n[](http://www.mostlymaths.net/2010/08/winning-against-your-reading-list.html)![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) Time management systems\nLove thy tools to maximize your productivity\nProcrastination: Causes and cures\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nParseList(ScrambleList(Relateds(Productivity)),4)\n","permalink":"https://mostlymaths.net/2010/04/slow-natural-deadly-importance-of.html/","tags":["Productivity"],"title":"Slow, natural, deadly: The importance of fundamentals"},{"categories":null,"contents":"The 23rd of April is a very special day in Catalonia. The legend of Saint George, in the Catalan version happens in a small town called Montblanc, and when the knight kills the Dragon from its spilled blood grows a red rose he gave to the princess. Since medieval times, men give their a rose to his significant other, and in 1923 something was added to this story.\nA bookseller wanted to spice the celebration, and as Miguel de Cervantes and William Shakespeare died on this same day, he promoted the giving of books as a present. Since then, men give roses and women give books (although the mutual exchange of books is customary now).\nI gave my girlfriend an origami rose (the diagrams are from here, based on a version of Kawasaki\u0026rsquo;s Rose found in Origami for the Connoisseur, Amazon link) and she gave me an amigurumi dragon. We are strange.\n \nI also bought a standard rose, and she bought me two books: Spade \u0026amp; Archer: The Prequel to Dashiell Hammett\u0026rsquo;s The Maltese Falconand Primer of Visual Literacy(Amazon links). I bought her The Evolution of Calpurnia Tate(Amazon link).\n\n\n\nIt is a really nice day if you love books and reading (stores and parades offer a 10% price off), but it can be crowded. I tried to make a few pictures to show how crowded it can be, but I guess you need to be here to know. Next year it will be on Saturday, consider coming to Barcelona!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nBook review: How to be #1, by Vince Lombardi\nParseList(ScrambleList(Relateds(Productivity)),0)\n","permalink":"https://mostlymaths.net/2010/04/st-george-international-book-day.html/","tags":["Books"],"title":"St. George: International book day"},{"categories":null,"contents":"Yes, you can! Adding colors to terminal output is possible. You already know it, from ls \u0026ndash;color In this post I show you a script that does it, in a simple way. I don\u0026rsquo;t have a full range of colors implemented, but you can find all here.\n\nThis is the sed-processed output given by Gcal. The original source looks like\n\nAs you can see, I used as identifiers XML-like expressions. At first I just used odd punctuation marks (@, \u0026amp;, %\u0026hellip;), but I realised it was too hard to remember. The script:\n #\\bin\\bash\nTEMP=calendartemp\nTEMP2=calendartemp2\ncat \u0026gt; $TEMP\n#Change for dark blue\nsed -e \u0026rsquo;s/.*\u0026lt;\\/dblue\u0026gt;/\\33 [1;34m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/dblue\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP \u0026gt; $TEMP2\n#Change for blue\nsed -e \u0026rsquo;s/.*\u0026lt;\\/blue\u0026gt;/\\33 [34m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/blue\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP2 \u0026gt; $TEMP\n#Change for dark green\nsed -e \u0026rsquo;s/.*\u0026lt;\\/dgreen\u0026gt;/\\33 [32m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/dgreen\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP \u0026gt; $TEMP2\n#Change for green\nsed -e \u0026rsquo;s/.*\u0026lt;\\/green\u0026gt;/\\33 [1;32m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/green\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP2 \u0026gt; $TEMP\n#Change for red\nsed -e \u0026rsquo;s/.*\u0026lt;\\/red\u0026gt;/ \\33[1;31m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/red\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP \u0026gt; $TEMP2\n#Change for dark red\nsed -e \u0026rsquo;s/.*\u0026lt;\\/dred\u0026gt;/ \\33[31m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s/\u0026lt;\\/red\u0026gt;//g\u0026rsquo; -e \u0026rsquo;s///g\u0026rsquo; $TEMP2 \u0026gt; $TEMP\ncat $TEMP \u0026gt; $TEMP2\nsed -e \u0026rsquo;s/[0-9][0-9]:[0-9][0-9]./\\33 [1m\u0026amp; [0m/g\u0026rsquo; $TEMP2 \u0026gt; $TEMP #White bold for hours\nsed -r -e \u0026rsquo;s/[A-Z][a-z][a-z][0-9]{8,8}/ \\33[33m\u0026amp; [0m/\u0026rsquo; $TEMP \u0026gt; $TEMP2 #Dark yellow for date\n#Turn today\u0026rsquo;s date into red bold\nsed -e \u0026rsquo;s/.*\u0026lt;.*\u0026gt;/\\33[1;31m\u0026amp; [0m/\u0026rsquo; -e \u0026rsquo;s// /g\u0026rsquo; $TEMP2 \u0026gt; $TEMP\nsed -e \u0026rsquo;s/ [0-9][0-9][0-9][0-9].*$/\\33[1m\u0026amp; [0m/\u0026rsquo; $TEMP #White bold for header\nrm $TEMP\nrm $TEMP2\n You may wonder what \\33 is: it is an escape character. They are the ones that tell the terminal to output color. In emacs it appears as ^[ (but only as one character, not two!). To write them (sorry, I didn\u0026rsquo;t find an easier method), open a terminal, write echo \u0026ldquo; then press Control-V followed by esc, then \u0026rdquo; \u0026gt; escape.txt and you\u0026rsquo;ll have the escape character in escape.txt. You can open this file and copy-paste it where needed.\nThe script is used just as a pipe:\n setmana.x | Colorise.sh\n where setmana.x calls gcal as I showed in my previous Gcal post. Now I only use it in the Gcal output, but I will probably use it somewhere else.\nRelated posts:\nThree dee (3-dimensional file system browsers review)\nPower to the command line\nGcal: the ultra-powerful command line GNU calendar\nParseList(ScrambleList(Relateds(Linux)),10)\n","permalink":"https://mostlymaths.net/2010/04/sed-stream-editor-to-colorise-script.html/","tags":["Linux","Gcal","NanoNote"],"title":"sed (stream editor) to colorise script output"},{"categories":null,"contents":"Introducing LeechBlock\nYou arrive to your office. Quickly check urgent mails, close the mail program and browser and put a nice solid hour, hour and a half, even two straight hours of work. Then decide that you deserve a break, and maybe with a fresh cup of coffee from the coffee machine you decide to browse idly for a few minutes. And then a co-worker knocks at your door and asks if you are coming to lunch. \u0026lsquo;What!? Where is my morning gone?\u0026rsquo;\nI bet you have felt this way some other time. I have felt this way quite often, last year, and decided to stop it cold. Installed a Firefox add-on known as LeechBlock. It will block browser access to Internet within the time span you select, or for the amount of time you want, and you can set easily exceptions for sites you use in your work.\nIt has helped quite effectively, in fact, when it was \u0026ldquo;allowed net time\u0026rdquo; I did not even remember what I used to waste time browsing about. Give it a try, it can greatly improve your productivity while at work, or even more if you work from home.\nBelow I show some screenshots of how to set up a weekday block in which I can only browse for 7 minutes in each hour (will probably reduce this to 5 minutes soon)\n \n\nTo set up such a block, first of course, install Leechblock (install link for Firefox at mozilla.org) . After re-starting Firefox, go to the Tools menu and select LeechBlock-\u0026gt;Options. Select the first Block Set, and change its name to something clear. I decided it would be Weekday-all.\nIn the What to block tab, start by putting *. This will block all sites. Then start putting sites you wan\u0026rsquo;t to be able to visit by putting +sitename. I need to visit ams.org, thus I enable visiting it, among others.\nThen in the When to block tab, select the desired days, and write a time span like in my example: 09:30-13:00,15:30-19:00 and select 7 minutes every hour if you want to follow my settings exactly. To be able to block only for 53 minutes each hour within this time limits, select within time periods and after time limit in the When to block dropdown.\nThe last tab has some miscellaneous settings. Just be sure you select Count time spent only when browser tab is active. Very important if you use Gmail in your browser as mail system.\nThere is also a Statistics menu in Tools-\u0026gt;LeechBlock, showing how much time left you have, how much time you spent browsing and so on. Below you can see a sample (after resetting it prior to running it for a half day).\n\nVery important! If you keep your browser open and let your computer sleep or hibernate, the countdown timer will keep running. Be sure to at least open a blank tab or something that won\u0026rsquo;t count, or you will find yourself unable to browse for at least an hour next morning.\nEnjoy your newfound work hours. What other similar tools are you using to increase your productivity, or at least, reduce your \u0026lsquo;procrastinability\u0026rsquo;?\nRelated posts:\nLove thy tools to increase your productivity\nProcrastination: Causes and cures\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nTime management systems\nLove thy tools to maximize your productivity\nParseList(ScrambleList(Relateds(Productivity)),5)\n","permalink":"https://mostlymaths.net/2010/04/stop-it-no-more-idle-browser-while.html/","tags":["Productivity"],"title":"STOP IT! No more idle browser while working"},{"categories":null,"contents":"Below you can find a non exhaustive list of the best programming books I have read so far. I have read a lot more books about programming, but most of them I read and promptly forgot about them. I am reading currently a few more (Code Complete, Thinking Forth), and maybe they can make it into a list like this that my future self writes.\nAnd now, the list of the best programming books I have read so far. I\u0026rsquo;m currently on and off with Thinking Forth, but it is still to early to tell if I like it. I like Forth programming (as I like Lisp, C or almost any other language\u0026hellip;), and so far the book looks damn good. But there\u0026rsquo;s a lot to learn from there and it will take me a while to grasp it\u0026hellip; and consider turning this into a list of 10 books.\nDo you have a really good programming book to suggest? Please post it in the comments, I\u0026rsquo;ll try to have a look at it.\n\nKernighan \u0026amp; Ritchie\u0026rsquo;s The C Programming Language\nThis was one of the first programming books I read from cover to cover, and probably the only one I was really forced to do so. In my first year in the University, I was required to program in C, and previously I had only programmed in different flavours of Basic (Visual Basic, GW-Basic, QBasic) and Pascal (Turbo Pascal for MS-Dos and Windows). The first semester was ok, as we were taught the basics of the language, but I wanted more and started reading this book (loaned from the library). I like it a lot, learnt a lot and I still think that its clear style and simple examples make it the best language specific programming book I will ever read\u0026hellip; If we don\u0026rsquo;t pit it against the following. Obviously, this is a \u0026lsquo;dry\u0026rsquo; book: I would never recommend it to someone who was beginning to learn programming\u0026hellip; But he should eventually read it.\nBuy on Amazon link\nPaul Graham\u0026rsquo;s ANSI Common Lisp\nThis is probably the programming book I have learnt more from. I learnt about Lisp a long, long time ago, but stalled on it until I stumbled upon Graham\u0026rsquo;s site, and read his somewhat inspiring history behind Viaweb. Decided to give it a try, and have loved this language since then. My first buy from Amazon was this great book, and won\u0026rsquo;t ever regret having bought it, would probably even be one of my 10 books to take to a desert island. Worth a buy, and even a second buy to give it as a present to a programmer friend.\nBuy on Amazon link\nFriedman \u0026amp; Felleisen\u0026rsquo;s The Little Lisper\nA little and short gem among programming books, teaches recursion, some programming and a little subset of the Lisp language to anybody in a short number of pages. It is worth a read, even if you have been into programming for a long time. Maybe just because it is a fun little book full of harmless jokes.\nBuy on Amazon linkUpdate: readers suggested that The Little Schemer is better, these days (for price, mostly). But the same review applies\nBuy on Amazon link\n\nHunt \u0026amp; Thomas\u0026rsquo; The Pragmatic Programmer: From Journeyman to Master\nThis is probably one of the most recommended books on programming, and for a clear reason: it will make your developer life easier, once you grasp everything it has to teach (although you can get a lot from day 1). Buy it. Now. And read it as soon as you have it.\nBuy on Amazon link\n\nAdobe\u0026rsquo;s Chapter 8 of The Postscript Programming Language Reference Manual\nThe PPLRM is a huge book, with lots and lots of information. And yet, the only part I have ever used is Chapter 8: Operators. Almost anything can be found in here, if you know how stack-based languages go. Concise and to the point: is just a chapter on how operators work.\nBuy on Amazon link (full book, of course)\n\nWatt \u0026amp; Mangada\u0026rsquo;s Basic para ni√±os\nThis translates as Basic for kids, and it is a really lovely book. My first programming book, I learn a lot from it (although maybe too many goto\u0026rsquo;s ;) It is a wonderful book for teaching programming to children between 5 and 11 years old. Do you readers know if there is something similar but up-to-date?\nBuy on Amazon link\n\nSAMS\u0026rsquo; Teach Yourself Python in 24 hours\nYes, I fell for the Teach Yourself X in N hours/days, but this book is good. It feels more like an introduction to the language than one of those standard rubbish books. But after a while, you grow to hate the Mayan calendar examples the author loves, sadly.\nBuy on Amazon link\n\nFriedman \u0026amp; Felleisen\u0026rsquo;s A Little Java: A Few Patterns\nI though I should give a try to another Friedman-Felleisen combination. This is not as good as _The Little Lisper¬†_mentioned above, but it does not mean it\u0026rsquo;s bad. Just not the same type of book, and also I\u0026rsquo;m not specially fond of Java. Worth a read to get some insights about Java, but loaning from the library would be a safer bet. I would not probably buy it again.\nBuy on Amazon link\n\nAbelson \u0026amp; Sussman\u0026rsquo;s The Structure and Interpretation of Computer Programs\nA classic one\u0026hellip; Known as The wizard book, for its cover. But I think I just read half of the book, from re-reading the Contents. Maybe I forgot everything? Focused on programming in Scheme, it teaches a lot about general computer science. Worth having, but it is quite a dense read. It is freely available.\nBuy on Amazon link\nFree html version link\nAffiliate Link Disclaimer: For each sale that is made through the purchase links in this post I get a small commission (that does not affect your final purchase price!). Of course, I\u0026rsquo;d love if you bought this book through these links, but I have tried my best to make my review faithful. I don\u0026rsquo;t want anyone to come later at me and say they were tricked into buying the book and the review was unfaithful to the book. Anyway, I won\u0026rsquo;t get rich quickly (not even slowly) by these sales, but they will work toward paying the normal upkeep of this blog.\nRelated posts:\n_ And e Appears From Nowhere!_C Code Juicer: Detecting Copied Programming Assignments\nCron, diff \u0026amp; wget: Watch Changes in a Webpage\n8 Reasons for Re-Inventing the Wheel as a Programmer\nHow I Got More Than 4500 Visits From Blog Commenting\nApproximating Images with Randomly Placed Translucent Triangles (ended as a Christmas Postcard)\nParseList(ScrambleList(Relateds(Programming)),10)\n","permalink":"https://mostlymaths.net/2010/04/9-programming-books-i-have-read-and.html/","tags":["Programming","Books"],"title":"The 9 Best Programming Books I Have Read (so far)"},{"categories":null,"contents":"The Ben NanoNote has very few applications, as of now. And one it has (among a few nice others), is Gcal. I didn\u0026rsquo;t know what Gcal was, and the Qi hardware wiki page on Gcal pointed me to this quite nice tutorial: The many uses of Gcal.\nThe tutorial is quite good, but somewhat long, and lacks a few specific examples, so I decided to write just what I read in that tutorial, mixed with the uses I am putting it to, so it is more a Gcal use cases than a full blown tutorial like that.\nDear reader, if you find anything confusing, want a longer explanation or information about some command not explained here, feel free to post the question as a comment below, this will help everyone reading this.\nWhat can you use Gcal for? Gcal can be used for a lot of calendar related questions. A zillion calendar options (did you wonder what the old armenic months are?), more than you probably know about. Of course, if you are not a calendar freak, this is not the main selling point. Gcal works (and is intended to) as a diary, and appointment planner. It can also be used to determine sunset or sunshine in your local coordinates, and if you are an amateur astronomer, it can give you the twilight times. The same holds for data for the Moon, it can give you the moon phase, for instance.\nHey, its already the 21st century! Command line? I can hear you mumbling How come I have to use a command-line calendar?\u0026lsquo;Of course, if you are into really pretty UIs\u0026hellip; Skip this article. This is more for the Unix/Linux user who just pops open a terminal and shouts gcal -f $mycalendar when he wants to know what today is due.\nUltra-portable \u0026amp; ultra-accessible. If you happen to have an ultraportable Linux thingy (like the NanoNote ;) you can carry your Gcal whenever you go. But if you have a fixed Linux box with Internet connection (at you office, at your server, wherever) you can ssh and run Gcal, from anywhere.\nFirst steps: Installing and month displays: Well, the first step is to have gcal installed. If you are on a Linux box, it is quite easy, as it is in all repositories.\n sudo apt-get install gcal\n Now you can run it, to get a calendar view of the current month (gcal). You can also view three months (gcal .), or a full year (gcal 2010). The command -b N selects the number of month rows to display (gcal -b 4). You can also select a specific year, or range of months (gcal 3-5 2009). There is also an alternate month view (gcal -i). Below you can see this examples in a composition of terminal captures\n\nClick to enlarge, and try by yourself!\nResource files: your calendar and more, much more. The crux of Gcal is its ability to work with resource files. In a typical resource file example.gcal (the name and extension are of your choice) you have something that looks like\n 0 This appears every day!\n20100410 This only on 2010, April 11th\n Your diary will be something like this. You may wonder if this is enough\u0026hellip; But I haven\u0026rsquo;t told you what you can write and what you can do with these date fields! Some more examples\n 2010apr01#99 All April\n2010apr01#may99 April\u0026amp;May\n2010aprsa1#sa9.7 April saturdays\n The general notation for date ranges is date-identifier#final-date. Thus, we select the first day of April, and the event lasts until the 99th day, effectively marking all days of April. To mark all saturdays, a similar notation is used, but amazingly, a high number results in a error, please select 9 as in the sample. You can see a sample output in the following screenshot. You will also need to add .7, for each 7 days.\n\nClick to enlarge\nYou can also see how to call Gcal to open a resource file: with either --resource-file or the -f commands. To display the fixed date list (i.e. what there is in the resource file) you need the -c command, and -cd or -ct would only list today and tomorrow, respectively. The command shown is -cdl@t55 which stands for show today and 55 days ahead starting from tomorrow.\nYou can find all range modifiers here.\nChange of the date format. If you are a tinkerer, you probably don\u0026rsquo;t like the default time representation. I don\u0026rsquo;t I prefer to get output as YYYYMMDD without any separation. It can be easily pasted into file names to have them quickly sorted by date.\nHow to change it? As usual, you can invoke gcal with a change for that. An example could be --date-format=\u0026lsquo;%\u0026gt;3w#K%1%Y%\u0026gt;02*M%\u0026gt;02*D%2\u0026rsquo; I can hear you saying d\u0026rsquo;oh! But it is not as bad as it seems. It breaks down as\n %\u0026gt;3w#K 3 letters of the weekday\n%1 Start highlighting\n%Y Year number\n%\u0026gt;02*M Fix 2 digits in month number\n%\u0026gt;02*D Fix 2 digits in month day number\n%2 End highlighting.\n Not as bad as it looked like? You can find all descriptions for this here (bottom).\n\nClick to enlarge\nChange fixed date header list. That fixed date list heading is pretty ugly, don\u0026rsquo;t you think? What happens when you call Gcal with --heading-text=\u0026ldquo;%3 %Y %U %4\u0026rdquo;? You can see the output below. It makes for a more appealing view of events. To learn about heading modifiers, look here (and search for heading).\n\nClick to enlarge\nSample script: sunset and sunrise times. You can save this in astronomical.gcal, and open when you want to know at which time the sun sets or shines. There are a lot of related options, learn more about sun/moon modifiers here. You will need to know your latitude/longitude.\n ; latitude 41.4798\n; longitude 2.3188 for gcal add 2 trailing zeros\n; height 0\n; Winter time Barcelona: GMT+1 Summer time Barcelona: GMT+2\n$w=+60\n$s=+120\n$v=%2%4\n$p=0*d1#999\n$c=+41.4798+002.3188\n$x=~Sunrise %o$c,$w | Sunset %s$c,$w ~Daylength %u$c,$w | Nightlength %z$c,$w\n$y=~Sunrise %o$c,$s | Sunset %s$c,$s ~Daylength %u$c,$s | Nightlength %z$c,$s\n; Winter time selector\n$b=%e#1980 %i0@a#0@b-1\nb=10sun9\n; Summer time selector\n$a=%e#1980 %e0@a#0@b-1\na=03sun9\n; What will be written, through selectors.\n$p $a $x\n$p $b $y\n And the output of gcal \u0026ndash;resource-file=./astronomical \u0026ndash;heading-text=\u0026ldquo;%3 %Y %U %4\u0026rdquo; \u0026ndash;date-format=\u0026lsquo;%\u0026gt;3w#K%1%Y%\u0026gt;02*M%\u0026gt;02*D%2\u0026rsquo; -cdl@t4 is shown in the following screenshot.\n\nClick to enlarge\nThis is getting hard\u0026hellip; I know, all these commands together are getting increasingly harder to write or comment. If you happen to use or call a specific command really often, you can call gcal -list-of-commands-really-long -S name and it will output that call into a executable shell script that when invoked calls Gcal with said options. This one is great!\nI hope you enjoyed this small tutorial on Gcal. Please also read the one I used as a guide (which covers a few more things I ommited), and refer to Gcal\u0026rsquo;s documentation if in doubt. If you liked this post, consider sharing it with your favourite tool (Stumble, reddit, digg, mail). Thanks!\nNext week I\u0026rsquo;ll show you how to use sed to add colours to your events, and how to set at to send you an email every day with your scheduled tasks. You can see a sample from my colour scheme below.\n\nRelated posts:\nsed (stream editor) to colorise script output in Linux\nUnpacking my Ben NanoNote\nMy first port to the Ben NanoNote: gnugo\nAnother Ben Nanonote port: pmars\nNanonote ports: Yacas, 4th (forth compiler and interpreter)\nParseList(ScrambleList(Relateds(Linux)),5)\n","permalink":"https://mostlymaths.net/2010/04/gcal-ultra-powerful-command-line-gnu.html/","tags":["Linux","Gcal","NanoNote"],"title":"Gcal the ultra-powerful command line GNU calendar"},{"categories":null,"contents":"\nScreenshot compositing, made with free software\nSince I bought the Nanonote, I have been finding new uses for it. Music player, note taker, voice recorder. I can also use it to start learning Python again, or Perl, which are (together with Lua) the languages currently installed by default.\nAfter my first successful port (gnugo), I decided to try something else, and while idling at the train I thought that pMARS, the portable Memory Array Redcode Simulator was probably a good bet. If you don\u0026rsquo;t know what I am talking about, you can check here. I had just started writing some test warriors, to see if I understood the code, but had too little time to test it working.\n\nAnd as I thought, pMARS was not as hard as other programs have turned to., but without graphical output, just text based. Enough. What changes are needed?\nFollow the steps in my previous tutorial, the changes needed fit in there.\nThe corresponding openwrt Makefile for pMARS should be\n # Copyright \u0026copy; 2008 OpenWrt.org\n# This is free software, licensed under the GNU General Public License v2.\ninclude $(TOPDIR)/rules.mk\n## Package name\nPKG_NAME:=pmars\n## Package version we need (to match our download source)\nPKG_VERSION:=0.9.2\n## Release version (don\u0026rsquo;t really needed, just for completeness)\nPKG_RELEASE:=3\n## Name of the file we will download, with the previous package name definitions\nPKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz\n## Url with the PKG_SOURCE file\nPKG_SOURCE_URL:=http://downloads.sourceforge.net/project/corewar/pMARS/0.9.2/pmars-0.9.2.tar.gz?use_mirror=mesh\n## Program to uncompress the sources\nPKG_CAT:=zcat\ninclude $(INCLUDE_DIR)/package.mk\n# Definition of the package, for adding to menuconfig and creating the ipkg.\ndefine Package/pmars\nTITLE:=Pmars\nSECTION:=games\nCATEGORY:=Games\nURL:=\nendef\n# Directory where the sources will be uncompiled and built BUILD_DIR\n# is an env variable from the OpenWrt toolchain, you don\u0026rsquo;t need to set\n# it.\nPKG_BUILD_DIR:=$(BUILD_DIR)/pmars-$(PKG_VERSION)\n# Long description of the package\ndefine Package/pmars/description\nPMARS\nendef\n# If ./configure does not need any options, leave it as follows\ndefine Build/Prepare\n$(call Build/Prepare/Default)\n$(CP) $(PKG_BUILD_DIR)/src/* $(PKG_BUILD_DIR)/\nendef\ndefine Package/pmars/Build/Configure\n$(call Build/Configure/Default)\nendef\ndefine Package/pmars/Build/Compile\n$(call Build/Compile/Default)\nendef\n# Where will be copied the binaries and libraries after installation.\ndefine Package/pmars/install\n$(INSTALL_DIR) $(1)/usr/sbin\n$(INSTALL_BIN) $(PKG_BUILD_DIR)/pmars $(1)/usr/sbin/\nendef\n# Final step for bulding the package\n$(eval $(call BuildPackage,pmars))\n And for it to work, you need to make some static patches to the Makefile in the src directory of the pmars package. Change the compiler for\n CC = mipsel-openwrt-linux-uclibc-gcc\n and the compiler and linker flags for\n CFLAGS = -O -DEXT94 -DPERMUTATE\nLFLAGS = -x\n And remove (or comment) this line:\n @strip $(MAINFILE)\n I hope you enjoy your Linux portable freedom, and write nice warriors to compete in The Hill. I will look into making a graphical version, although it looks quite hard in such a small window. If you have any question, don\u0026rsquo;t hesitate to post a comment or send me an e-mail.\nRelated posts:\nNanonote ports: Yacas, 4th (forth compiler and interpreter)\nMy first port to the Ben NanoNote: gnugo\nUnpacking my Ben NanoNote\nGcal: the ultra-powerful command line GNU calendar\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/04/another-ben-nanonote-port-pmars.html/","tags":["Programming","Linux","NanoNote"],"title":"Another Ben NanoNote port: pMARS"},{"categories":null,"contents":"As I promised in my previous post reasons for re-inventing the wheel as a programmer, here I collect 8 reader reasons for re-inventing the wheel from comments on the reddit thread and on page comments. They are in no particular order AFAIK.\n You need a faster wheel: Embedded software is the prime example of such. Average 10 cycles, worst case 15 cycles is not good when your system can explode if you do not attain 14 cycles at most. By AdShea, Reddit, also by Steven Benner, on page comment.\n Ability to support future wheel-enhancement requests at a moment\u0026rsquo;s notice: Richard Feynman wrote \u0026ldquo;What I cannot build, I do not understand.\u0026rdquo; Thus, if you need to maintain a large piece of code for a long time, it is better to have it written to suit your style and your understanding of the system. By glibc, Reddit.\n Harder to understand currently existing wheel: Some systems are designed with such poor documentation or interfaces that using them can be a pain, and a lot of time can be saved just by writing your own implementation. By tmoertel, Reddit.\n The existing wheel is ineffective: You are 3 weeks into the project, and the existing wheel you used breaks if it goes over 50 mph in a 3 lane eastbound highway in a state on the western coast. Or discovering that it doesn\u0026rsquo;t have support for dirt roads. Or that the wheels fall off on hybrid cars. By TheKludge, Reddit.\n Current wheels are not suitable: All our wheels are square, because we support driving up and down steps. If you don\u0026rsquo;t want to drive up and down steps, and want to drive on roads, just ignore the 900mb of additional classes that you don\u0026rsquo;t want, and include these 57 lines of XML config. By jstddvwls, Reddit.\n Wheel quality: All software contains bugs. If you need to rely on a piece of code, it is better to write and understand it yourself than to trust a random library you\u0026rsquo;ve found somewhere for download. By Luzius Meisser, on page comment.\n Funny axles: It\u0026rsquo;s quicker to re-invent my own wheel because then I can be sure it just fits where I want it to go, whereas otherwise I\u0026rsquo;d have to spend hours inventing an axle adapter. Using off-the-shelf implementations sometimes demands coping with a lot of baggage in the way of interfaces and setup, that may not be a good fit with code you\u0026rsquo;ve already produced. By Jerboa, on page comment.\n Ignorance: You didn\u0026rsquo;t know that it was a wheel, at that it already was invented. By Jens Schauder, on page comment. This one is probably the best I\u0026rsquo;ve read.\n  If you find any spelling error in your name, or want to add your real name and web-page to your reason, send me a message using the same channel you used for commenting. Thanks!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nThe two best mind mapping apps for iPhone\nLove thy tools to maximize your productivity\nSlow, natural, deadly: The importance of fundamentals\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nParseList(ScrambleList(Relateds(Programming)),10)\n","permalink":"https://mostlymaths.net/2010/04/8-reader-reasons-for-re-inventing-wheel.html/","tags":["Programming","Thoughts"],"title":"8 reader reasons for re-inventing the wheel as a programmer"},{"categories":null,"contents":" The command line. That small place, where a lot can happen. And more so if you are a Linux user‚Ä¶ How to maximize it? Where to harness its power?\nI discovered commandlinefu.com a few years ago, while looking for a way to do\u0026hellip; something. I don\u0026rsquo;t even enter that often, although it is a brilliant place to discover how to do X in Linux/UNIX.\nAmong its all time greats I found some gems, and some others I discovered elsewhere, or even I made up.\nCommand line gems Run the last command as root: sudo !! as in\napt-get install something -\u0026gt; error, you have to be root sudo !! The double exclamation mark recovers the last command in the history.\nUse the last argument for the last command: !$ as in\nmkdir /path/to/somewhere cd !$ Change to the previous directory: cd - as in (after the previous example to get back to where you started). Good paired with popd (bash keeps a stack of visited directories)\ncd - Backward history incremental search: C-r in the terminal prompt, start writing the command you want to backward-search. Press C-r to keep on searching for that term. Best combined with fzf\nCorrect typo in previous command: ^typo^corrected as in\nsudo apt-get isntall somepackage ^isnt^inst  Write command in editor: C-x C-e will fire the editor in $EDITOR to write the following command.\nOpen the last modified file of a type: I use this to open the most recent ppm file in a directory with Eye Of Gnome: eog \u0026quot;$(ls -rt \\*.ppm | tail -n 1)\u0026quot;\nUse locate to search for a specific PDF and open it with evince: evince \u0026quot;$(locate \\*partofname\\*.pdf)\u0026quot; This will only work if it results in only one instance. If you want to open only the first occurrence evince \u0026quot;$(locate \\*partofname\\*.pdf | head -n 1)\u0026quot;\nThe same with find: evince \u0026quot;$(find -name 'NameOfPdf.pdf')\u0026quot;\nMighty heads and tails: head -n N file, tail -n N file will return the first (resp. last) N lines of file.\nGet pid of a process by name: ps ax | grep \u0026quot;firefox\u0026quot;\nFollow changes on a incremental file: tail -f filename as in following nohup.out from a running process.\nGet all lines containing a string in a file: grep -e \u0026quot;string\u0026quot; file \u0026gt; outputfile Useful as intermediate step for plotting specific data lines from a nohup.out file. With -r, change the string for a regexp (consider buying this book if you will use them more than once, I recommend it: Mastering Regular Expressions).\nI think I have a few more, but I just don\u0026rsquo;t remember them.\nNote from 2019: This was written a long time ago, and my list of tips and speed ups for bash/zsh is way larger now. Hit me on twitter if you want to know more.\n","permalink":"https://mostlymaths.net/2010/04/power-to-command-line.html/","tags":["Linux"],"title":"Power to the command line"},{"categories":null,"contents":" The \u0026lsquo;broken windows theory\u0026rsquo; is a widely known theory, based on folks knowledge (which have been also tested in real life).\n Consider a building with a broken window. If this window does not get repaired, other windows can break (over time, or by vandalism). In the long run, someone may break into the building, becoming a squatter.\nOr a more usual situation. If some litter gets accumulated in a sidewalk or a lot, soon more litter will accumulate, until people start leaving whole bags of trash.\n Mental litter So far, so good, and you may wonder what this has to do with productivity. Quick! Pick a scrap paper and a pen, and write the first five things with a pending in your mental to-do list. I am pretty sure you came up with big, real things to do. Good! But\u0026hellip; are you working on them? Really?\nI bet you have too much mental litter, keeping you from doing your work. It won\u0026rsquo;t pop out in such a list, because it is a small thing: today\u0026rsquo;s grocery, an appointment, the hour of your favourite TV show has changed.\nComputer analogy The widely used analogy of brain as a computer applies in this mental litter framework. You have a fixed amount of RAM (Random Access Memory, where running programs are while doing its jobs), and when you run out, you have to use disk cache (another computer parallelism: when there is not enough RAM, what you are not doing gets moved to your hard disk until you need it again to be running). And this slows you down in your most important tasks, because there is this constant switching between litter and gold.\nFreeing your mind: how You have a lot of important tasks, and an increible amount of (non)-important, non-urgent tasks. If you are a Getting Things Done(buy on Amazon link) user, you may already know how the brain dump process when creating your Next Actions list frees you (frees your RAM from all your stuff, by putting them in your \u0026lsquo;disk cache\u0026rsquo;)\u0026hellip; And you already know how hard it is to keep up with it.\nHow can you effectively get rid of all these small things in the back of your mind? The answer is easy, but hard to effectively follow: do them.\nDoing it: Classify and do them There are several options for classifying all these small tasks, depending on which type they belong to. You have to keep a clean mind, every time a small task pops out, classify it and forget.\n Reminders: Keep a file in your main computer, or a piece of paper nearby where you can write down all your personal reminders (i.e. don\u0026rsquo;t turn on the oven while the dryer is on, pick up books from bookstore).\n Appointments: Easy, as agendas are for this. Use your favourite agenda tool, and put whatever is in your mind there.\n Tasks: As in the reminders, keep a tasks file (i.e. write that post on broken windows).\n  And there are several options about doing them  Daily: Set each day a fixed amount of time (1 hour, 1.5 hours) to work on all these small undertakings. Order should not be important, as they are small tasks. Non urgent tasks have no priorities. You don\u0026rsquo;t need to finish each one, just work for a fixed amount of time in them and then go on with another thing.\n Weekly: You need to set at least one half-day for them (Sunday afternoon, for instance), and keep working on them for all that time span. It is somewhat harder, and maybe it is better to set one full day and work a little more relaxed on them.\n Monthly: I only recommend this if your lists are really small. If they are not, forget about doing a monthly sweep.\n  Final thoughts Now I have all this written down, I think it is so good I may also follow what I already wrote. Now, seriously, if you start following these guidelines, please share your experiences by posting a comment. If you found this useful, share with StumbleUpon, Reddit, Digg or whatever you enjoy.\nRelated posts:\nLove thy tools to increase your productivity\nProcrastination: Causes and cures\nWhat the \u0026lsquo;broken windows theory\u0026rsquo; has to say about productivity\nTime management systems\nLove thy tools to maximize your productivity\nParseList(ScrambleList(Relateds(Productivity)),5)\n","permalink":"https://mostlymaths.net/2010/04/what-broken-windows-theory-has-to-say.html/","tags":["Thoughts","Productivity"],"title":"What the 'Broken Windows Theory' has to say about productivity"},{"categories":null,"contents":" \nSince I bought the Ben NanoNote, I thought I needed to port something to it, as the biggest point with the NanoNote is developing to it, as its wiki says.\nDavid Reyes, from Tuxbrain did a great work by porting gnuchess to the Nano and documenting it in his blog.\nOf course, I want to port big things, but I\u0026rsquo;m not a great Linux guy, just average, so this tutorial makes a great starting point. I first tried to port gforth\u0026hellip; But cross-compiling a compiler like gforth is really painful. I\u0026rsquo;ll give it more tries, but it will take a really long time. For now, I\u0026rsquo;ll show you how I ported gnugo to the NanoNote.\nWith respect to usability, the small screen in the Nano does not allow us to play a full 19x19 game (not in a way I\u0026rsquo;m aware of), but it can play 9x9 as you can see in the picture I posted.\nOkey, now for the how-to for porting. For the first steps I just copied David\u0026rsquo;s tutorial, as it covers everything you have to do, and is exactly the way I did it.\nSetting up the developing framework This are Debian/Ubuntu instructions to ensure that we have everything needed for cross-compilation. To install everything needed, run the following in a console\n sudo apt-get install gcc g++ binutils patch bzip2 flex bison make gettext unzip libz-dev libc6 ncurses-dev subversion libxml-simple-perl gawk git-core\n Now we create a folder (in our home directory, for instance) where we will keep all OpenWRT stuff and the framework from the git repository qi-hardware has set up.\n mkdir openwrt\ncd openwrt\ngit clone git://projects.qi-hardware.com/openwrt-xburst.git\ncd openwrt-xburst\ngit fetch origin\ngit checkout \u0026ndash;track -b xburst origin/xburst\nmake menuconfig\n Now we will see a graphical menu for adding packages, and compiling a whole Linux image. It is similar to the Linux kernel configuration menu (in graphical mode). It has a lot of configuration options. Here we can select which packages to compile, which to generate as modules and so on. We have to select as Target System Ingenic Xburst, and Qi BenNanoNote as Target Profile (it may auto-select it). Now exit and save configuration changes, and run make to get a basic kernel and the toolchain.\nNow, start the porting process.\nPorting Create a directory where we will keep all our porting applications:\n cd ..\nmkdir ports\nmkdir ports/games\nmkdir ports/games/gnugo\n Fire your favourite text editor and create a file named Makefile in the recently created gnugo directory.\nIn it we have to copy the following. BEWARE! Between define and endef you have to add tabs, real tabs, not four spaces! If you don\u0026rsquo;t change it, make will complain about missing separators.\n # Copyright \u0026copy; 2008 OpenWrt.org\n# This is free software, licensed under the GNU General Public License v2.\ninclude $(TOPDIR)/rules.mk\n## Package name\nPKG_NAME:=gnugo\n## Package version we need (to match our download source)\nPKG_VERSION:=3.8\n## Release version (don\u0026rsquo;t really needed, just for completeness)\nPKG_RELEASE:=3\n## Name of the file we will download, with the previous package name definitions\nPKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz\n## Url with the PKG_SOURCE file\nPKG_SOURCE_URL:=http://ftp.gnu.org/gnu/gnugo/\n## Program to uncompress the sources\nPKG_CAT:=zcat\ninclude $(INCLUDE_DIR)/package.mk\n# Definition of the package, for adding to menuconfig and creating the ipkg.\ndefine Package/gnugo\nTITLE:=Go GNU from FSF\nSECTION:=games\nCATEGORY:=Games\nURL:=http://www.gnu.org/software/gnugo\nendef\n# Directory where the sources will be uncompiled and built BUILD_DIR\n# is an env variable from the OpenWrt toolchain, you don\u0026rsquo;t need to set\n# it.\nPKG_BUILD_DIR:=$(BUILD_DIR)/gnugo-$(PKG_VERSION)\n# Long description of the package\ndefine Package/gnugo/description\nGNU Go is a free program that plays the game of Go. GNU Go has played thousands of games on the NNGS Go server. GNU Go is now also playing regularly on the Legend Go Server in Taiwan, on the WING server in Japan, and many volunteers run GNU Go clients on KGS. GNU Go has established itself as the leading non-commercial go program in the recent tournaments that it has taken part in.\nendef\n# If ./configure does not need any options, leave it as follows\ndefine Package/gnugo/Build/Configure\n$(call Build/Configure/Default)\nendef\n# Where will be copied the binaries and libraries after installation.\n# Gnugo creates the binary executable in the interface directory.\ndefine Package/gnugo/install\n$(INSTALL_DIR) $(1)/usr/sbin\n$(INSTALL_BIN) $(PKG_BUILD_DIR)/interface/gnugo $(1)/usr/sbin/\nendef\n# Final step for bulding the package\n$(eval $(call BuildPackage,gnugo))\n Now we need to tell OpenWRT we have new packages. To do so, go the trunk directory and run\n cp feeds.conf.default feeds.conf\n And add this line to the end of the file feeds.conf:\n src-link ports route/to/your/ports/dir\n and update the feeds:\n ./scripts/feeds update -a\n./scripts/feeds install -a\n Good, almost ready to go. What is the main problem for cross-compiling gnugo? Gnugo uses intermediate programs that process information and generate intermediate code, that is then compiled. And these intermediate programs can not be created by a cross-compiler: they have to be created for the host architecture.\nMy take on it was to download gnugo\u0026rsquo;s sources, ./configure and make gnugo. Then use the generated intermediate files to generate the target files. And it worked!\nThus, now create a directory ~/testing-gnugo/ where you download gnugo\u0026rsquo;s tar.gz sources, and uncompress it. Copy that directory into gnugo-3.8-mod and gnugo-3.8-old. And do the ./configure make stuff in the original gnugo-3.8. You will have some files in gnugo-3.8/patterns named mkpat, joseki, mkeyes and a few more. These are the key files!\nPatching gnugo\u0026rsquo;s makefile We need to make a patch for gnugo to compile. First, create a patches directory in ports/games/gnugo/. Now, open your favourite text editor and open gnugo-3.8-mod/patterns/Makefile.in\nYou need to change all instances to ./joseki, ./mkpat, ./mkeyes, ./uncompress_fuseki, ./mkmcpat to use the ones in the gnugo-3.8/patterns directory you got earlier.\nAfter you are done, go to the testing-gnugo directory and create the patch with the following instruction\ndiff -crB gnugo-3.8-old/ gnugo-3.8-mod/ \u0026gt; 001_static_definition.patch\nand copy the 001_static_definition.patch to the patches directory you have just created. The number serves to order patches that have to be applied sequentally.\nGo to the trunk directory, make menuconfig and go to the Games section. Select gnugo with \u0026ldquo;M\u0026rdquo; to generate a separate package, exit and save. Now\n make package/gnugo/compile V=99\n If everything works correctly, there won\u0026rsquo;t be any errors and you can end the process with\n make package/gnugo/install V=99\n If there was some error, it was probably due some missing replace in the Makefile. Check what change is missing and correct it.\nNow you can transfer (with the Ethernet via USB connection) the file in trunk/bin/xburst/packages, named gnugo-3.8-3-xburst.ipk to the NanoNote, where you can install by going to the directory where you have copied the ipk file and\n opkg install gnugo-3.8-3-xburst.ipk\n It may complain about some missing packages, but it is a Qi\u0026rsquo;s distribution problem, not a fault from the freshly made package.\nRelated posts:\nUnpacking my Ben NanoNote\nAnother Ben Nanonote port: pmars\nNanonote ports: Yacas, 4th (forth compiler and interpreter)\nGcal: the ultra-powerful command line GNU calendar\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/04/my-first-port-to-ben-nanonote-gnugo.html/","tags":["Programming","Linux","NanoNote"],"title":"My first port to the Ben NanoNote: gnugo"},{"categories":null,"contents":" \nStochastic hill climbing: Sisyphus pushes an image Last year, Slashdot published this interesting piece of work: Genetic evolution of the Mona Lisa. The idea is to approximate an image by a certain number of semitransparent polygons, randomly chosen. I liked very much the idea, and as every year I try to come up with some Christmas postcard related to maths or programming I gave it a try. So I wrote a LISP version\u0026hellip; way too slow. After optimizing a little my code I got a 3x boost\u0026hellip; but it was around 3 times slower than the C version I wrote afterwards\u0026hellip; Which is still damn slow. But works :) I\u0026rsquo;ll show here how the algorithm works, and I\u0026rsquo;ll (officially, it is already available) post the code in a week or so.\nI work just with triangles (it was much easier to write), but the algorithm is quite slow, moreover I need more than 50 triangles to get significative similarities. I have observed some interesting properties of the approximation algorithm. The most significative one, is the asymptotic convergence. Here you can see in red the error of the approximated image (in an arbitrary scale) vs. generation count. As you can see, it is somewhat asymptotic to a stable line. I have made some tweaks trying to at least lower this asymptote, but I didn\u0026rsquo;t get to it. The green bumping graph is related to a tweak of the algorithm I\u0026rsquo;ll explain below.\n\nThis run took around two days, for around 100.000 generations (estimated count, as generations are not in the \u0026ldquo;usual\u0026rdquo; generation count system).\nThe algorithm works as follows. Given an image we want to approximate, for each generation we do:\n If we can add a triangle, try to add a random triangle MaxSteps times. If the image is closer to the original, go on.\n Depending on a random factor, either\n   Changer: Take one of the given triangles of the actual approximation by a random choice and try to change it to a better one, try to do it for a random number smaller than MaxSteps. Pruner: Try to remove one triangle of the set (try for every triangle) Mover: Try to move every triangle to every possible position in the triangle list (for every triangle on the list). It starts in random positions in the triangle list, not to bias moving the \u0026ldquo;underneath\u0026rdquo; triangles.\n Swapper: Try to swap every pair of triangles. As above, but swapping every two triangles.\n  These last two steps are painfully slow, so they have a probability of happening several times smaller than the Changer.\n Repeat\n  I have set also several thresholds. First, I set a maximum number of triangles, and divide it by 20 (for example). Then, divide the initial error by 8 (for example also, but these are quite good numbers) to have a FitStep, and every time the current fit result for the image is smaller than InitialThreshold-Function(FitStep), increase the number of triangles (if smaller than the total maximum). I added this after realizing that most of the first placed triangles were mostly crap, with this method I try to get for each number of triangles, somewhat like the best possible approximation. This part works quite well, the problem is the later addition of triangles, which is not as good. In the previous plot, the green lines show the triangle add thresholds.\nAfter this, I also realized that random changes for all parameters in a triangle were too random for a change, more so when the image was quite close to the original. Thus I added a Jiggler step, which is chosen randomly instead of Changer, which just moves a little the triangle parameters for every triangle (starting from a random triangle in the list, and for a certain number of tries).\nAs I said, this algorithm is slow, mostly because of how I started. I needed it to create the Christmas postcard, so I just wrote it and when it worked, I had it running for as long as needed. Now I realize how much tweaking is left to make it somewhat useful (in fact, a quite simple improvement can add a 2x boost\u0026hellip;).\nHere are two images. One is similar to my Facebook (and some other places) profile image (I recalculated for this post), the other one is what I used for the Christmas postcard you can find in this post.\nI\u0026rsquo;ll post the corrected source soon (it is already in my googlecode repository, but it lacks comments and the most obvious tweaks, and also the shell scripts used to generate the postcard), hope you can wait for it. If you have any suggestions to improve the algorithm, you are really welcome.\n \n \nLeft: approximation (you guessed!).\nAbove: 74 triangles Below: 156 triangles\nRight: original image to aproximate\nThanks to everyone who commented on the Reddit thread. I\u0026rsquo;ll try to write an improved version soon, with a mix of your suggestions. If you enjoyed reading this, please share it via Reddit, StumbleUpon, Digg or whatever you enjoy using. Thanks!\nRelated posts:\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n9 programming books I have read and somewhat liked\u0026hellip;\n8 reasons for re-inventing the wheel as a programmer\nMy take on logical mazes: Part 1\nParseList(ScrambleList(Relateds(Programming,Linux)),12)\n","permalink":"https://mostlymaths.net/2010/04/approximating-images-with-randomly.html/","tags":["Programming","LISP"],"title":"Approximating images with randomly placed translucent triangles, Take 1"},{"categories":null,"contents":" Has someone ever told you \u0026ldquo;Don\u0026rsquo;t re-invent the wheel\u0026rdquo;? Again and again I read somewhere around the net that \u0026rsquo;re-inventing the wheel\u0026rsquo; is one of the worse errors a programmer can fall into. In fact, I\u0026rsquo;ve read it so often that the only thought of doing it makes me re-think over and over other ways of solving (or ignoring) the problem.\nBut here, I advocate my pro\u0026rsquo;s (the cons can be found elsewhere) for re-inventing the wheel, or at least not being frightened of it. You can also read the follow-up: 8 reader reasons for re-inventing the wheel as a programmer.\n I don\u0026rsquo;t like the default wheel color: Sometimes you need a specific type of algorithm, one that the \u0026lsquo;library standard\u0026rsquo; just does, without the bells and whistles you need. Writing your own version allows you to tweak it to suit your problem domain. Do it!\n I want a bigger wheel: What happens when the usual algorithm doesn\u0026rsquo;t fit at all? When you need to write really context-specific code, working with generalistic libraries is impossible. Even worse, what happens when you are writing the specific library? Go ahead!\n I am a wheel engineer: if you are deep in the know-hows of the subject, re-inventing the wheel is a way to be sure of your complete knowledge of your domain of expertise. A kind of self-knowledge test. Test it!\n I want to know how does the wheel work: related to the previous item, but focused to amateurs on the subject. I feel this way quite often, and sometimes this has paid off in the long run. This can lead to spicing up a boring afternoon. Discover it!\n My wheel is better than your wheel: Pride. You can write it better, can\u0026rsquo;t you? Closely related to the programmer virtues: laziness, impatience and hubris.(check this page for them). Be proud of it!\n Proprietary vs free: maybe the wheel you want to use is a proprietary wheel, thus you can\u0026rsquo;t add it to your open-source project, or have to pay some fee to use it. Free it!\n Create a new wheel: you need to know how the old stuff works to be able to create the new big thing (usually, in most areas). We are standing on the shoulders of giants, but if we don\u0026rsquo;t know how tall they are, we can step over midgets. Learn it!\n Boredom: maybe you have a free Sunday afternoon and don\u0026rsquo;t want to code something over-the-top, and you decide to write your own algorithm for X. Closely related to reasons 4 and 5. Enjoy!\n  Do you have your reasons and they are not in this list? Post a comment and I\u0026rsquo;ll write a new (collaborative) version! (Written! 8 reader reasons for re-inventing the wheel as a programmer).\nIf you enjoyed this post, please share it with your friends or subscribe to this blog!\nRelated posts:\n 9 Best Programming Books I Have Read (So Far) Learn to Remember Everything: The Memory Palace Technique And e appears from nowhere Timeboxing: You Will Work Like Never Before  ParseList(ScrambleList(Relateds(Linux, Programming)))\n","permalink":"https://mostlymaths.net/2010/03/8-reasons-for-re-inventing-wheel-as.html/","tags":["Programming","Linux","Thoughts"],"title":"8 reasons for re-inventing the wheel as a programmer"},{"categories":null,"contents":" \nThe Ben NanoNote: smaller than my wallet!\n\nThe Ben NanoNote: A computer smaller than my wallet If you are new here, have a look around and if you like what you find, don\u0026rsquo;t forget to subscribe.\nToday I received by post my Ben NanoNote, from Tuxbrain. What is it? A palmtop computer, really small. It has also really small specs\u0026hellip; small screen, small keyboard, little RAM, and so on. Just a geek toy. But isn\u0026rsquo;t it nice? You may wonder: How much is it: 99‚Ç¨, or 99$, depends.\nI have seen quite a few videos on unpacking the NanoNote\u0026hellip; I took some pictures. The usual unpacking process: tearing the bag, opening the paper bag\u0026hellip; Then comes the really nice, smallish box. Well packed, it is!\n\n\nIt comes quite tightly packed (not as tightly as Apple gadgets, mind you) as you can see. Some foamy packing to keep it from getting knocked, underneath it comes a box with a small booklet with some hints (Internet forwarding via USB, Ethernet via USB, USB Boot and reflashing), a cleansing towel (quite nice, iPod style) a USB-miniUSB connector and charger and something that looks like a plastic \u0026ldquo;switch\u0026rdquo; to toggle the hardware USB boot.\nBelow you can see it running. Still little software\u0026hellip; Luckily, this will improve over time, with help from all developers worlwide. This is an open project, every owner can help, and I\u0026rsquo;m doing the best I can to improve it. Long live the Ben NanoNote!\n\nRelated posts:\n_9 Programming Books I Have Read and Somewhat Liked\u0026hellip; (more than 12K views!)_\n___ Power Nap Via the Command Line in Linux/Mac OS_\n_Linux is a time killer (follow-up ‚Äì Ditching Ubuntu: Arch Linux in my Acer Aspire One)_My first port to the Ben NanoNote: gnugo\nAnother Ben Nanonote port: pmars\nNanonote ports: Yacas, 4th (forth compiler and interpreter)\nGcal: the ultra-powerful command line GNU calendar\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/03/unpacking-my-ben-nanonote.html/","tags":["Programming","Linux","NanoNote"],"title":"Unpacking my Ben NanoNote"},{"categories":null,"contents":" My backlog of things happening is quickly filling, faster than I can even keep track of it. Just a quick overview\nSummer trip to Iceland This summer we are going to Iceland for 17 days. It is some kind of tour-trip, where we have arranged accomodation and car rental and we just have to keep en route around the island to sleep where arranged each day. As an addition to this\u0026hellip;\nLearning Icelandic You know, Laia and myself are quite odd\u0026hellip; and we saw Teach yourself Icelandicat the same place we bought our travel guide and road map. The temptation was too big, and we bought. Now we are trying to learn Icelandic, not easy!\nBought a Ben NanoNote A twitterer I follow posted this review of the Ben NanoNote\u0026hellip; A really small, very limited, really nice, cheap, Linux palmtop computer. At the sported price tag I couldn\u0026rsquo;t resist, and mine is coming next Tuesday. I\u0026rsquo;ll keep you informed of what I use it for, still not clear what it can do beside being a cool gadget to have around home sitting idly.\nLooking again at RedCode As it happens to me once in a while, I\u0026rsquo;m again looking at playing CoreWarrior\u0026hellip; But this time I committed myself better: I even wrote some programs I tested. I just have to find time to code the ideas that are sprouting at odd day moments, while I read the old numbers of the CW newsletter.\nBlog redesign As I posted, my blog is undergoing a redesign (I\u0026rsquo;m rewriting all CSS in the blogger template I use, and when I\u0026rsquo;m done I\u0026rsquo;ll just paste the blogger specific anchors).\nParseList(ScrambleList(Relateds(Maths, Programming, Linux, Productivity)),7)\n","permalink":"https://mostlymaths.net/2010/03/backlog-filling.html/","tags":["Blog","Thoughts"],"title":"Backlog filling"},{"categories":null,"contents":"It had to happen sooner or later. This blog has been open, with a somewhat regular publication in English since March 2008, more or less a year ago. Before that, it was more sporadic, and used to be in Catalan, just to output some ideas or share a picture with a friend.\nAnd the day had to come. To celebrate this approximate anniversary, I\u0026rsquo;m moving to my own domain and preparing a new look that will appear in about two weeks. Start pointing your links at www.mostlymaths.net which currently acts as a mirror of my usual URL. The old link will turn into a redirect to www.mostlymaths.net in a couple of weeks.\nYou may wonder where the name of the domain comes from. I see it as an embodiment of my workday. On a typical day I do, mostly maths. But the rest of the time I do a bunch of other things, which are precisely the ones I usually blog about.\nStay tuned for the new design, and spread the word of the domain name change!\n","permalink":"https://mostlymaths.net/2010/03/sooner-or-later.html/","tags":["Blog","Thoughts"],"title":"Sooner or later..."},{"categories":null,"contents":"It is a widely accepted theory that the use of tools determined the development of the human brain. Nowadays, using tools is thus a quite common endeavor everybody does.\nBut ask a carpenter if he would use a jagged saw, or a draftsman a broken pencil. It is not only using the tools, but using the best tools.\nBut what is for the best tools? Using the best possible tools is not enough: you need to love your tools. I read somewhere that the best way to keep an organized system (like GTD) is to do it with tools you love. Like, for example (if you enjoy that kind of things) with a Moleskine notebook and a pen you like to write with.\nYou can ask any of my University class mates for my handwriting during lectures. It was horrible, although I could write with quite a pretty script if I wanted to. I didn\u0026rsquo;t see the point, as what I wrote was for me, and I was too lazy to keep it nice.\n\n\nBut one day, truth dawned on me. Why? Well, I was given an assistant professorship, for 3 hours a week I would be writing on a blackboard, and using the solutions of the problems I came to the day before.\nAnd bad handwriting is something I didn\u0026rsquo;t like about my teachers, so I decided it was a time for a change. The next time one of my former class mates (in fact, a friend who was with me since high school), she asked to one of my students (and a friend of her) Whoo! He has a clear handwriting!? And the answer was a promptly Indeed. I was happy about that.\nI managed to do that by writing with a Parker pen I got as a present something like 10 years ago\u0026hellip; and after ending my classes, I stopped using it. My handwriting still was good\u0026hellip; but not as good.\n\n\nI think I\u0026rsquo;m beating around the bushes. The fact is that as of a few years ago, I really enjoy my own handwriting, thus I want to use the best possible tools to cast them in paper.\nA few months ago I recovered my \u0026ldquo;old\u0026rdquo; black Parker pen to write down what my thesis was turning out to be\u0026hellip; And just a few weeks later I discovered the Parker Esprit and promptly bought it. A pocket pen, smaller than my old one, with a really nice look and telescopic enlargement: when fully open it is the same size as my old one. And it writes like a charm. Good!\nBut this is not a post about hand writing, or pens. Although it looks like it is, isn\u0026rsquo;t it? It is a post about using tools you love. Why do you have to use tools you love? I can give you a bullet list if you like:\n Won\u0026rsquo;t refrain Enjoyment Even bliss Cool factor Practical \u0026hellip; sure there are more!  But this isn\u0026rsquo;t enough, as a bullet list doesn\u0026rsquo;t cover what I really mean by all those things.\nWon\u0026rsquo;t refrain: You won\u0026rsquo;t put off doing that you have to do, because you will be doing it with the best possible tool, and one you, in fact, love using.\nEnjoyment: If you enjoy at least a part of what you are doing, it is easier to keep doing it for a while longer. Example: drafting a solution for a problem is usually something not really enjoyable, but if the tool you use for it is one you love to use, at least doing it has a pleasant side to it.\nEven bliss: Just combine something you love to do with doing it with a tool you love to use. What can go wrong?\nCool factor: You can brag about doing things in a way you enjoy them (as an emacs lover, vi users are easy prey to AucTeX).\nPractical: That, of course, depends on your mentality. Usually the tool you love to use is also the best suited for \u0026ldquo;the job you are doing\u0026rdquo;.\nNow comes the reflective stage. Take a piece of paper and your favorite writing tool, and start by making a list of what your job requirements are, following these rough guidelines:\n Handwriting required? (Y/N)\n Do you like your handwriting? Do you love your hand writing tool?  Computer typesetting? (Y/N)\n Do you like the program you use for it? Do you like the environment you work within your computer?  Other computer usage? (Y/N)\n Do you like your \u0026ldquo;X\u0026rdquo; application? (X=mail, calendar\u0026hellip;) Do you enjoy your typing speed and feeling? Do you enjoy your keyboard keypress?  Phone usage? (Y/N)\n Is your phone accessible? Does it work correctly?  Other tools you may use? (Y/N)\n Make a list of those on your own!   For every Y in the previous list, try to answer the questions sincerely. Some of these questions may feel a little\u0026hellip; whimsical, at least. But they are not, and I\u0026rsquo;ll give you a few hints of what I mean by them. I have already talked about handwriting, by the way!\nTypesetting: If you use a computer, chances are high you use it for typesetting something, and if you enjoy my blog, you probably use LaTeX. Is your LaTeX editor the best it can be? Well, all editors have quite a few advanced features you may not be using and can have a critical impact in your performance and sense of fulfilment. I am a emacs user, and have a few pointers on what to do with emacs. You can read it anyway, and try to see what advanced options of your editor allow you to cut typing time. And if you can\u0026rsquo;t, dump it and find another! Quick!\nApplications: There are a lot of options for calendars, mail and such, and there is no point in being trapped in something out of rutine. Getting used to a new environment is hard, but sometimes rewarding. It took me one year to get used to emacs\u0026rsquo; keybindings, and now, after 3 years I really enjoy them, because they feel second nature. If you are an advanced user of anything, you know how this feeling of naturality is, and how good it makes you feel. Go on and try something new!\nTyping: This is subjective. With practice, and a typewriter, I had to be pretty sure I didn\u0026rsquo;t need to erase anything I wrote (the eraser roll was as expensive as 3 typing rolls!), and I got used to almost never having to delete anything. And you know, writing without looking at the keyboard is far more efficient. Is your typewriting like this? Or are you always looking at the keyboard and putting misplaced characters? Now it depends on you, if you prefer to keep losing all those seconds and half-seconds (you can try to estimate how much time of your writing is spent going backwards) or do something about it. Just saying aloud (but not so loud if you share your office) d\u0026rsquo;oh everytime you have to erase anything different from at least a word will sure eliminate this habit.\nFlow typing and keyboard strength: This is also quite a subjective feeling. I am no pianist, but a few years ago I read a book on musical practice theory called [](http://www.amazon.com/Effortless-Mastery-Liberating-Master-Musician/dp/156224003X)[Effortless mastery](http://www.amazon.com/Effortless-Mastery-Liberating-Master-Musician/dp/156224003X?ie=UTF8\u0026amp;tag=rbersblog-20\u0026amp;link_code=btl\u0026amp;camp=213689\u0026amp;creative=392969)![](http://www.assoc-amazon.com/e/ir?t=rbersblog-20\u0026amp;l=btl\u0026amp;camp=213689\u0026amp;creative=392969\u0026amp;o=1\u0026amp;a=156224003X). I highly recommend it as a quite rewarding read, even for non-musicians. What the author describes in one of the middle chapters is how one of his music teachers played effortlessly with his hands flowing over the keyboard. Do you write like this? I have done it, but not much more than once a day. When I am in this flowing state, writing with a keyboard is almost like direct mental transfer from me to my computer. Just let go with the flow of typing\u0026hellip; or change the keyboard.\nPhone: This is easier\u0026hellip; If you use a lot your phone, you have to be sure it works correctly and as expected, without strange noises or any quirkiness.\nOf course, a lot more can be said about which tools to use, but I think this is something you have to find out yourself. I just gave you some pointers you have to follow in the path. Good luck!\nIf you enjoyed this post, please stumble, digg or whatever you feel like. Thanks!\nPosts you may like:\nParseList(ScrambleList(Relateds(Productivity, iPod)),10)\n","permalink":"https://mostlymaths.net/2010/03/love-thy-tools.html/","tags":["Thoughts","Productivity"],"title":"Love thy tools to maximise your productivity"},{"categories":null,"contents":" The pleasure and pain of time management In this post I\u0026rsquo;ll review some time management systems to get the most out of your workday. Of course, keep in mind that you also should have rest time.\nStart strong Start your day doing some work for at least half an hour straight. You can do this at home, before leaving yo your office (if you usually spend at least 1h between getting up and leaving) or just on arriving to your office. This is by far what has helped me the most. Don\u0026rsquo;t read your mail, or idle browse the net until at least one hour of work. I will talk more about this later, as it has been the best for me.\nSet mail time, browsing time Set a minimum work time before checking e-mail. I work for an hour before opening my mail account (unless I am waiting for some urgent thing, I just open, look for answer and read NO MAIL unrelated to it) in the morning and in the afternoon. Also try to avoid idle-browsing but you can set some time for it. I use to do it at night before going to sleep, or when I have just a small chunk of time between appointments and no small tasks ahead.\nThe (10+2)¬∑5 method Write on a list your tasks for the day. Our goal is to work exclusively and with our full attention on one of the items of our today list, for 10 minutes, and then do whatever you want for 2 minutes. Now repeat, taking the next item in your list. When we are starting it is better not to skip breaks, but soon you will be so immersed in your work that you won\u0026rsquo;t be able to stop. And work will get done.\nFound in 43Folders.\nPeriodic alarms Set a periodic alarm (a soft bell, a gong, or something not really disturbing) to start after 15 or 20 minutes. Each time it sounds we must consider what we are doing (is it work? is it wasting time?) and then center ourselves in work. I don\u0026rsquo;t really recommend this, as can be disturbing when you are \u0026ldquo;flowing\u0026rdquo; with what you are doing, but if you are a bad case of \u0026ldquo;concentration problems\u0026rdquo;, you may consider this.\nCan\u0026rsquo;t avoid enjoyment? If we need so much enjoyment and playing, one solution may be to make a weekly schedule (Sunday afternoon is a good moment) and set time for every pleasing, playful and enjoyable thing you can do. Set also time for doing \u0026ldquo;nothing\u0026rdquo;. After one day, or maybe less we will feel like we don\u0026rsquo;t have time to work, and strangely enough, we will be craving for work. And will enjoy a day of nothing doing.\nThe \u0026ldquo;Don\u0026rsquo;t stop me now\u0026rdquo; This is definitely the best (but hardest) way to be the most productive. Without paying attention to what you want to do go like \u0026ldquo;never stop\u0026rdquo;. Be prepared with a heavy to-do list, with a lot of things to be done.\nThe list should have at least 20 items to be done in the same place (your office, probably) without errands or meetings. Just pure work. To get this list, break big projects into small projects, and small into tiny.\nWhen you have this list (the best is to prepare it the night before), as you enter your office just keep doing things in that list for your whole work time. Don\u0026rsquo;t ever stop, work as if you were to finish the most important project ever today afternoon. At the end of the day you will feel exhausted, but also will have the feeling of a really successful day.\nThis solution, as good as it is has some drawbacks. Doing this is very tiresome, and getting a really big to-do list is hard. One way to solve this is keep always a notebook (small one) with you, with different pages, corresponding to different times. As an example, the 10 minute page,\nthe 30 minute page. In each one you write down the tasks you seriously think you can accomplish in this amount of time. Now, every time you run out of work, consider what amount of time do you have, take the corresponding (or closest) page and do one thing from the list. Just\nnever, ever stop. Clean the room, organize your mail, do phone calls. Anything but don\u0026rsquo;t stop.\nWhat has worked best (for me) so far To start strong in the morning at home, plan what you will be doing today. Take a piece of paper, your agenda, your PDA and write everything work-related and leisure related. You may write \u0026ldquo;Correct pages 1 and 2 of X\u0026rdquo; and \u0026ldquo;Play one game of Y\u0026rdquo;. It is better to write clearly what you will do, do not write \u0026ldquo;Correct some pages of X\u0026rdquo;, be precise of what your aim is. Do not under or over estimate what you can do in a day. Also, keep time for mail and browsing, but keep them from eating your day.\nAlso, setting one don\u0026rsquo;t stop me day, helps when you seem to be unable to start. Make a huge list and the next available day crush it.\nMeditating is a great help\u0026hellip; athough it doesn\u0026rsquo;t seem so while you are doing it. Meditating every day helps to be focused all day long, keeping your mind centered in what you want to do, and improves your overall focus every time.\nYou may also like\nParseList(ScrambleList(Relateds(Productivity, Programming)),10)\n","permalink":"https://mostlymaths.net/2010/03/time-management-systems.html/","tags":["Thoughts","Productivity"],"title":"Time management systems"},{"categories":null,"contents":"As I wrote in a previous post, I\u0026rsquo;m on my way to learn forth, and to do so, rewrite my Lispy raytracer into a.. Forthy raytracer. Of course, the first steps are deciding on some implementation ideas.\nI decided to allocate a few global variables (for \u0026ldquo;current point\u0026rdquo;, \u0026ldquo;current vector\u0026rdquo;, \u0026ldquo;light source\u0026rdquo;, etc), to avoid too much clutter in the stack. This way it will be cleaner, maybe even cleaner than my Lisp version.\nAnd of course, the first thing to do is to create arrays. But\u0026hellip; Forth has no arrays! Oh god! What to do!? CREATE .. DOES\u0026gt;. Amazing, truly. Now follows my code to create an n-vector of floats, as a first example of what it DOES\n  n-vector ( n \u0026ndash; ) ( i \u0026ndash; address)\ncreate floats allot\ndoes\u0026gt; swap floats + ;   What does this stand for? Create stands for what n-vector does when it is first called, and does stands for what the thing n-vector created does when called. In short: 3 n-vector Vector adds Vector to the dictionary, and 1 Vector returns the address of the second element in Vector.\nBut there is more! I will only work with 3-vectors, so I wrote a 3-vector creator,\n  3vector ( \u0026ndash; ) ( i \u0026ndash; address )\n\\ Creates a 3 vector in memory\ncreate 3 floats allot\ndoes\u0026gt; cells + ;   So far so good, but this is standard. I am a lazy programmer, I thought I would (and definitely will) need accessors for exactly this vector (where this means one of the \u0026ldquo;global variables\u0026rdquo; I set as vectors). Create .. does\u0026gt; allows me to write the two following marvels of\u0026hellip; laziness (although it took me 30 minutes to get it right!):\n  n.vector-reader ( n v ) ( value )\ncreate ,\ndoes\u0026gt; @ f@ ;\n n.vector-writer ( n v ) ( \u0026ndash; )\ncreate ,\ndoes\u0026gt; @ f! ;\n   Upon calling, n.vector-reader/writter with a position in the stack, and a vector as defined before, return a function which reads/sets said position. First a sample session, then the \u0026ldquo;how does it work\u0026rdquo;. In bold the system responses.\n 3vector Vector\n3vector Vector ok\n0 Vector f@ .\n0 Vector f@ . 9142112 ok\n0 Vector 10.0e1 f!\n0 Vector 10.0e1 f! ok\n0 Vector f@ f.\n0 Vector f@ f. 100. ok\n0 Vector n.vector-reader .x\n0 Vector n.vector-reader .x ok\n0 Vector n.vector-writer !x\n0 Vector n.vector-writer !x ok\n12.e0 !x\n12.e0 !x ok\n.x f.\n.x f. 12. ok\n0 Vector f@ f.\n0 Vector f@ f. 12. ok\n As you can see, now I have a function to set values and one to get them. The inner working is somewhat strange. At create time , puts the adress of the value of the top of stack inside the body, and upon calling, acts on it. The operator @ gets the contents (which is the adress of Vector!) and f@ gets its value (or f! sets it). Et voil√†!\nSome maybe related posts\nParseList(ScrambleList(Relateds(Programming, Forth)),10)\n","permalink":"https://mostlymaths.net/2010/03/forths-create-does-maybe-im-amazed.html/","tags":["Programming","Forth","Maths"],"title":"Forth's \"CREATE .. DOES\u003e\" maybe I'm amazed?"},{"categories":null,"contents":" CML with the Duffing Map\nThis is just to remind me of what I\u0026rsquo;m doing and how is it going\nApproximation of images by randomly placed translucent triangles  Finished the first version, it works (I used it for my Christmas postcard), but the speed is not really good. Should rewrite big parts to make it faster.\n Lisp raytracer  Stalled as I was rewriting the refraction code of the rewritten inner loop. Will probably savage something, someday, but just don\u0026rsquo;t know when.\n Forth raytracer  Just an idea to work on to learn some Forth. Will start soon, using the framework and knowledge learnt while working in the Lisp version\n Coupled map lattice simulations  C code just for looking at how my theorem applies to some artificial models. I got some insights on further development while looking at 5x5 models. Re-used some code from my postcard gluing code to create the projected lattice images.\n iPod Todo  Javascript (JQuery+JQtouch) offline-able web app to beat all other to-do\u0026rsquo;s. At least for me and some other users, as I will tailor it to suit our needs. Have some code, but will forget about it in some sense and do some design first, because the code is getting too convoluted.\n CJuicer  Works pretty well. Should add some automated processing via some bash scripts to use it quicker, and solve a small problem with includes.\n Cohen map  gp-pari code to find transverse intersections for the Cohen map. I have the Taylor expansions code by hand, should write it and do a MAJOR rewrite of all code.\n Approximating instability  Need to improve the algorithms used before even thinking of publishing.\n Lisp SIRDS  Has some bug I still have not found. Not working on it since January.\n Box iteration  An idea I have. Should work it on pen and paper first.\n I bet against myself 10‚Ç¨ that I have forgotten something in this list.\nSome inner (and random) links related to these projects\nParseList(ScrambleList(Relateds(Programming)),10)\n","permalink":"https://mostlymaths.net/2010/03/current-programming-projects.html/","tags":["Programming"],"title":"Current programming projects"},{"categories":null,"contents":"After following a twitter feed about programming, I got overwhelmed by FORTH related posts. I had already read something about forth before (stack-based, somewhat fast, good for embedded devices), but so many bit.ly links pointing to webs of implementations of FORTH and FORTH things made me decide to, well, take a deeper look.\nLooks like a nice language, having something I enjoy about Lisp (interactivity) and something I like about PostScript (stack based). Thus\u0026hellip; time for real learning.\nI have been thoroughly thinking about \u0026ldquo;What\u0026rdquo;. You can\u0026rsquo;t learn a programming language per-se, you need a project to work on.\nI shuffled several things (besides implementing my own Forth in my HP49G\u0026hellip; still don\u0026rsquo;t know how to do it, and know too little Saturn Assembly\u0026hellip; Someday!) and finally decided to make a new instance of my (unfinished) Lisp raytracer, in Forth. It will be quite a lengthy feat (will take at least 3 months, as I knew Lisp when I started that), but I hope it ends working and thus makes me happy and \u0026ldquo;forthy\u0026rdquo;. For now, I have just one function, to calculate the euclidean norm of a 3-vector with components in the (floating point) stack:\n  norm3 ( X Y Z \u0026ndash; X Y Z R, returns norm of X, Y, Z on stack )\nfover \\ X Y Z Y\n3 fpick \\ X Y Z Y X\n2 fpick \\ X Y Z Y X Z\nfdup f* fswap \\ X Y Z Y Z^2 X\nfdup f* frot \\ X Y Z Z^2 X^2 Y\nfdup f* f+ f+ \\ X Y Z Z^2+X^2+Y^2\nfsqrt ;   Probably is not the best implementation (I still have a tendency to C-ify things when stack-working), if someone around here knows a better way to do this, please drop me a line. By the way, the header image was found in [](http://www.amazon.com/Forth-Atari-Learning-Ekkehard-Floegel/dp/0936200383)[Amazon](http://www.amazon.com/Forth-Atari-Learning-Ekkehard-Floegel/dp/0936200383?ie=UTF8\u0026amp;tag=rbersblog-20\u0026amp;link_code=btl\u0026amp;camp=213689\u0026amp;creative=392969)![](http://www.assoc-amazon.com/e/ir?t=rbersblog-20\u0026amp;l=btl\u0026amp;camp=213689\u0026amp;creative=392969\u0026amp;o=1\u0026amp;a=0936200383)... Strange cover for a programming book!\nYou can also check progress in this post, FORTH\u0026rsquo;s \u0026ldquo;CREATE .. DOES\u0026gt;\u0026rdquo; Maybe I\u0026rsquo;m amazed? where I discuss what has been labelled \u0026ldquo;the jewel of FORTH\u0026rdquo;, the \u0026ldquo;CREATE .. DOES\u0026gt;\u0026rdquo; structure.\nYou may also like\nParseList(ScrambleList(Relateds(Forth, Programming, Lisp)),15)\n","permalink":"https://mostlymaths.net/2010/03/learning-forth-by-working-on-raytracer.html/","tags":["Programming","Linux","Forth"],"title":"Learning Forth by working on a raytracer"},{"categories":null,"contents":" The easiest way to debug: valgrind with the most powerful text editor: emacs A few days ago my office mate told me about the great debugging tool known as valgrind. Before I have been using the great pairing of emacs+gdb to debug segmentation faults and memory leaks\u0026hellip; Now I would never use gdb for this. Moreover, I found a way to somewhat use it from within a shell in emacs to allow fast error browsing.\nHow to use valgrind?\nConsider the following C code (where I have omitted the include statements), I\u0026rsquo;ll assume it is in SegFault.c In fact, this code would not yield a segmentation fault as it is, at least without some compilation tweaking.\n int main(void){\nint i; double *vector1, *vector2;\nvector1=(double*)malloc(3*sizeof(double));\nvector2=(double*)malloc(4*sizeof(double));\nfor(i=0;i\u0026lt;3;i++)vector1[i]=sin(i);\nfor(i=0;i\u0026lt;4;i++)vector2[i]=cos(i);\nfor(i=0;i\u0026lt;4;i++)printf(\u0026ldquo;sin(%d): %7.7lf cos(%d): %7.7lf\\n\u0026rdquo;,i,vector1[i], i, vector2[i]);\nfree(vector1);\nreturn 0;}\n You can see that this code has several errors. First, when allocating vector1 we only ask for 3 doubles, when we really need 4, and we don\u0026rsquo;t free vector2. Although these two errors, the output of the program at least is not segmentation fault. But these kind of errors, when accumulated, lead to pervasive segmentation faults, quite difficult to locate via gdb. The output of the program is:\n sin(0): 0.0000000 cos(0): 1.0000000sin(1): 0.8414710 cos(1): 0.5403023sin(2): 0.9092974 cos(2): -0.4161468sin(3): 0.0000000 cos(3): -0.9899925\n Valgrind comes to the rescue! First, we need to compile with source flags:\n gcc SegFault.c -lm -g -o SegFault.x -Wall\n And now execute this via valgrind. Valgrind acts as a virtual processor, thus keeping trace of memory accesses and the like, at a time penalty. You should use it only to find errors, not every time.\n valgrind ./SegFault.x\n Valgrind\u0026rsquo;s output for this example is\n \\==24585== Memcheck, a memory error detector.\n\\==24585== Copyright \u0026copy; 2002-2008, and GNU GPL\u0026rsquo;d, by Julian Seward et al.\n\\==24585== Using LibVEX rev 1884, a library for dynamic binary translation.\n\\==24585== Copyright \u0026copy; 2004-2008, and GNU GPL\u0026rsquo;d, by OpenWorks LLP.\n\\==24585== Using valgrind-3.4.1-Debian, a dynamic binary instrumentation framework.\n\\==24585== Copyright \u0026copy; 2000-2008, and GNU GPL\u0026rsquo;d, by Julian Seward et al.\n\\==24585== For more details, rerun with: -v\n\\==24585==sin(0): 0.0000000 cos(0): 1.0000000sin(1): 0.8414710 cos(1): 0.5403023sin(2): 0.9092974 cos(2): -0.4161468==24585== Invalid read of size 8\n\\==24585== at 0x8048587: main (SegFault.c:12)\n\\==24585== Address 0x41c9040 is 0 bytes after a block of size 24 alloc\u0026rsquo;d\n\\==24585== at 0x4026FDE: malloc (vg_replace_malloc.c:207)\n\\==24585== by 0x8048501: main (SegFault.c:8)sin(3): 0.0000000 cos(3): -0.9899925\n\\==24585==\n\\==24585== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 13 from 1)\n\\==24585== malloc/free: in use at exit: 32 bytes in 1 blocks.\n\\==24585== malloc/free: 2 allocs, 1 frees, 56 bytes allocated.\n\\==24585== For counts of detected errors, rerun with: -v\n\\==24585== searching for pointers to 1 not-freed blocks.\n\\==24585== checked 55,932 bytes.\n\\==24585==\n\\==24585== LEAK SUMMARY:\n\\==24585== definitely lost: 32 bytes in 1 blocks.\n\\==24585== possibly lost: 0 bytes in 0 blocks.\n\\==24585== still reachable: 0 bytes in 0 blocks.\n\\==24585== suppressed: 0 bytes in 0 blocks.\n\\==24585== Rerun with \u0026ndash;leak-check=full to see details of leaked memory.\n Et voil√†! Line number of exactly where memory access was out of bounds. What else could we ask for? Of course, emacs.\nYou can call valgrind from emacs, inside an emacs shell buffer (M-x shell, then you are working in an usual shell), but you would like to visit the exact line in your code somewhat. Probably through either keyboard or mouse click. It turns out (I found it here while googling for a way to use valgrind via emacs) you can use compilation-minor-mode to do that\u0026hellip; (M-x compilation-minor-mode), the problem then is that the return key gets mapped to compile-goto-error (i.e. you go to the line in the source with return), thus the terminal buffer no longer works as there is no way to send it commands. To solve this, I wrote this small piece of code and added to my .emacs:\n (defun valgrind ()\n(interactive)\n(compilation-minor-mode)\n(define-key compilation-minor-mode-map (kbd \u0026ldquo;\u0026rdquo;)\u0026lsquo;comint-send-input)\n(define-key compilation-minor-mode-map (kbd \u0026ldquo;S-\u0026rdquo;)\u0026lsquo;compile-goto-error))\n(add-hook \u0026lsquo;shell-mode-hook \u0026lsquo;valgrind)\n Now when I start a shell window from within emacs, the function valgrind I defined is automatically loaded, starts compilation-minor-mode and redefines the return and shifted-return keys as I wanted. Now return works as usual in shell buffers, and shift-return visits error at point.I also made this function interactive (thus you can call it as M-x valgrind), in case I decide to remove the hook.\nYou may be also interested in:ParseList(ScrambleList(Relateds(Linux,Programming,emacs)),15)\n","permalink":"https://mostlymaths.net/2010/02/debugging-with-emacsvalgrind.html/","tags":["Programming","emacs","Linux","Maths"],"title":"Debugging with emacs+valgrind"},{"categories":null,"contents":"Maybe you remember my previous post about detection of copied assignments? Well, now I can say it succeeded. CJuicer is a flex script, generating a lexycal analyzer with a rudimentary parser of C code, it outputs a PostScript with the \u0026ldquo;logical tree\u0026rdquo; of loops, function calls and conditionals. Same trees, copied assignment (unless it is a very simple code\u0026hellip; then almost everyone writes the same), without problems with changing names of variables. Thus it could beat diff.\nAfter revising a lot of images (well, 34) I detected 5 copies, one literal (i.e. diff-detectable) but 2 were harder, as they had changed variable names, in an otherwise identical code.\n \nClick to enlarge\nGraphs looked equal, and after examining the code, it was clear.\nStudent A\nint i,j;\ndouble *xt,*yt, *hpaso, *s, *c;\nhpaso=vector(4);\ns=vector(ordre);\nc=vector(ordre);\nStudent B\nint i,j;\ndouble *xt,*yt, *hmi, *s, *c;\nhmi=(double*)calloc(4,sizeof(double));\ns=(double*)calloc(ordre,sizeof(double));\nc=(double*)calloc(ordre,sizeof(double));\nOne was using a taylored function to allocate memory (something I always frown upon), and the other one was using the usual malloc/calloc. Besides this, different comments (in a quite broad sense\u0026hellip; they looked very similar) and slightly different variable names kill diff, but they don\u0026rsquo;t fool the graphical analyzer.\nFor easier inspection I modified the Juicer code to output a string of numbers together with the ps. It is easier this way, more like what I was doing when comparing the trees: instead of looking for 3 bumps at the start, I can look for 343434. Easier.\nStudent A: 7 7 7 7 7 7 7 7 7 7 57 67 7 11227 7 7 7 7 7 7 7 7 7 7 7 157 7 6257 657 61212567 7 7 7 7\nStudent B: 7 7 7 7 7 7 7 7 7 7 57 67 7 11227 7 7 7 7 7 7 7 7 7 7 7 157 7 6257 657 61212567 7 7 7 7\nIf you would like to use it, or have a look, check my Google code page, you can find the source in the CJuicer link. Keep in mind, if you use it to check for copies, be sure to use exactly the same revision: different revisions may give different results. I\u0026rsquo;m still solving some problems and bugs. Keep in touch!\nYou may also like\nParseList(ScrambleList(Relateds(Programming, Maths)),10)\n","permalink":"https://mostlymaths.net/2010/02/cjuicer-beats-humans-and-unixs-diff.html/","tags":["Programming","Thoughts","CJuicer","Maths","Bizarre"],"title":"CJuicer beats humans (and Unix's diff)"},{"categories":null,"contents":"\nMade with Sketchbook Mobile\u0026hellip;\nin an iPod Touch\nAll hail hypnotoad\u0026hellip; in real life\nI want to start by saying that I might buy an iPad, and definitely like it, in an abstract setting. But I think that Steve Jobs is kind of blind through his own charisma. He likes the iPad\u0026hellip; then it should be liked (and bought) by everyone.\nI don\u0026rsquo;t think the iPad is gona be a hit. It would, if it was priced 200$ below its said price ($499--\u0026gt;$299). At that price, it would surely break the market. I would definitely buy one. But at the current price, it is exactly what almost every Apple geek was hoping it was not: an oversized iPod Touch.\nI love my iPod Touch\u0026hellip; and of course, a bigger one would surely make my day. Not at that price, though. It is not really good as a book reader (LCD vs eInk was a battle lost a few years ago), nor as a video player (why should you be at the sofa, at home watching it in front of your real TV?). You can\u0026rsquo;t exactly work on it on whatever you want: it runs iPhone OS, not Mac OS.\nWhat everyone was hoping on the iTablet, iBook, or as it turned out, iPad was a tablet powered by Mac OS, or some new cool operating system that would do the job. A gadget that could replace your laptop on short trips, where you could keep on working on whatever you were working in your office/home. But they give us an iPod Touch x 4\u0026hellip; You can just work on writing emails, and I think in Pages. Oh, or Notes.\nMy iPod is jailbroken\u0026hellip; so I can do a lot more things on it\u0026hellip; But why should I be forced to do this on a $500 gadget? It should work *better*, right out of the box. And it can\u0026rsquo;t.\nBut, on the other side, as a $300 gadget\u0026hellip; it works pretty decently as a book reader (I read on my iTouch regularly), it can play music, draw and watch HD videos. For the price difference, you expect \u0026ldquo;something more\u0026rdquo;, if you don\u0026rsquo;t have it you can get over it\u0026hellip; or don\u0026rsquo;t.\nYou may also like\nParseList(ScrambleList(Relateds(Games,iPod,Mac, Drawing)),15)\n","permalink":"https://mostlymaths.net/2010/02/all-hail-steve-jobs-and-his-ipad.html/","tags":["iPod","Mac","Drawing"],"title":"All hail... Steve Jobs and his iPad?"},{"categories":null,"contents":"\nI got linked to Ipad\u0026rsquo;s \u0026ldquo;history\u0026rdquo;: Someone on MetaFilter posted a link to my emacs on iPod blog post in the thread about the launch of Apple\u0026rsquo;s iPad.\nYou may also like\nParseList(ScrambleList(Relateds(Linux,iPod,Mac,emacs)),5)\n","permalink":"https://mostlymaths.net/2010/01/part-of-ipad.html/","tags":["emacs","Linux","iPod"],"title":"Part of iPad"},{"categories":null,"contents":"\nI got this bookfor Christmas (more or less), and started to read and draw from it a few days ago. It is amazing what small hints can do to a messy drawing. The barrel, in particular, started as a messy outline (from the barrel in the book) and the final result looks pretty convincing (for me, at least).\n\nFirst drawing\n\nSecond drawing\n\nThird drawing\n\nFourth drawing\n\nFifth drawing\nYou may also like\nParseList(ScrambleList(Relateds(Drawing)),5)\n","permalink":"https://mostlymaths.net/2010/01/fountain-pen-ink-drawing.html/","tags":["Drawing"],"title":"Fountain pen ink drawing"},{"categories":null,"contents":"\nThis is where Linux started. Minix, from the bible on operating systems. You can easily install it on minivMac for your iPod, download it from this link and install the disk image in your iPod as usual. Then, unpack the files inside.\n\nFifteen minutes later\u0026hellip;\n\nWhen unpacking is finished, just open the MacMinix app, and Minix will be up and running.\n\nBy the way, the username for MacMinix is root, and the password is Geheim! From the information pages:\nMINIX 1.5 FEATURES\n System call compatible with V7 of the UNIX operating system Full multiprogramming (multiple programs can run at once) Kernighan and Ritchie compatible C compiler Shell that is functionally identical to the Bourne shell Five editors (emacs subset, vi clone, ex, ed, and simple screen editor) Over 175 utilities (cat, cp, ed, grep, kermit, ls, make, sort, etc.) Over 200 library procedures (atoi, fork, malloc, read, stdio, etc.) Spelling checker with 40,000 word English dictionary Full source code (in C) supplied on diskettes (OS, utilities, libraries) Easy-to-read manual telling all about MINIX and how to install and use it Up to 3 simultaneous users on one machine RS-232 serial line support with terminal emulation, kermit, zmodem, etc. Runs under Multifinder Includes support for multiple user windows  You may also be interested in:\nParseList(ScrambleList(Relateds(Linux,iPod,Mac)))\n","permalink":"https://mostlymaths.net/2010/01/minix-on-ipod-where-linux-started.html/","tags":["Linux","iPod"],"title":"Minix on the iPod: where Linux started"},{"categories":null,"contents":"\nFrom flickr\nA few months ago, I realised I was checking some pages frequently for changes. They were some congress pages, and I was waiting for them to add information about registration and such.\nThen I realised I could write a script to do it, using diff and wget. You can get it below. You have to edit it to add the pages you want to follow, then run it with the \u0026ldquo;write\u0026rdquo; option to download the first version, then edit your crontab file (crontab -e) to run it every day at a specified time with the \u0026ldquo;diff\u0026rdquo; option. For example:\n 00 13 1,7,14,21,28 * * /home/user/PageDiff.sh diff\n will run it every 1st, 7th, 14th, 21st and 28th of the month, at 13:00. Be sure to first run it as write.\n \u0026gt; #!/bin/sh \u0026gt; \u0026gt; \\# Copyright 2009 Ruben Berenguel \u0026gt; \u0026gt; \\# ruben /at/ maia /dot/ ub /dot/ es \u0026gt; \u0026gt; \\# PageDiffs: Fill in an array of webpages, with the option \u0026quot;write\u0026quot; \u0026gt; \\# will download them, with the \u0026quot;diff\u0026quot; option will re-download them and \u0026gt; \\# check the new against the old for differences. With the \u0026quot;diff mail\u0026quot; \u0026gt; \\# option, will send an email to $MAILRECIPIENT, assuming mail works. \u0026gt; \\# You can find the most up to date version of this file (and the GPL) \u0026gt; \\# [http://rberenguel.googlecode.com/svn/trunk/Bash/PageDiffs.sh](http://rberenguel.googlecode.com/svn/trunk/Bash/PageDiffs.sh) \u0026gt; \u0026gt; \\# 20091226@00:24 \u0026gt; \u0026gt; MAILRECIPIENT=\u0026quot;mail@mail.com\u0026quot; \u0026gt; \u0026gt; j=0 \u0026gt; Pages\\[j++\\]=\u0026quot;http://www.maia.ub.es/~ruben/\u0026quot; \u0026gt; Pages\\[j++\\]=\u0026quot;http://www.google.es\u0026quot; \u0026gt; #Add more pages as above \u0026gt; \u0026gt; if \\[ \u0026quot;$1\u0026quot; = \u0026quot;write\u0026quot; \\]; then \u0026gt; echo Generate files \u0026gt; count=0 \u0026gt; for i in \u0026quot;${Pages\\[@\\]}\u0026quot; \u0026gt; do \u0026gt; echo Getting \u0026quot;$i\u0026quot; into File$count \u0026gt; wget \u0026quot;$i\u0026quot; -v -O \u0026quot;File$count\u0026quot; \u0026gt; let count=$count+1 \u0026gt; done \u0026gt; fi \u0026gt; if \\[ \u0026quot;$1\u0026quot; = \u0026quot;diff\u0026quot; \\]; then \u0026gt; count=0 \u0026gt; for i in \u0026quot;${Pages\\[@\\]}\u0026quot; \u0026gt; do \u0026gt; \\# echo Getting \u0026quot;$i\u0026quot; into Test$count \u0026gt; wget \u0026quot;$i\u0026quot; -q -O \u0026quot;Test$count\u0026quot; \u0026gt; Output=$(diff -q \u0026quot;Test$count\u0026quot; \u0026quot;File$count\u0026quot; | grep differ) \u0026gt; Result=$? \u0026gt; if \\[ \u0026quot;$Result\u0026quot; = \u0026quot;0\u0026quot; \\]; then \u0026gt; if \\[ \u0026quot;$2\u0026quot; = \u0026quot;mail\u0026quot; \\]; then \u0026gt; echo Page at \u0026quot;$i\u0026quot; has changed since last check! \u0026gt;\u0026gt; MailCont \u0026gt; mail=1 \u0026gt; fi \u0026gt; echo Page at \u0026quot;$i\u0026quot; has changed since last check! \u0026gt; else \u0026gt; echo Page at \u0026quot;$i\u0026quot; has not changed since last check! \u0026gt; fi \u0026gt; #rm Test$count \u0026gt; let count=$count+1 \u0026gt; done \u0026gt; if \\[ \u0026quot;$mail\u0026quot; = \u0026quot;1\u0026quot; \\]; then \u0026gt; mail -s \u0026quot;Page changed alert!\u0026quot; $MAILRECIPIENT  Related posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nAnd e Appears From Nowhere!\nPower Naps With a Command Line Utility in Linux\nC code juicer: detecting copied programming assignments\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nThe 100 Most Common Icelandic Words with a Bash ScriptParseList(ScrambleList(Relateds(Programming)),4)\n","permalink":"https://mostlymaths.net/2010/01/cron-diff-wget-watch-changes-in-webpage.html/","tags":["Programming","Linux"],"title":"Cron, diff \u0026 wget: Watch changes in a webpage"},{"categories":null,"contents":" Using emacs on the go in your iPod Touch / iPhone Maybe you remember a previous post on installing vMac, a Mac Plus emulator for the iPod Touch. I did it just for the geek factor\u0026hellip; and for being able to edit things with Emacs. I have emacs installed:\n\nBut what\u0026rsquo;s the use of emacs, without files to edit? It didn\u0026rsquo;t bother me\u0026hellip; at first. Keep on reading for how to keep in sync files edited inside the vMac emacs and files in your Linux box, along with the \u0026ldquo;why should I use emacs in my iPod/iPhone?\u0026rdquo;. Or why should I have a Mac Plus on my iPod? Keep reading for my points, afterwards you can read 86 Mac Plus Vs. 07 AMD DualCore. You Won\u0026rsquo;t Believe Who Wins.\nAt first I had problems with the keybindings\u0026hellip; promptly solved with this nice settings window in the Special menu\u0026hellip; Be sure to read it carefully. I was always understanding it reversed.\n\nClick to enlarge\nOk, now I could edit things with emacs on the go. Why should I bother? But as stress pills up, my LaTeX-ing needs grow. Maybe I need to rewrite something? I have a bunch of paper stacks, waiting to be LaTeXed. And writing LaTeX\u0026hellip; is somewhat of a PITA\u0026hellip; unless you have a editor you enjoy using :) The customization level that can be achieved with emacs is unrivaled\u0026hellip; even in this tiny thing. Beware! The configuration of keybindings should follow this, but don\u0026rsquo;t use the kbd macro, it is not implemented.\nWhat are the strong points of editing with emacs on the go?\n1. Abbrev mode and dabbrev-expand: With these options, writing is extremely quick, at least on a current-time computer. abbrev-mode automatically expands your own abbreviations. As an example, when I write conn and press space (to keep on writing), emacs changes conn to connected, automatically. To learn how to add an abbreviation to the system, read this. dabbrev-expand, is bound to some key, in my main machines I have it bound to S-Tab, below you can see a screenshot of how to configure it to Esc-Tab. You only have to write a part of a word. For example, in this post, I could write opt, press S-Tab\u0026hellip; and it would get expanded into options\u0026hellip; and if I pressed further, it would cycle through all possible completions. Nice, isn\u0026rsquo;t it?\n\nClick to enlarge\n2. Paragraph filling: M-q refills the paragraph. I use this such frequently, that I have to stop from doing this in non-emacs windows. A must, for text writing.\n3. Keyboard macros: Curly braces, parentheses, \\[\\]\u0026hellip; all these are painful to add to a writing, in such a small keyboard. The solution? Adding keyboard macros to keyboard shortcuts. You start recording a macro with C-x ( and stops with C-x ). As an example macro I use, start recording write {} and move the cursor inside the curly braces with the keyboard arrow. Stop recording with C-x ), you are done. Now M-x name-last-kbd-macro (remember, tab completes command names), name it as Curly. Now open your .emacs, go to the keybindings section, and M-x insert-kbd-macro will write the code needed for the function to be useful! Now you just need to add a global key-binding to it. I mapped it to C-m (which previously added a newline\u0026hellip; I don\u0026rsquo;t think I\u0026rsquo;ll use it). Below you can see an image of the .emacs file editing for this. To know what a command does, press C-h k followed by the key combination. With this you can decide if it was a really useful command or you can dump it for the one you really need. As before, you can find more information on keyboard macros in the emacsWiki.\n\nClick to enlarge\nWell, it has also problems\u0026hellip; mostly iPod, not emacs related. But I won\u0026rsquo;t list them here, you can already think them out.\nOk, now we have a problem to be solved. How to keep files in sync in\u0026amp;out of vMac\u0026rsquo;s filesystem? Luckily, Linux can mount the hfs filesystem used by dsk image files, your iPod has wifi and ssh and I learnt enough bash to write a couple of scripts. I could squeeze it into just one, but these two work and now I don\u0026rsquo;t bother. If anyone wants to merge them, let me know after you are done. Both scripts expect your iPod/iPhone IP from the command line. Usually something like 192.168.1.???. I.e. you should run it as ./FromIpod.sh 192.168.1.34. To use it, you need root credentials to mount loop filesystems (at least I had to), and the mobile account password.If you dont have a suitable dsk file to start working, the best is use the FromIpod.sh script first, after creating a dsk image file from inside vMac. You can do so sliding two fingers from right to left to get the \u0026ldquo;Disks\u0026rdquo; menu, and taping add. After it is added, mount it, open and your Mac Plus will complain it is not formatted, format it. Unmount it and run the script.\n #!/bin/sh# Copyright 2009 Ruben Berenguel \\# (GPL omitted here) # \\# FromIpod: Will copy FILENAME from \\# your iPod's MacOsClassic directory \\# into DSKDESTINATIONDIRECTORY, mount \\# it and copy all files into \\# DATADESTINATIONDIRECTORY, setting all \\# possible permissions (I had problems \\# with permissions before). You can \\# download the latest version (and read \\# the GPL license) version from \\# [http://rberenguel.googlecode.com/svn/trunk/Bash/FromIpod.sh](http://rberenguel.googlecode.com/svn/trunk/Bash/FromIpod.sh)  FILENAME=TeXFiles.dsk\nDSKDESTINATIONDIRECTORY=~/Documents/\nMOUNTPOINT=/mnt/hfs-disk/\nDATADESTINATIONDIRECTORY=~/Documents/iPod-Data\nscp mobile@$1:/var/mobile/Library/MacOSClassic/$FILENAME $DSKDESTINATIONDIRECTORY\nsudo mount -oloop -t hfs $DSKDESTINATIONDIRECTORY$FILENAME $MOUNTPOINT\nsudo cp $MOUNTPOINT*.* $DATADESTINATIONDIRECTORY\nsudo chmod u+rxw $DATADESTINATIONDIRECTORY/*.* -v\nsudo umount $MOUNTPOINT\n The second script, as the first, needs you to be root and expects to be run with an IP.\n #!/bin/sh# Copyright 2009 Ruben Berenguel\n# (GPL omitted here)\n# ToIpod: will mount DSKSOURCE/FILENAME in\n# MOUNTPOINT, and copy all files in\n# DATASOURCEDIRECTORY to the mounted\n# filesystem. It will set all permissions.\n# Then will unmount and use scp to copy\n# FILENAME to your iPod/iPhone. You can\n# download the latest version (and read\n# the GPL license) from\n# http://rberenguel.googlecode.com/svn/trunk/Bash/ToIpod.sh\nFILENAME=TeXFiles.dsk\nDSKSOURCE=~/Documents/\nMOUNTPOINT=/mnt/hfs-disk/\nDATASOURCEDIRECTORY=~/Documents/iPod-Data\nsudo mount -oloop -t hfs $DSKSOURCE$FILENAME $MOUNTPOINT\nsudo cp $DATASOURCEDIRECTORY/*.* $MOUNTPOINT\nsudo chmod a+rxw $MOUNTPOINT*.*\nsudo umount $MOUNTPOINT\nscp $DSKSOURCE$FILENAME mobile@$1:/var/mobile/Library/MacOSClassic/$FILENAME\n Keep in mind that the DATADESTINATION/SOURCE directory should not be your real working directory, but a kind of swap directory, where you know you can mess things up!\nIf you found this useful, consider sharing it on Reddit, Twitter, Digg, Stumble or whatever you enjoy using. Thanks!\nYou may also be interested inParseList(ScrambleList(Relateds(Linux,iPod,Mac,emacs)))\n","permalink":"https://mostlymaths.net/2010/01/syncing-ipods-vmac-and-linux-emacs-on.html/","tags":["Programming","emacs","Linux","iPod"],"title":"Syncing iPod's vMac and Linux: emacs on iPod Touch"},{"categories":null,"contents":"\nAlthough this looks like a all-free / no taste cake, it is wonderful. And of course, at it is gluten, dairy and egg free, almost everyone can eat it. What you will need:\n 1 measure soy yogurt 1 measure dark brown sugar (we used Tate\u0026amp;Lyle Dark Brown Sugar) 1 measure gluten-free flour 1\u0026frasl;4 measure oil 1 teaspoon baking powder  Here measure depends on how much iogurt do you have. You can use the iogurt cuprs to make all measurements. Mix well all ingredients, pour into a baking pan and put in the oven, 200¬∫C for 1 hour. Check very often\u0026hellip; it is hard to tell when it is finished. It should be hard on the outside and soft on the inside, without leaving any trace on a toothpick. Enjoy!\nRelated posts:ParseList(ScrambleList(Relateds(Cooking, Plants)))\n","permalink":"https://mostlymaths.net/2009/12/gluten-free-dark-brown-cane-sugar.html/","tags":["Cooking","How-to"],"title":"Gluten,dairy,egg-free dark brown cane sugar biscuit"},{"categories":null,"contents":"\nIf you liked it, leave a comment, digg, stumble\nor whatever you feel like doing\nStochastic hill-climbing algorithm to approximate a picture by triangles (algorithm and source code). This image contains 48 images out of 1000, from iterating for 11000 generations the evolution code. The source image is the last square in the tile set.\nBon Nadal!\nFeliz Navidad!\nMerry Christmas!\nJoyeux N√∂el!\nBuon Natale!\nFrohe Weihnachten!\nMutlu Noeller!\nYou may be also interested in:ParseList(ScrambleList(Relateds(Linux,Programming)))\n","permalink":"https://mostlymaths.net/2009/12/evolutionary-approximation-of-christmas.html/","tags":["Blog","Programming","Linux","Christmas","Maths","Drawing"],"title":"Evolutionary approximation of a Christmas postcard"},{"categories":null,"contents":"\nThis is a follow up of my previous post on Retro on iPod Touch. Previously I reviewed Mini vMac Apple Mac Plus emulator. This time also comes an emulator (sort of). ScummVM is self-described as a collection of game engine recreations, and is available for several platforms (Mac, Windows and Linux at least\u0026hellip; also several handhelds and game consoles). For me, its main use is to replay old LucasArts graphical adventures. Follow Indiana Jones into the depths of Atlantis, re-enact the adventures of Guybrush Threepwood or follow the old adventures of Sam and Max, while on the train, waiting in a line, or everywhere, inside your iPod Touch or iPhone.\n\nThe first you need, is a jailbroken iPhone or iPod Touch with ScummVM installed, and ssh file access (or something enabling you to transfer files to your iPod\u0026rsquo;s filesystem). You will need of course the original disks of the adventures you want to play (you can also find some free adventures out there). You will need (or at least, as I did it, I needed it) a MS-DOS/Windows emulator (if not on a Windows machine) to install the original game and then extract the needed game files. You can check here the required files for every game supported by ScummVM. After it, follow the instructions on the main ScummVM for iPhone page.\n\nFrrieeeendsss\u0026hellip;\n\n\n\nSam and Max Hit The Road: I can\u0026rsquo;t describe the fun coming from this game\u0026hellip; and now I can replay it wherever I want to.\n\n\n\nThe Dig is probably the best graphical adventure I have ever played. A deep plot, not quite easy puzzles and beautiful landscapes mix for a gem of a game.\n\nA friend of mine is a big fan of Broken Sword: The legend of the templars, so I recently got my hand on the game. I played just a few minutes\u0026hellip; it is not a great game for the iPhone, as the text font size is pretty small (but readable). Anyway, it looks really nice and smooth\u0026hellip; Will give a try.\nAlso, when I have time I\u0026rsquo;ll go find my old 3.5\u0026rsquo; disks with Indiana Jones and the Fate of Atlantis\u0026hellip; Remember, \u0026ldquo;X\u0026rdquo; never, ever marks the spot.\nYou may also like\nParseList(ScrambleList(Relateds(Games,iPod,Mac)))\n","permalink":"https://mostlymaths.net/2009/12/retro-on-ipod-touch-2-scummvm.html/","tags":["iPod","Games"],"title":"Retro on iPod Touch (2): ScummVM"},{"categories":null,"contents":"\nWith GIMP\u0026rsquo;s \u0026ldquo;Map to sphere\u0026rdquo;\nA few years ago, while I was still mainly a Windows user, I read \u0026lsquo;Pragmatic programmer: From journeyman to master\u0026rsquo;, and learnt about Version Control Systems. You know, SVN, CVS, Git, Darcs. As I was just a single user working locally (just wanted the incremental and logged backups), I installed RCS. Almost the oldest, and in some sense the most simple. It can work locally, just with a file of delta (text added from one revision to the next) which is a plain text, human readable file. If something messes up, it can be solved easily.\nI was happily revising my source, as emacs has a nice transparent way of dealing with revisions.. until I had username conflict problems. Still don\u0026rsquo;t know exactly why, I blamed Windows and gave up. Then I became a fully UNIX user (MacOS and Linux) sadly forgot about versioning. But recently I started using an SVN repository in Google Project Hosting, and it was working so well I re-installed RCS. Still a week and it works like a charm.\nI already have an incremental backup script, which I usually run at the end of a long work time, now in addition I have named revisions for one of my main .tex files.\nUsing RCS with emacs (or using CVS, SVN or even darcs) is quite transparent. Setting aside the keyboard shortcuts, there is a submenu in the \u0026lsquo;Tools\u0026rsquo; menu with the revisioning options. Emacs automagically detects from the directory structure if the revisions should be RCS, CVS or SVN and deals with it with almost no interaction. C-x v v either checks in or out the latest revision from the delta file, and C-x v c reverts the last check-in. As you can see, all shortcuts of the version control system start by C-x v. To add a file to the repository system, I always use the console, as emacs doesn\u0026rsquo;t know by default which version control system to use. To add version control to filename, go to the working directory and ci -u filename.\nAs I am working on what I want to be freely available source, I also use SVN in emacs, keeping in sync the source files from my Linux netbook with my Macbook via Google Project Hosting. Soon you\u0026rsquo;ll know more about what these projects are, with links for download, of course!\nNow there is no excuse for keeping up with back-ups\u0026hellip; And no excuse for saying \u0026ldquo;Oh dear, I need that piece of code I deleted last week!\u0026rdquo;.\nYou may be also interested inParseList(ScrambleList(Relateds(emacs,Linux,Programming)))\n","permalink":"https://mostlymaths.net/2009/12/rcs-svn-version-control.html/","tags":["Programming","emacs","Linux","How-to"],"title":"RCS \u0026 SVN: Version control"},{"categories":null,"contents":"\nAfter buying my iPod Touch and playing a little with it, I realised that battery life was a problem, with the WiFi always on. Thus, I was always bringing up Settins-WiFi and turning on and off. There was no easy and quick way to do it\u0026hellip; Until I jailbroke it. I installed SBSettings, and its first use was that. Swipe the upper status bar, and the menu shown above appears. One tap and I can kill the WiFi, turn on or off ssh acces, keep the WiFi up when the Touch is sleeping, and more.\n\nThere are several available switches, and a few more (like the rotation inhibitor can be downloaded from Cydia.\n\nYou can also set up direct access for some applications, with the \u0026lsquo;Dock\u0026rsquo; menu.\n\nAnd in \u0026lsquo;Extras \u0026amp; Options\u0026rsquo;, youcan set numeric battery level and available memory (to know when it is safe to turn on \u0026ldquo;Backgrounding\u0026rdquo;.\nAll in all, a very nice utility for Touch and iPhone users.\nRelated posts:ParseList(ScrambleList(Relateds(iPod)))\n","permalink":"https://mostlymaths.net/2009/12/sbsettings-for-jailbroken-iphoneipod.html/","tags":["iPod","How-to"],"title":"SBSettings for jailbroken iPhone/iPod Touch"},{"categories":null,"contents":"\nLena S√∂derberg\nI am working in my free time in an image processing related program, and this made me remember when I was taking a course in Signal Processing. One of the standard test images was the one above. Where does this historical image processing snippet come from?\nTurns out (wikipedia link) it is a standard folklore image, dating back to the seventies, when a bunch of electrical engineers needed an image satisfying certain signal problems (it is, indeed, an image with a lot of significative details, when compressing, denoising or whatever: the hat, the uniform colour distribution except for a few patches of different color\u0026hellip;). They found that month\u0026rsquo;s Playboy magazine there in the shelves, and scanned the picture. And it remains as one of the usual test images, nowadays. A classical image.\nIf you are interested, the project I was working on was Approximating images with randomly placed translucent triangles. I ended up using this program to get my Christmas postcard for 2009: Evolutionary approximation of a Christmas postcard.\nYou may also likeParseList(ScrambleList(Relateds(Programming)))\n","permalink":"https://mostlymaths.net/2009/12/image-processing-history-lena.html/","tags":["Programming","Thoughts","Bizarre"],"title":"Image processing history: Lena"},{"categories":null,"contents":" \nMaybe the best coffee time cookies?\nPicture courtesy of Shanidar\nSnickerdoodles are probably the best coffee time cookies I have eaten, and also one of the simplest cookie recipes to do. What you\u0026rsquo;ll need:\n 125 gr butter 110 gr sugar (+ 1 big spoon later) 1 egg, lightly beaten 1 teaspoon vanilla extract (or change some sugar for vanillated sugar) 250 gr flour 1\u0026frasl;2 teaspoon nutmeg 3\u0026frasl;4 teaspoon baking powder 1 teaspoon cinnamon\n a pinch of salt\n  Preheat the oven at 180¬∫. In a bowl, mix the flour (previously sifted), salt, baking powder and nutmeg. Mix and set aside.\nSoften the butter in a microwave (or double-boil it) and mix it with the sugar, until it turns white and smooth.\nAdd the egg (in 2 or 3 batches), mix and add the vanilla extract (if not added to the butter).\nAdd (very slowly) the flour, while mixing. When the mix is firm and detaches from the bowl walls, it is ready.\nIn a small plate, mix the remaining sugar with the teaspoon cinnamon. Make small balls of dough (ping-pong ball sized) and batter them with the sugar mix.\nPut all balls in a cookie pan, spread around 3cm each. Smash them (slightly!) with the bottom of a glass.\nBake for 15 minutes, or until the sides look done. Turn the pan around, to bake uniformly the cookies.\nLet them cool a little before putting them in a cooling tray.\nThey may last something like 3 days in an air-tight container, but I bet they will be finished by the end of the first day, beginning of the second at most. Keep in mind that they are better the same day they are cooked and that the batter can be kept frozen in the refrigerator\nYou can find the recipe in Catalan in Shanidar\u0026rsquo;s site.\nRelated posts:ParseList(ScrambleList(Relateds(Cooking, Plants),8))\n","permalink":"https://mostlymaths.net/2009/12/snickerdoodles.html/","tags":["Cooking","Coffee"],"title":"Snickerdoodles"},{"categories":null,"contents":" A LISP random triangle generator. Also wrote a C version.\n  ","permalink":"https://mostlymaths.net/2009/12/abstract-triangles-in-lisp.html/","tags":["Programming","C","LISP"],"title":"Abstract triangles in LISP"},{"categories":null,"contents":"As I said in a previous post, I am looking for some way to detect copied code. I have now a working prototype of a \u0026ldquo;code juicer\u0026rdquo;. From a C file it creates a set of PostScript files (well, almost, as they need postprocessing) which are later processed and selected to print. As an example, here is the output applied to a Runge-Kutta-Fehlberg 4-5.\n\nIt is something like an execution tree, with function calls squared, and different slopes for if, for, while clauses. It is still somewhat buggy and fails to recognize a few closings. I intend to \u0026ldquo;juice\u0026rdquo; all the assignments, and extract the interesting functions (around 5, with about 50 lines of code each, 35 assignments, probably). Then I can print all these pages and just look at them to see matches. Yesterday I already did for 3 examples\u0026hellip; they didn\u0026rsquo;t cheat, they are clearly different.My idea is that the structure of calls is more significant than looking at some diff. A student can change variable names, add or change comments, and then diff is dead. But this structure tree is more like a fingerprint: it maps the structure of the algorithm. It can change from student to student (indeed does), but detects minor changes that diff misses. Let\u0026rsquo;s see if I find cheaters!The code is a flex .lex file, looking something like:\n \u0026ldquo;void\u0026rdquo; {def=0;}\u0026ldquo;char*\u0026rdquo; {def=key?1:0;}\u0026ldquo;;\u0026rdquo; {def=0; fprintf(auxiliar, \u0026ldquo;%% Flags: inc %d def %d par %d for %d RecKey %d\\n\u0026rdquo;,include, def, par, InsideFor, RecentKey); if(!par\u0026amp;\u0026amp;(InsideFor||InsideIf)\u0026amp;\u0026amp;!RecentKey){GetOut(Last);}RecentKey=0;}\u0026ldquo;(\u0026rdquo; {par++;}\u0026ldquo;)\u0026rdquo; {par\u0026ndash;;}\u0026rdquo;\u0026lt;\u0026rdquo; {}\u0026ldquo;\u0026gt;\u0026rdquo; {include=0;}\n A set of rules and the code to process it. It has a few auxiliar functions to process calls, (and a stack push-pop for tracking calls) and is getting harder and harder to read. as I find more bugs. I almost wrote an entire parser in the .lex source\u0026hellip; That happens when you are not sure how to use Bison, or even what it does. But it is working, so I should not complain.In fact, this kind of analysis is probably done, and I can find some similar things in the Wikipedia entries for Syntax Trees. But it has been a really fun coding, and when finished\u0026hellip; well, it has already been fun, and almost finished ;) Anyway, the structure I have done suits best several functions per page in landscape mode\u0026hellip; and that is exactly what I need, so why bother? Let\u0026rsquo;s reinvent the wheel a few more times.\nYou may be also interested in:ParseList(ScrambleList(Relateds(Linux,Programming)))\n","permalink":"https://mostlymaths.net/2009/12/c-code-juicer.html/","tags":["Programming","CJuicer","Teaching","Maths"],"title":"C code \"Juicer\""},{"categories":null,"contents":" The free iPod stand  \nRight: middle line, left top line\nIn this post I will explain how to recycle an old credit card to build a stand for your iPod touch / iPhone. You can choose from 3 designs, depending on your preferred inclination.\nHere is what you will need:\n A printed version of the shape. Scroll down for the jpg\u0026rsquo;d version A card Scissors Something to write A small file  \nCut the model, and use your writing instrument to draw it on the card\n\nWhen you have it drawn, somehow, cut.\n\nGo for the file, and smoothen the edges\n \nHere you can see the slanted version\n\nHere you can see again the final version\n \nRight: middle line, left top line\nBelow you have the print version of the shape.\n\nClick to enlarge, then print\nYou may also be interested in:\nParseList(ScrambleList(Relateds(Mac,iPod)))\n","permalink":"https://mostlymaths.net/2009/11/ihold.html/","tags":["iPod","DIY","How-to"],"title":"iHold"},{"categories":null,"contents":"Last Friday, 20, all SongsInCode\u0026rsquo;rs were asked to try to get #songsincode trending again to commemorate the 3 months anniversary of the idea. I submitted 3 songs (far less than my first outburst)\u0026hellip; and almost no-one else tried to overwhelm twitter with his songs (a few did, and with great ideas ;)\n KISS - know=\u0026ldquo;you cry\u0026rdquo;;know++=\u0026ldquo;Walk street beside her\u0026rdquo;; PassBy(); everybody: puts(\u0026ldquo;Looks good\u0026rdquo;); you: puts(\u0026ldquo;Strutter\u0026rdquo;); goto everybody;\nDuran Duran - if(!cry(\u0026amp;Yesterday)){find(OrdinaryWorld);}\n3 Doors Down - See(Face);days=0;do{days++;}while(days\u0026lt;100)older(me);dream: Dream(); you=1; here: you=0; goto dream;\n Here you can find my previous post with my own songsincode, and also check the great ideas in #songsincode.\nYou may also like ParseList(ScrambleList(Relateds(Programming, Linux, Games)))\n","permalink":"https://mostlymaths.net/2009/11/more-songsincode.html/","tags":["Programming","Music","Bizarre"],"title":"More #SongsInCode"},{"categories":null,"contents":"\nA few days ago I jailbroke my iPod touch. Just for the geek factor, first, as I thought I could get a C compiler on it. I can\u0026rsquo;t yet, so I just have it jailbreaken for a few applications. I\u0026rsquo;ll start my review for a long time loved application in Linux and Mac: Mini vMac.Mini vMac is a hardware emulator, which emulates a whole Mac Plus from the eighties. You just need a real Mac ROM, from a Mac you or someone you know owns.There is a port for the iPhone/iPod Touch, and you can find the installation instructions and videos and whatever at the port developer page.I can say it works like a charm, is reasonably quick and allows for a lot of bizarreness.\n\nHere we have System 7.5.3 booting up. It takes around 30 seconds to boot.\n\nOf course\u0026hellip; emacs. What else? I still have problems with the keybindings though.\n \nThe interface is wonderful: Swipe with two fingers from left to right, and the settings menu appears smoothly. Do it right to left, and the \u0026ldquo;Insert disk\u0026rdquo; appears. The mouse can work as a trackpad or as a \u0026ldquo;point-and-click\u0026rdquo;. I personally prefer the trackpad mode.\n\nTo get this nice Mac Plus keyboard, swipe with two fingers from bottom to up, up to bottom to make it disappear. Nice! You can set transparency and local layouts in the Settings menu (2 fingers Swipe L-to-R).\n\nIf you tap the home button while there are insterted disks (the emulator is running), it suspends and keeps in memory, while the direct access in the SpringBoard shows the window contents:\n\nI recommend this application for all those Mac geeks out there.\n\nYou may also like:\nParseList(ScrambleList(Relateds(Mac,Linux,Programming,iPod)))\n","permalink":"https://mostlymaths.net/2009/11/retro-on-ipod-touch-1-mini-vmac.html/","tags":["emacs","iPod","Mac"],"title":"Retro on iPod Touch (1): Mini vMac"},{"categories":null,"contents":"\nFrom The Design of the Emacs Logo\nI guess you may already know I love the emacs text editor, and use it as often as I can to do almost everything I can with it. I even use it in my iPod touch, through minivMac. But there is a small niche where it was a pain: quick editing a file from the command line. Those times when you just want to open one file, change a line, save and close.\nI have lots and lots of extensions for C programming and LaTeX editing\u0026hellip; to change a line I don\u0026rsquo;t need all the fuss, and it is a 2 second edit, for a 10 second emacs load. It doesn\u0026rsquo;t pay off. For a while I was using the editor from hell, but I know just a few keystrokes, and don\u0026rsquo;t want to learn any more, I am proficient enough with emacs and need no more commands. So I set myself to find other editors.\nAlso, editing from my iPod touch with TouchTerm Pro is not easy\u0026hellip; I have already an emacs-like side-keyboard I can use\u0026hellip; with emacs keybindings, of course. I\u0026rsquo;ll post it here someday to those everywhere system admins/code runners.\nFirst and simplest choice: nano. It has Control\u0026amp;Meta commands and syntax highlighting\u0026hellip; and these are the only good point I found, besides being a Unix standard. Dismissed quickly, but more useful than that to a quick edit. Maybe I\u0026rsquo;ll try to install it from source in my Linux box (I am not root\u0026hellip; installing is a PITA).\nThen, mg (formerly known as microGNUemacs). Small, quick and as emacs-like as you can get without LISP as an extension language\u0026hellip;.\nDismissed, as Zile (Zile Is Lossy Emacs) is part of the GNU project, more availability. It can be easily installed from source as a local user in Linux, and through MacPorts in a Mac. No syntax highlighting, though. I would love to have it\u0026hellip; :_(\nYou may also like:\nParseList(ScrambleList(Relateds(Mac,Linux,Programming)))\n","permalink":"https://mostlymaths.net/2009/11/mg-zile-quick-emacs-in-command-line.html/","tags":["Programming","emacs","Linux","iPod","Mac"],"title":"mg \u0026 Zile: quick emacs in the command line"},{"categories":null,"contents":"\n 2 or 3 fillets of marinated herring with onion (typical scandinavian) 3 marinated cucumber, polish (sweet) style 1 Golden (yellow and somewhat sweet, not acid) apple 3 boiled potatos, diced 1 1\u0026frasl;2 cups mayonnaise Optional: a little mustard  Slice finely the cucumber, cut the apple in dices and the fillets in small pieces. Mix the mustard, mayonnaise, a little vinegar from the herring and then add the fish, mix well. Add the potatoes and apple dices, and revolve a few times.\nIf in Spain, you can find the marinated herring and cucumber in El Corte Ing√©s.\nRelated posts:ParseList(ScrambleList(Relateds(Cooking, Plants)),15)\n","permalink":"https://mostlymaths.net/2009/11/matjessalat-recipe.html/","tags":["Cooking"],"title":"Matjessalat recipe / Matjes Salad / Marinated Herring Salad"},{"categories":null,"contents":"\nPieces of an ENIGMA machine, from Flickr\nAssume you have a set of alumni, which are due an individual programming assignment. All have the same assignment (as it is hard to come up with several), and it is hard enough that copying from each other passes for everyone\u0026rsquo;s mind. As a teacher, how do you detect this?\nFrom my point of view, there are fundamentally two different kinds of copy:\n Information sharing: One teaches another as how to do it. Fine with me, everyone learns Code sharing: One gives another a piece of code. Bad.  The code sharing scenario can have or not a postprocessing: the code is modified to fit the others code, and variables names are changed to look more inocuos. Usually, there are cases of full code copy.\nHow to detect this? I am still writing code to test it with our last assignment, but my idea is that this is like (like, as looks like, not as equal to) a cryptogram, with a simple enough substitution cipher. Not exactly, but probably quite similar. And singular value decomposition could help detect these kind of ciphers.\nI am writing a set of awk scripts that rip off C comments, printf, scanf, fopen and such, just to leave the skeleton of the real algorithm, and another script that separates each C file into individual functions. Why? Because a whole program is unlikely to be copied, but individual functions are most probably shared. I\u0026rsquo;ll start with a word frequency analysis of individual functions. If this works\u0026hellip; ok, if it doesn\u0026rsquo;t, maybe I\u0026rsquo;ll try higher rank approximations. Word frequency (rank 1 approximation, roughly) can be done straight in awk, and then compared.\nI\u0026rsquo;ll keep writing about this as it goes on.\nYou may also be interested inParseList(ScrambleList(Relateds(Linux,Programming)),10)\n","permalink":"https://mostlymaths.net/2009/11/copied-programming-assignments-as.html/","tags":["Programming","Thoughts","Teaching","Maths"],"title":"Copied programming assignments as cryptograms"},{"categories":null,"contents":"\nDoes not like like that, but tastes great!\n 2 ripe avocados 1\u0026frasl;2 cup coconut milk 2 tablespoons vanilla (or vanillated sugar) 3\u0026frasl;4 cup agave syrup (or sugar syrup)\n 1\u0026frasl;2 cup lime juice\n 1\u0026frasl;8 tablespoon salt\n 3\u0026frasl;4 cup coconut butter (or coconut oil)\n pie crust (below a recipe for it)\n  Mix all the ingredients (except the pie crust) in a blender.\n 180 gr plain cookies 200 gr butter  Melt the butter and crush finely the cookies. Mix and place in the bottom of a cake pan, also on the sides of it. Pour the blended mix and place in the refrigerator for at least 6 hours.\nParseList(ScrambleList(Relateds(Cooking)),15)\n","permalink":"https://mostlymaths.net/2009/11/lime-pie-recipe.html/","tags":["Cooking"],"title":"Lime pie recipe"},{"categories":null,"contents":"As you may remember, I spent quite some time this August with Lavaurs algorithm for the topological identification of the circle corresponding to the Mandelbrot set. After that, I spent quite some more trying to do pictures of external rays to show side by side. I was not able‚Ä¶ and then found Mandel.\n Thanks to Mandel, LISP and my Lavaurs code\n  Really nice program, with lots and lots of options (and I met the programmer, which happens to be also mathematician, we met at a conference). I asked if there was some whay to draw all rays in one step, as it stands I needed to press \u0026ldquo;e\u0026rdquo;, enter the rational number corresponding to the ray, and enter. \u0026ldquo;No, you should change the source‚Ä¶ probably the best way was to do it by hand if there are not too many rays\u0026rdquo;.\nI though No way! I don\u0026rsquo;t want to do it by hand, neither mess with someone else\u0026rsquo;s code‚Ä¶ I am teaching a class of computer things, and I must look at too much C code.\nI wrote a LISP program that, given a level uses my Lavaurs code to generate a shell script in Mac OS (full of command line AppleScript) such that the needed keystrokes are sent to the Mandel application.\nThe code is as follows\n(defun GenerateScript (Num) (progn (format t \u0026#34;open -a mandel.app;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;delay 0.1\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to keystroke \\\\\u0026#34;5\\\\\u0026#34;\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;delay 0.1\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to key code 99\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to keystroke \\\\\u0026#34;600\\\\\u0026#34;\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to keystroke return\u0026#39;;~%\u0026#34;) (format t \u0026#34;osascript -e \u0026#39;delay 0.9\u0026#39;;~%\u0026#34;) (dotimes (n Num) (dolist (X (PeriodK n)) (progn (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to keystroke \\\\\u0026#34;e ~A\\\\\u0026#34;\u0026#39;;~%\u0026#34; X) (format t \u0026#34;osascript -e \u0026#39;tell application \\\\\u0026#34;System Events\\\\\u0026#34; to keystroke return\u0026#39;;~%\u0026#34;) ))))) This opens Mandel, changes resolution and drawing algorithm and sends all rays. And you can see the results in the beginning of the post.\n","permalink":"https://mostlymaths.net/2009/11/external-rays-lavaurs-algorithm.html/","tags":["Mac","Fractals","Maths","LISP"],"title":"External rays \u0026 Lavaurs algorithm"},{"categories":null,"contents":"As you may already know, I presented a poster at a conference recently, and did the set up with Scribus, the texts with LaTeX with the Beamer and Beamerposter packages.\n Setting up\n  Note from 2019: I can\u0026rsquo;t find the final version of that poster, only a modified version from a few months later for another conference.\nThe first piece of advise, is to set page guides where needed (in the Page menu, you can put them at a certain numerical place, and then move them along) and then Snap to guides in the same menu. This way, you can move everything into the correct place and align perfectly. The second advice, is to work with low resolution and image visible settings for embedded images. In my poster, everything except the main title were embedded images (PS for the LaTeX output, PNG for the images), thus the draw time was really long. I also sett the DPI of all non-PS images at at least 400. I wanted a nice print.\nThe code for the slide-like blocks is the following:\n\\\\documentclass\\[slidestop,compress\\]{beamer} \\\\usepackage\\[orientation=portrait,size=custom, width=25, height=8, debug\\]{beamerposter} \\\\usepackage{beamerthemeshadow} \\\\usepackage{beamerouterthemedefault} \\\\usepackage{amsmath,amssymb,amsthm} \\\\usenavigationsymbolstemplate{} \\\\usepackage\\[latin1\\]{inputenc} \\\\usepackage\\[catalan\\]{babel} \\\\usetheme{Copenhagen}\\\\usetheme{Copenhagen} \\\\begin{document} \\\\begin{frame}\\[plain\\] \\\\begin{block}{Block title} Content of block \\\\end{block} \\\\end{frame} \\\\end{document} This setup generates just a \u0026ldquo;block piece\u0026rdquo;, which could also be a Theorem piece (if you have already Beamer-ized something you know what I mean). You need to generate as many .tex files as \u0026ldquo;pieces\u0026rdquo; in your poster, and then generate Postscript files for them. In the current version of Scribus, it is better to use Postscript files and the Postscrit filter to PDF export than embedding PDF\u0026rsquo;s. At least in my tries‚Ä¶, I guess they will solve it soon.\n","permalink":"https://mostlymaths.net/2009/11/scribus-for-mathematical-posters.html/","tags":["Fractals","Maths"],"title":"Scribus for mathematical posters"},{"categories":null,"contents":"\nWith Sketchbook Mobile\nThe concepts of \u0026ldquo;future\u0026rdquo;, \u0026ldquo;job stability\u0026rdquo; or even \u0026ldquo;location\u0026rdquo; are quite fuzzy when in Mathematics. I think I don\u0026rsquo;t know any PhD student who knows what he will be doing in 3 years, what he will be working on (not what he will be researching, but working\u0026hellip;) or even where he will be.\n 1-2 years of Master+Master thesis 2-6 years of PhD thesis (3-4 years PhD grant+maybe some associated professor, 1-4 years)\n 1-2 years of postdoc, maybe abroad\n Who knows? And where?\n  This is a rough schedule. I\u0026rsquo;m in step 2: 2 years left in my 4 year PhD grant. Probably with 2 years left for my thesis to finish. The uncertainty about the future feels like Damocles\u0026rsquo; sword dangling over one\u0026rsquo;s head. You may not think at all on it, but it is always there. And the days your theorems look impossible to prove, you can feel overwhelmed.\nYou may also be interested in:\nParseList(ScrambleList(Relateds(Programming,Maths, Drawing)),15)\n","permalink":"https://mostlymaths.net/2009/11/future-in-mathematics.html/","tags":["Thoughts","Maths","Drawing"],"title":"Future in Mathematics"},{"categories":null,"contents":"\nK√∏benhavn, Denmark\nRelated posts:\nParseList(ScrambleList(Relateds(Maths)),5)\n","permalink":"https://mostlymaths.net/2009/10/den-lille-havfrue.html/","tags":["Places","Trips","Maths"],"title":"Den lille havfrue"},{"categories":null,"contents":" \nLast weekend I attended a conference in Denmark, and a colleague I met there showed me the logo of his University. It is supposed to be a coral\u0026hellip; but he said in every party they turn it 270¬∫, so it is the \u0026ldquo;angry elk\u0026rdquo;.\nRelated postsParseList(ScrambleList(Relateds(Maths)),5)\n","permalink":"https://mostlymaths.net/2009/10/back-from-denmark.html/","tags":["Thoughts","Maths","Bizarre"],"title":"Back from Denmark"},{"categories":null,"contents":"Conference for 4 days in an old army place. Really nice, well kept and bought by the university. But away from everything, and everyone. And today my head hurts a lot\u0026hellip; Maybe I should go to sleep now (2332). Tomorrow I have a really tight schedule\u0026hellip; lot of work to do\u0026hellip; And I\u0026rsquo;m feeling tired.\n","permalink":"https://mostlymaths.net/2009/10/stranded-at-denmark.html/","tags":["Thoughts"],"title":"Stranded at Denmark..."},{"categories":null,"contents":"Mathematician, Linux user, already had an iPod (iPod nano), recently bought a netbook. Why did I buy an iPod touch?\nPapers for iPhone (7.99‚Ç¨): a organizer for research PDF\u0026rsquo;s with integrated PDF reader (allegedly optimized for research articles), with the ability to sync with the desktop app (29‚Ç¨, less with the 40% discount for students\u0026hellip; still waiting for it to buy it). Well, it lives up the expectations, although the desktop version is strange (used it only once, yet) and the syncing can be hard as the network settings may keep you from syncing. Anyway, a must.\n\nTouchTerm Pro (6.99‚Ç¨): A terminal application, developed for iPod/iPhone. It is great, although it has so many options, and gesture commands I am still learning. Steep learning curve, but I have used it to see if the programs I\u0026rsquo;m running are over, and merging images from the command line. A must, but depends if you do something on terminals.\n \nEmacs in the terminal :)\nSketchbook Mobile (2.39‚Ç¨): Drawing on the iPhone/iPod\u0026hellip; I haven\u0026rsquo;t tried the competition (Brushes, although I\u0026rsquo;m thinking of buying it, 3.99‚Ç¨.. well, just bought it), but it is a damn good application. The feeling is almost as good as pen and paper, and the range of tools is mindblowing. Here is an overview of the application, with a promotional video at the end: Autodesk puts the fun in your pocket: Introducing Sketchbook Mobile.\nIn addition to these, there are a loot of \u0026ldquo;goodies\u0026rdquo;\u0026hellip; iNethack is the first to come to mind, but if I open up the \u0026lsquo;pod I see Stanza, Evernote, DoBot Todo\u0026rsquo;s, Inkiness, Pianist (really good one), Facebook and Google apps as \u0026ldquo;must\u0026rdquo; applications.\nYou may also be interested in:ParseList(ScrambleList(Relateds(Games,iPod, Maths)),15)\n","permalink":"https://mostlymaths.net/2009/10/why-i-bought-ipod-touch.html/","tags":["iPod","Mac","Maths"],"title":"Why I bought an iPod touch"},{"categories":null,"contents":"A few days ago I found a page via StumbleUpon, and caught my inner geek. Songs in code, a trend in twitter a few days ago. Other examples here, and here (twitter). Below my own creations.\n (setq My \u0026lsquo;(sleeping)) - Roxette\ndo{love( );}while(TRUE); - The Beatles\nwhile(1){puts(\u0026ldquo;Young\u0026rdquo;);} - Alphaville\nlove( ); puts(\u0026ldquo;Now\u0026rdquo;); - Roxette\ndo{ }while(b*tchslaprappin\u0026amp;\u0026amp;cocainetongue); - Guns N\u0026rsquo; Roses\nif(!say){say=MAXINT;} - Ronan Keating\nint love=0; if(friday){love=1;} - The Cure\ndiff Something ADay - Jamie Cullum\nwhile(me.corner*me.spot_light){religion\u0026ndash;;} - REM\n I rushed to publish this post, as I had forgotten to hit publish\u0026hellip; thus forgot the REM one. Thanks John@retroprogramming!\nYou may also be interested in:ParseList(ScrambleList(Relateds(Programming)),15)\n","permalink":"https://mostlymaths.net/2009/10/songs-in-code.html/","tags":["Programming","Music","Bizarre"],"title":"Songs In Code"},{"categories":null,"contents":"A quick one: Graphical configuration for fluxbox: fluxconf. You can just apt-get it. I found out about it in tuxmachines.org, following this link. But after using it I realized I had lost 3 entries\u0026hellip; I am not sure if it was a bug, or what (they all had parentheses in them!). Use it at your own risk!\nOther fluxbox\u0026amp;Linux related posts:\n Whistle control your computer (Linux\u0026amp;Mac)\n My backup script in Mac/Linux\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/10/fluxconf-fluxbox-graphical-way.html/","tags":["Linux"],"title":"fluxconf: fluxbox the graphical way"},{"categories":null,"contents":"I have several (really, a lot) of programs to compute different images for my article, amusement, anything. And all of them require a change-and-try approach for zooming. The first I wrote needed to be finished quickly\u0026hellip; so I just hard-coded in the source the parameters. And this program turned to be the basis for all others\u0026hellip; And now each zoom requires some calculations and recompile.\nA time ago I decided to do something about it. I wanted something to interact with my programs, as\n they are already written, most of them use pvm to work using 2 (or more) cores, I want it cross-platform.  To the cross-platform part\u0026hellip; I thought about a purely programming thing: either Tcl/Tk, maybe Glade, or use some Tcl bindings for Lisp and an interactor in pure Lisp, to a kind of web app\u0026hellip; All seemed too cumbersome, or strange. And then it dawned on me: emacs.\nEmacs can open images, has a full blown lisp dialect, can interact with those images\u0026hellip; with the mouse\u0026hellip; Here is what the beta does.\n \nDrag and drop and zoom!\nLoad the image, and after a \u0026ldquo;drag and drop\u0026rdquo; on it, it is assumed you want to zoom that \u0026ldquo;square\u0026rdquo; (from edge to edge, turning it into a square). And reloads in the same buffer. Of course, the full-blown project is much much more exciting, with more options and what-not. But I have little time, and programming for work and programming for enjoyment is hard to combine.\nYou may also be interested inParseList(ScrambleList(Relateds(Programming,emacs)),15)\n","permalink":"https://mostlymaths.net/2009/10/project-emacs-fractal-zoomer.html/","tags":["Programming","emacs","Fractals"],"title":"Project: emacs fractal zoomer"},{"categories":null,"contents":"    \nJust 5 excerpts of it\nRelated posts:\nAnd \u0026ldquo;e\u0026rdquo; appears from nowhere!9 programming books I have read and somewhat liked\u0026hellip;\nC code juicer: detecting copied programming assignments\nCron, diff \u0026amp; wget: Watch changes in a webpage\n8 reasons for re-inventing the wheel as a programmer\nApproximating images with randomly placed translucent triangles\nParseList(ScrambleList(Relateds(Linux, Programming)),10)\n","permalink":"https://mostlymaths.net/2009/10/infinite-complexity.html/","tags":["Fractals","Maths"],"title":"Infinite complexity"},{"categories":null,"contents":"Emacs fun, in other words. This weekend I\u0026rsquo;m writing some programs in C, to review major problems before my students ask. Yesterday I finished the part due Wednesday (for them), and today I tackled the final part. But there is some bug somewhere\u0026hellip; I always miss on such matrix-here-matrix-there-solve-that.\nToday, after battling for an hour, I realized I missed the \u0026ldquo;intellisense\u0026rdquo; part of CEDET, and started to install it here in MacOs, and \u0026ldquo;there\u0026rdquo; in my netbook. The number of things you can do with it are\u0026hellip; well, mind-blowing. I just use it for a few things, and probably with time will start using it more often. Like it.\n\nGNU Debugger mode\nAfter too many printf\u0026rsquo;s out there to debug, I decided to give a try and opened a terminal, wrote gdb\u0026hellip; it works. I thought I had already tried in MacOs and didn\u0026rsquo;t work\u0026hellip; Well, then, give it a try together with emacs\u0026rsquo; gdb-mode (in fact it is the Grand Unifier Debug mode\u0026hellip; I use gdb). After having a quick peek to the user manual (WTF!? 493 pages!?) and discovering how to set up a breakpoint\u0026hellip; I\u0026rsquo;ve fallen in love. Just it\u0026hellip; I can write variables, follow variables, stop and go\u0026hellip; I can\u0026rsquo;t ask for more. And the way to interact is via emacs\u0026hellip; I just say process until \u0026ldquo;here\u0026rdquo; with my cursor in the source code, where \u0026ldquo;here\u0026rdquo; is located\u0026hellip; and here it goes (C-x C-a C-u). Whoa. Love it.\n\nECB\nAnd to add a little graphical goodness\u0026hellip; ECB, an addition to CEDET\u0026rsquo;s greatness. It makes emacs look like a \u0026ldquo;usual\u0026rdquo; IDE.\nYou may also likeParseList(ScrambleList(Relateds(emacs,Programming)),15)\n","permalink":"https://mostlymaths.net/2009/10/gdb-cedet-ecb.html/","tags":["Programming","emacs","Maths"],"title":"gdb \u0026 CEDET \u0026 ECB"},{"categories":null,"contents":"CicleImatges()\nSource code:\n// Copyright 2009 Rub√©n Berenguel\n// ruben /at/ maia /dot/ ub /dot/ es\n// This program is free software: you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as\n// published by the Free Software Foundation, either version 3 of\n// the License, or (at your option) any later version.\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public\n// License along with this program. If not, see\n// \u0026lt;http://www.gnu.org/licenses/\u0026gt;.\n// Variable initialization: NumImatges is the number of images to be\n// shown\nvar IndexActual\\=0\nvar ImatgeActual\\=0\nvar NumImatges\\=3\nvar IndexAnterior\\=0\n// Set of image files to be used.\nvar ImatgesAtzar\\=new Array()\nImatgesAtzar[0]=\u0026ldquo;http://lh3.ggpht.com/_f3d3llNlZKQ/RlISOebv9mI/AAAAAAAAADc/coFYsCFe4wU/s512/test1.jpg\u0026quot;\nImatgesAtzar[1]=\u0026ldquo;http://lh5.ggpht.com/_f3d3llNlZKQ/RlXwuObv9qI/AAAAAAAAAD8/PKALGDJPH50/s512/test4-sph-pl-mc-r-10min.jpg\u0026quot;\nImatgesAtzar[2]=\u0026ldquo;http://lh4.ggpht.com/_f3d3llNlZKQ/RltJlebv9rI/AAAAAAAAAEE/08_sLlO40f4/9%20%2810%20min%29.jpg\u0026quot;\nImatgesAtzar[3]=\u0026ldquo;http://lh6.ggpht.com/_f3d3llNlZKQ/RlWTgebv9pI/AAAAAAAAAD0/cDNJ1ZJn5og/s512/test-sph-mc-r.jpg\u0026quot;\nImatgesAtzar[3]=\u0026ldquo;http://lh6.ggpht.com/_f3d3llNlZKQ/R17DJl5dkjI/AAAAAAAAAM0/SRI3QHh4zfg/s720/SketchBegetLlapis.jpg\u0026quot;\nImatgesAtzar[4]=\u0026ldquo;http://lh4.ggpht.com/_f3d3llNlZKQ/Sap0KWEYdwI/AAAAAAAAAwg/c5zGUKxY2Yg/s512/BigRabbitScaled.jpg\u0026quot;\nImatgesAtzar[5]=\u0026ldquo;http://lh6.ggpht.com/_f3d3llNlZKQ/SobwVfFCmLI/AAAAAAAABSI/piL0IbmRNGg/s512/BWLavaurs13.jpg\u0026quot;\nImatgesAtzar[6]=\u0026ldquo;http://lh3.ggpht.com/_f3d3llNlZKQ/Smgc3HO6ydI/AAAAAAAABNM/e5n1j-9xuAY/s640/Butterfly.jpg\u0026quot;\nImatgesAtzar[7]=\u0026ldquo;http://lh3.ggpht.com/_f3d3llNlZKQ/Sjk0uHW5X9I/AAAAAAAAA-g/vKnK_Wl7_as/s512/spheres.jpg\u0026quot;\n// Set of identifiers for the html code\nvar IdImatges\\=new Array()\nIdImatges[0]=\u0026ldquo;idImatge0\u0026rdquo;;\nIdImatges[1]=\u0026ldquo;idImatge1\u0026rdquo;;\nIdImatges[2]=\u0026ldquo;idImatge2\u0026rdquo;;\n// IdImatges[3]=\u0026ldquo;idImatge3\u0026rdquo;;\n// IdImatges[4]=\u0026ldquo;idImatge4\u0026rdquo;;\n// IdImatges[5]=\u0026ldquo;idImatge5\u0026rdquo;;\n// Preloading all images in a new array\nPreCarrega=new Array()\nvar MatriuNumImatges\\= new Array()\nfor (n=0;n\u0026lt;ImatgesAtzar.length;n++)\n{\nPreCarrega[n]=new Image()\nPreCarrega[n].src=ImatgesAtzar[n]\n}\n// This resets the \u0026ldquo;renew\u0026rdquo; image counters\nfor(n=0;n\u0026lt;NumImatges;n++){MatriuNumImatges[n]=-3;}\n// And this prefills the image list, without repeating images\nfor(n=0;n=ImatgesAtzar.length)?Potser-1:Potser;\n}while(Discrimina(Potser,-3, MatriuNumImatges));\nMatriuNumImatges[n]=Potser;\n}\nfunction Discrimina(Actual, Anterior, Matriu)\n{\n// This function checks whether a new random image is suitable for\n// a next step: It is if it is not already in the matrix.\nif(Actual==Anterior){ return true;}\nfor(i=0;i\u0026lt;Matriu.length;i++){\nif(Actual==Matriu[i])\n{return true;}\n}\nreturn false;\n}\nfunction SetOpacitat(objId, opacitat)\n{\n// This function sets the opacity of the image element, hopefully\n// in several browsers\nobj=document.getElementById(objId)\nif(obj==null){return;}\nopacitat = (opacitat == 100)?99.999:opacitat;\nobj.style.filter = \u0026ldquo;alpha(opacity:\u0026ldquo;+opacitat+\u0026rdquo;)\u0026ldquo;;\nobj.style.KHTMLOpacity = opacitat/100;\nobj.style.MozOpacity = opacitat/100;\nobj.style.opacity = opacitat/100;\n}\nfunction fadeIn(obj,opacitat)\n{\n// Fade in an image. The speed can be modified later, but not as a\n// parameter. Change \u0026ldquo;7\u0026rdquo; to suit your tastes (it is the percentage\n// step)\nSetOpacitat(obj, opacitat);\nif (opacitat \u0026lt; 100) {\nopacitat += 2\nwindow.setTimeout(\u0026ldquo;fadeIn(\u0026lsquo;\u0026rdquo;+obj+\u0026ldquo;\u0026rsquo;,\u0026rdquo;+opacitat+\u0026ldquo;)\u0026rdquo;, 7);\n}\n}\nfunction fadeOut(obj,opacitat)\n{\n// Fade out an image. The speed can be modified later, but not as\n// a parameter. Change \u0026ldquo;7\u0026rdquo; to suit your tastes (it is the\n// percentage step)\nif (opacitat \u0026gt; 0) {\nSetOpacitat(obj, opacitat);\nopacitat -= 2;\nwindow.setTimeout(\u0026ldquo;fadeOut(\u0026lsquo;\u0026rdquo;+obj+\u0026ldquo;\u0026rsquo;,\u0026rdquo;+opacitat+\u0026ldquo;)\u0026rdquo;, 7);\n}\n}\nfunction initImatge(imatgeId)\n{\n// Fade in an image on load.\nSetOpacitat(imatgeId, 0);\nfadeIn(imatgeId,0);\n}\n// This part of the code writes the starting image set html\n// document.write(\u0026rsquo;\u0026rsquo;)\nfor(i=0;i\u0026lt;MatriuNumImatges.length;i++){\ndocument.write(\u0026rsquo;\u0026lt;img style=\u0026ldquo;padding: 0 0 0 0; border-width: 2 px; border-style: solid; border-color: #D0D0D0; cursor: crosshair; width: 35%; \u0026ldquo;\u0026lsquo;)\ndocument.write(\u0026lsquo;src=\u0026ldquo;\u0026rsquo;+ImatgesAtzar[MatriuNumImatges[i]]+\u0026lsquo;\u0026rdquo; id=\u0026ldquo;idImatge\u0026rsquo;+i+\u0026lsquo;\u0026rdquo; alt=\u0026ldquo;idImatge\u0026rsquo;+i+\u0026lsquo;\u0026rdquo;\u0026gt;\u0026rsquo;)\n}\n//document.write(\u0026rsquo;\nTotes les imatges\u0026rsquo;)\n//document.write(\u0026rdquo;\u0026rdquo;)\n// And the following function will cycle them\nfunction CicleImatges()\n{\ndo{\nIndexActual=Math.floor(Math.random()*(MatriuNumImatges.length))\nIndexActual=(IndexActual\u0026gt;=MatriuNumImatges.length)?IndexActual-1:IndexActual;\n}while(IndexActual==IndexAnterior);\nIndexAnterior=IndexActual;\nImatgeAnterior=MatriuNumImatges[IndexActual];\ndo{\nImatgeActual=Math.floor(Math.random()*(ImatgesAtzar.length))\nImatgeActual=(ImatgeActual\u0026gt;=ImatgesAtzar.length)?ImatgeActual-1:ImatgeActual;\n}while(Discrimina(ImatgeActual,ImatgeAnterior, MatriuNumImatges));\nMatriuNumImatges[IndexActual]=ImatgeActual;\n// ActualIndex now contains the index of the image to be changed,\n// which won\u0026rsquo;t be the same that changed \u0026ldquo;before\u0026rdquo;. ImatgeActual\n// contains the index of the new, and different, image.\nwindow.setTimeout(\u0026ldquo;Aux1(\u0026lsquo;\u0026rdquo;+IdImatges[IndexActual]+\u0026ldquo;\u0026lsquo;,\u0026rdquo;+ImatgeActual+\u0026ldquo;)\u0026rdquo;,1300)\n}\n// Now comes a tricky part with counters\u0026hellip; The easiest way was to\n// link one to another to keep the process going. Change the last\n// parameter to set the timings\nfunction Aux1(Id, Actual)\n{\nfadeOut(Id,100)\nwindow.setTimeout(\u0026ldquo;Aux2(\u0026lsquo;\u0026rdquo;+Id+\u0026ldquo;\u0026rsquo;,\u0026rdquo;+Actual+\u0026ldquo;)\u0026rdquo;,1500)\n}\nfunction Aux2(Id, Actual)\n{\nelem=document.getElementById(Id);\nif(elem==null){Aux3(Id);}\nelem.src=ImatgesAtzar[Actual];\nAux3(Id)\n}\nfunction Aux3(Id)\n{\ninitImatge(Id)\nwindow.setTimeout(\u0026ldquo;AuxiliarCicleImatges()\u0026rdquo;,1500);\n}\nfunction AuxiliarCicleImatges()\n{\nwindow.setTimeout(\u0026ldquo;CicleImatges()\u0026rdquo;,1500)\n}\nCicleImatges()\nRelated posts:ParseList(ScrambleList(Relateds(Programming)),15)\n","permalink":"https://mostlymaths.net/2009/10/fading-images-in-javascript.html/","tags":["Blog","Programming","How-to"],"title":"Fading images in Javascript"},{"categories":null,"contents":"or the trouble with hard-coded paths and ineffective menus.\n\nCross platform page-layout software:\nScribus. Now with more LaTeX\nI am supposed to present a poster in a conference, about some work I am doing. I asked office mates about what they used\u0026hellip; A Mac user suggested Pages, and I asked a more Linux oriented, LaTeX savvy, and he told me: forget about LaTeX and use some WYSIWYG program, you\u0026rsquo;ll save time and effort. It will be nicer, too.\nIt looked like a good advice, but I am leaving more and more my Mac at home, and working in the office with the netbook. So I started a search for a cross-platform open source page layout program. I had already stumbled onto Scribus a few years ago (I had to write a triptych with the rules of Go to teach teenagers in an event at the faculty, finally did it in LaTeX), and knew it may be up to the task.\nIndeed, it is up to the task, and cross-platform. I installed it in the Mac\u0026hellip; had a nice TeX button. I thought WOW! I don\u0026rsquo;t have to generate intermediate PS files! But it didn\u0026rsquo;t work. I installed the same version in the netbook\u0026hellip; TeX working fine. What was the problem?\nA damned problem: The path to the TeX compiler is hard-wired. And it is not even an \u0026ldquo;assume it is in the path\u0026rdquo;, which would be\u0026hellip; well, sane. No, it is hard-wired to some Mac specific route. I guess to the \u0026ldquo;usual\u0026rdquo; path to have LaTeX installed, I don\u0026rsquo;t have it there. If you have trouble with Scribus in Mac OS and LaTeX frames (i.e. if it says it cannot start pdflatex), start by opening up your Terminal and write\n which pdflatex\n to get the path you need in the following step. Now open up your favourite text editor, and open the file:\n /Applications/Scribus.app/Contents/share/scribus/editorconfig/100_latex.xml\n and change the following line\n  to match the result of which before. In my case it was:\n  The peculiar point is that there is a menu item (Preferences-\u0026gt;External Tools) to change the path, but it doesn\u0026rsquo;t apply the change, ever.\nRelated posts:\nCalendars \u0026amp; emacs\nOverwhelmed With Projects? Declare Task Bankruptcy\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nQuick latex-ing with emacs\nTime boxing: you will work like never before\nWinning Against Your Reading List\nParseList(ScrambleList(Relateds(Maths, Programming,Latex)),2)\n","permalink":"https://mostlymaths.net/2009/09/scribuslatex-in-mac-os.html/","tags":["Linux","Mac","LaTeX","Maths"],"title":"Scribus+Latex in Mac OS"},{"categories":null,"contents":"  From flickr\n  Around a year ago, I stumbled into this lifehacker page, suggesting an IBM-developerWorks tutorial on how to install a just 3 things to your system to be able to\u0026hellip; whistle control your computer. Whistle a tune, open Firefox. Things like these. You know how geeky I am, I had to try it. Smaller problem: the tutorial is for Linux/Windows and I was on a Mac. Bigger problem: it is slightly outdated and short on some details. And the script had a small problem that had to be solved.\nIn this post you will find  How to install a modified sndpeek in Mac (OS X 10.5.8) and Linux (Ubuntu 9.04+Fluxbox) Modifications needed by cmdWhistle.pl, the main whistly script to run in Mac OSX Modifications I needed to compile sndpeek in Ubuntu How to use it Examples  Instructions for MacOS X The first and most important ingredient is having th set of compilers\u0026hellip; if you don\u0026rsquo;t have gcc and the developer-related software, you can\u0026rsquo;t do anything. Assuming you do (your \u0026ldquo;Extra\u0026rdquo; CD of Mac OS installation contains everything needed), you\u0026rsquo;ll need to download:\n cmdWhistle.pl from here. Browse to the bottom of this page, it is where I got the instructions. You should take a look at it.\n sndpeek source from here\n  After you have the source code, go to your editor of choice, open src/sndpeek/sndkpeek.cpp and add the following line\nfflush(stdout); just after (yes, I know the following line is damn long!)\nfprintf( stdout, \u0026#34;%.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f \u0026#34;, mfcc(0), mfcc(1), mfcc(2), mfcc(3), mfcc(4), mfcc(5), mfcc(6), mfcc(7), mfcc(8), mfcc(9), mfcc(10), mfcc(11), mfcc(12) ); fprintf( stdout, \u0026#34;\\\\n\u0026#34; ); This refreshes the printout every so often to the terminal window, to interact with the script. Now open a terminal window, navigate to src/sndpeek and type make osx. It worked for me just out of the box\u0026hellip; if you run into some problem\u0026hellip; ask Google, then ask me, although Google is a best bet. Then, sudo make install, so you can execute it. Now go to a terminal and try to execute sndpeek. It should give you some nice output like the following image, if your microphone works and you are whistling.\n Whistle!\n  After this, I needed to create the set of intermediate perl headers from C headers\u0026hellip; Because cmdWhistle complained about them. I found the info here. You just have to (corrected a typo: thanks Rhettigan!)\nsudo cd /usr/include sudo h2ph \\*.h \\*/\\*.h from a terminal window.\nAfter this you can try to get some whistles in, but in my case, the script didn\u0026rsquo;t work: it wasn\u0026rsquo;t able to get correctly the time of day (via gettimeofday() in the C headers). To test it, go to the folder where you have cmdWhistle, and write\nsndpeek --nodisplay --print | perl cmdWhistle.pl -c and whistle a couple of times (a simple whistle, repeated two times with a small delay from one to the other, then remain silent for a couple seconds). You should get something like this output:\n enter a tone sequence: Tone: 77.00 ## last: [925263] curr: [0] difference is: 925263 Tone: 81.00 ## last: [925848] curr: [925263] difference is: 585 place the following line in /Users/ruben/.toneFile\n77.00 81.00 _#_ 0 585 _#_ (command here) _#_\n If you don\u0026rsquo;t, probably means your time-getting code also don\u0026rsquo;t work. Go and edit cmdWhistle by adding the following\nuse Time::HiRes; after use strict; and replace subs getEpochSeconds and getEpochMicroSeconds by\nsub getEpochMicroSeconds { my ($seconds, $microseconds) = Time::HiRes::gettimeofday; return($microseconds); }#getEpochMicroSeconds sub getEpochSeconds { my ($seconds, $microseconds) = Time::HiRes::gettimeofday; return($seconds); }#getEpochSeconds and it should work by now. Try it again. If it doesn\u0026rsquo;t\u0026hellip; well, ask again.\nInstructions for Linux (more or less distro-agnostic) It should be easier in Linux. You also need to download, configure, make and sudo make install the library libsndfile from here. Then follow the steps from Mac OSX, editing sndpeek.cpp. Now try to make linux-alsa, or make linux-oss depending on which sound system do you have installed. I couldn\u0026rsquo;t get any one working\u0026hellip; so I just went to synaptics package manager, installed ALSA\u0026rsquo;s developer libraries, and tried again make linux-alsa. All went fine\u0026hellip; until compiling src/maryas/LPC.cpp. The compiler complained about the use of abs, the integer version of fabs, claiming it was undeclared. Just edit src/maryas/LPC.h, and add stdlib.h to the set of includes. It should work. Follow the directions for the Mac OS if it compiled now.\nIn a follow up story son I will give a patch I wrote to use it in my Aspire one\u0026hellip; The microphone is not that accurate, and sndpeek+cmdWhistle always give 511 as a signal received (in a sndpeek image you can always see a peak).\nHow to Control Your Computer by Whistling? The idea is to whistle a certain sequence of tones, and map it into a certain command. For example, you whistle a part of a tune you like\u0026hellip; this opens Firefox. The first part, is to turn this tune into a set of tones and times. To do so,\nsndpeek --nodisplay --print | perl cmdWhistle.pl -c and just whistle to it. Then wait for a few seconds. The output should be as above, the important information is the last line:\n place the following line in /Users/ruben/.toneFile\n77.00 81.00 _#_ 0 585 _#_ (command here) _#_\n Follow its advice! Open the suggested file, and this line is the set of tones and timings. Replace (command here) by\u0026hellip; either open /Applications/Firefox.app or /usr/bin/firefox. To test if it does work,\n sndpeek \u0026ndash;nodisplay \u0026ndash;print | perl cmdWhistle.pl -v\n will try to map what you whistle with the stored whistles, without stop in verbose mode. To end it, press C-c. To run it without output, remove the -v flag.\nUsage Example In Mac OSX a useful command is show desktop. I have this in my notes file:\n 49.00 _#_ 0 _#_ osascript -e \u0026lsquo;tell application \u0026ldquo;System Events\u0026rdquo; to key code 103\u0026rsquo; _#_ 103 is F11\n Assuming you have the default keybindings, of course!\n","permalink":"https://mostlymaths.net/2009/09/whistle-control-your-computer.html/","tags":["Programming","emacs","Linux","Mac","How-to","Bizarre","Productivity"],"title":"Whistle control your computer (Linux\u0026Mac)"},{"categories":null,"contents":"Althouh I use AucTeX, which already has nice quick-writing techniques, I have found emacs\u0026rsquo; abbrev-mode together with skeletons are a nice addition to it, allowing me to be really quick at writing LaTeX. The included examples to use dabbrev and skeletons are for the mathbb and theorem environments.\nSample usage: When I write \\mbb, and then open the left {, mbb gets expanded to mathbb\u0026hellip; so I have \\mathbb{ as needed. The other example, I write \\bth, press space and get a nice \\begin{theorem} \\end{theorem} delimiters with the cursor positioned between them.\nThis should be in ~/Abbrev.el\n (define-abbrev-table \u0026lsquo;text-mode-abbrev-table \u0026lsquo;(\n(\u0026ldquo;mbb\u0026rdquo; \u0026ldquo;mathbb\u0026rdquo; nil 0)\n(\u0026ldquo;bth\u0026rdquo; \u0026ldquo;\u0026rdquo; latex-skel-thm 0)\n\u0026hellip;\n))\n The three dots are just to indicate my file is much, much longer. The following should be in a file ~/Skeletons.el\n (define-skeleton latex-skel-thm\n\u0026ldquo;Insert a \\\\begin{theorem} environment\u0026rdquo; nil\n\u0026ldquo;begin{theorem}\u0026rdquo; \\n\n\u0026gt; _ ?\\n\n\u0026ldquo;\\\\end{theorem}\u0026ldquo;)\n And finally, in your .emacs you should add the following lines:\n (load \u0026ldquo;~/Skeletons.el\u0026rdquo;)\n(setq abbrev-file-name \u0026ldquo;~/Abbrev.el\u0026rdquo;)\n(add-hook \u0026lsquo;text-mode-hook (lambda () (abbrev-mode 1)))\n A suggestion from a friend, using the √ß and √á to add {} and \\[\\] with the cursor positioned in between. Done via keyboard macros:\n (fset \u0026lsquo;braces\n(lambda (\u0026amp;optional arg) \u0026ldquo;Keyboard macro.\u0026rdquo; (interactive \u0026ldquo;p\u0026rdquo;) (kmacro-exec-ring-item (quote ([123 125 left] 0 \u0026ldquo;%d\u0026rdquo;)) arg)))\n(global-set-key (kbd \u0026ldquo;√ß\u0026rdquo;) \u0026lsquo;braces)\n(fset \u0026lsquo;displaymode\n(lambda (\u0026amp;optional arg) \u0026ldquo;Keyboard macro.\u0026rdquo; (interactive \u0026ldquo;p\u0026rdquo;) (kmacro-exec-ring-item (quote ([13 92 91 13 13 92 93 up] 0 \u0026ldquo;%d\u0026rdquo;)) arg)))\n(global-set-key (kbd \u0026ldquo;√á\u0026rdquo;) \u0026lsquo;displaymode)\n Although I may use the √ß key (I\u0026rsquo;m a catalan speaker), in emacs I write generally LaTeX, in english\u0026hellip; so I don\u0026rsquo;t really have a use for it. I may change the \u0026ldquo;global-set-key\u0026rdquo; to set it just for LaTeX\u0026hellip; or even create a minor mode for it (Non-Catalan-Keyb?).\nWhat speed-up keyboard tricks do you have in your .emacs file? Share them!\nRelated posts:ParseList(ScrambleList(Relateds(Productivity, Linux, emacs, Mac, Latex)),15)\n","permalink":"https://mostlymaths.net/2009/09/quick-latex-ing-with-emacs.html/","tags":["Programming","emacs","Linux","Mac","LaTeX","Maths","Productivity"],"title":"Quick latex-ing with emacs: dabbrev and skeletons"},{"categories":null,"contents":"When you are about to send a file to ArXiV, it greets you with the following confirmation message, just before the \u0026ldquo;Click here\u0026rdquo;:\n Now Processing Submission\nRead carefully the information below, recite aloud the English alphabet backwards starting from Z, breathe deeply, read carefully the information below once again, and then with a suitable pause (at least 10 seconds) you should\nCLICK HERE TO CHECK STATUS\n It made me lough quite a bit a few months ago :)\n","permalink":"https://mostlymaths.net/2009/09/arxiv-fun.html/","tags":["Maths","Bizarre"],"title":"ArXiV fun"},{"categories":null,"contents":"Last year our department got a nice and shiny Xerox WorkCentre, with scan+mail capabilities. Wonders of technology, now I can scan those chapters I use from books that weigth tons. But\u0026hellip; of course, the machine scans two pages each time, and thus creates a double bound PDF.\nAnd this doesn\u0026rsquo;t work well with my way to print booklets, so a working solution was to use ghostscript and ImageMagick from the command line. Automation at its finest.\nFirst, scan whatever you have to scan. In my case, I had it reversed, and had a \u0026ldquo;black scan line\u0026rdquo; on the left side. Then:\n gs -sDEVICE=jpeg -q -dBATCH -dNOPAUSE -r300x300 -sOutputFile=Page%03d.jpg -dFirstPage=1 PdfFile.pdf\n This will split your PDF file into individual pages, and save them as jpg. The following step may be skipped, as I had them rotated\u0026hellip; you may not.\n mogrify -rotate 180 Page*.jpg\n Now we want to get rid of that black rectangle on the right of every page. As this command cuts right sides, and I don\u0026rsquo;t bother reading again ImageMagick\u0026rsquo;s manual, if your black scan zone is on the other side, rotate as in the previous step, cut, and rotate back ;) Observe that mogrify needs its parameters before the file to process.\n mogrify -gravity East -chop 150x0 Page%d.jpg\n I suggest you try first on an individual page (with convert , not mogrify), and change the 150 pixels to be chopped as you see fit:\n convert Page%d.jpg -gravity East -chop 150x0 Test.jpg\n Now, look at the image dimensions, either by right-clicking and viewing image properties, or opening in some image editor (as GIMP) divide by two the width and round up. This is the cropping size.\n mogrify -crop CroppingSize Page*.jpg\n This will generate pair of files named PageN-0.jpg and PageN-1.jpg (if everything worked correctly). Now, delete your PageN.jpg, from the previous step, as you are ready to convert all PageN-M.jpg into PDF files.\n mogrify -format pdf -page A4 Page*.jpg\n To end this procedure mix them all in a (big!) pdf file\n gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=output.pdf Page*.pdf\n Now you are ready to follow the steps here to turn it into a booklet. Hope you found this useful!\nRelated posts:\n9 programming books I have read and somewhat liked\u0026hellip;\nLinux is a time killer (follow-up ‚Äì Ditching Ubuntu: Arch Linux in my Acer Aspire One)\nMy first port to the Ben NanoNote: gnugo\nPower to the command line\nTwo weeks, still loving Fluxbox\nThree dee (3-dimensional file system browsers review)\nGcal: the ultra-powerful command line GNU calendar\nAcer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\nParseList(ScrambleList(Relateds(Maths,Programming,Linux)),5)\n","permalink":"https://mostlymaths.net/2009/09/slicing-scannings.html/","tags":["Linux","How-to","Maths","Books"],"title":"Slicing scannings"},{"categories":null,"contents":"My backup script in Mac/Linux\n#!/bin/sh\n# This script backs up a set of files and directories incrementally,\n# storing only the modified files in a folder-per-day basis. Each time\n# you run it, the \u0026ldquo;current\u0026rdquo; directory in the backup server gets\n# refreshed to the newest copy, and the previous version of a modified\n# file is stored in a directory corresponding to \u0026ldquo;today\u0026rdquo; (20090905,\n# for instance)\n# Root to be safeguarded\nBDIR=/home/\u0026hellip;?\n# File and directory patterns, to avoid saving all those useless .dat\n# files every day. More on this later.\nINCLUDES=Backup.incl\n# Backup server\nBSERVER=your.backup.server\n########################################################################\nBACKUPDIR=`date +%Y%m%d`\nOPTS=\u0026ldquo;\u0026ndash;force \u0026ndash;ignore-errors \u0026ndash;delete-excluded \u0026ndash;include-from=$INCLUDES\n--delete \u0026ndash;backup \u0026ndash;backup-dir=~/DESTINATIONCOPYDIR/$BACKUPDIR/ -az\u0026rdquo;\nexport PATH=$PATH:/bin:/usr/bin:/usr/local/bin\n# Generate the \u0026ldquo;backup dir\u0026rdquo;\n[ -d /home/YOURHOMEDIR/emptydir ] || mkdir /home/YOURHOMEDIR/emptydir\nrsync \u0026ndash;delete -a /home/YOURHOMEDIR/emptydir/ $BSERVER:DESTINATIONCOPYDIR/$BACKUPDIR/\nrmdir /home/YOURHOMEDIR/emptydir\n# Copy\nrsync $OPTS $BDIR $BSERVER:DESTINATIONCOPYDIR/current\n# Uncomment the following line if you have Growl in a Mac\n# growlnotify -n \u0026lsquo;Backup\u0026rsquo; -m \u0026lsquo;Backup finished correctly\u0026rsquo; -s\nThe pattern file should look like this. An exclamation mark as a first line. A minus sign avoids certain directory/files, a plus adds a directory (start by adding the directory), then add the pattern of files. If you want to include all subdirectories, you have to explicitly state so.\n!\n- DontWantPDFsFromThisDirectory/*.pdf\n+ Directory\n+ DirectoryWithSubfolders\n+ DirectoryWithSubfolders/**/\n+ Directory/*.tex\nYou may also like some Mac/Linux related posts:\n Whistle control your computer (Linux\u0026amp;Mac)\n Calendars \u0026amp; emacs\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/09/my-backup-script-in-maclinux.html/","tags":["Programming","Linux","Mac","How-to","Maths"],"title":"My backup script in Mac/Linux"},{"categories":null,"contents":"\nMy month, starting\nFor the last two years, I have been really happy, living without a definite calendar. I just knew I had a meeting with my boss \u0026ldquo;next Monday\u0026rdquo;, or had a workshop somewhere \u0026ldquo;in the last weeks of January\u0026rdquo;. But these days I\u0026rsquo;ve come to realize I just need a calendar now\u0026hellip; And finally managed to mix org-mode\u0026rsquo;s events with standard emacs calendar+diary views. This calendar is emacs calendar\u0026rsquo;s mode standard one (I love its looks) but harvests information from org-mode\u0026rsquo;s headlines and timestamps. I can now have the best of both worlds: a nice printed calendar (calendar mode), and a nice computerized one (org-mode).\nI had some problems with the setup of my diary file to open .org files, and the problem solved by putting this in my diary file:\n \u0026amp;%%(org-diary :timestamp)\n You can also restrict to just a particular file:\n \u0026amp;%%(org-diary :timestamp) ~/path/to/file\n And the useful options are :timestamp, :sexp, :schedule and :deadline, to select which things to show. The initial problem is the :sexp as default, it won\u0026rsquo;t work with non-diary (org-mode\u0026rsquo;s) diary entries.\nOther org-mode, AucTeX or emacs appreciation posts:\n AucTeX again How to create LaTeX booklets Loving emacs+org mode (\u0026amp; auctex\u0026hellip;) (in catalan)  You may also like some Mac/Linux related posts:\n Whistle control your computer (Linux\u0026amp;Mac) My backup script in Mac/Linux\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/09/calendars-emacs.html/","tags":["emacs","Linux","Thoughts","Mac","How-to","Maths"],"title":"Calendars \u0026 emacs"},{"categories":null,"contents":"For a while I have been either not LaTeXing a lot, or not using AucTeX frequently. Strange indeed! But in July, while in G√∂ttingen I wrote part of some lecture notes of one of the courses. And again, used auctex-preview in emacs to find errors in what I was writing.\nI can\u0026rsquo;t even tell how wonderful it is, to share the source with the images with the formulas. An image is worth more than a googol words.\n\nRelated posts:\nCalendars \u0026amp; emacs\nOverwhelmed With Projects? Declare Task Bankruptcy\nBook Review: The War of Art, by Steven Pressfield (highly recommended book)\nQuick latex-ing with emacs\nTime boxing: you will work like never before\nWinning Against Your Reading List\nParseList(ScrambleList(Relateds(Maths, Programming,Latex)),2)\n","permalink":"https://mostlymaths.net/2009/09/auctex-again.html/","tags":["emacs","LaTeX"],"title":"AucTeX again"},{"categories":null,"contents":"\nFrom flickr\nSeptember is to months as Monday is to weekdays\nSeptember is again here, like a new year in more than a sense. I have no new \u0026ldquo;New Year\u0026rsquo;s promises\u0026rdquo;, since the beginning of the year. In fact, most of the things I wanted to do are already done, on the way to be done or I gave up. Well, let\u0026rsquo;s summarize what I shall do these three months to end 2009\n Draw more often, Get ready the details for another article for next year, Travel around,\n PHD-a-lot (really a lot),\n Finish some odd things lying around (raytracer? Lisp? Christmas postcard? Emacs \u0026ldquo;book\u0026rdquo;? Fractal zoomer?)\n  ","permalink":"https://mostlymaths.net/2009/09/back-to-work.html/","tags":["emacs","Thoughts","Trips","Fractals","Maths","LISP"],"title":"Back to work"},{"categories":null,"contents":"\nWhile on Paris, I spotted several Space Invaders. Sadly, I wasn\u0026rsquo;t aware enough, as there are plenty.\n","permalink":"https://mostlymaths.net/2009/08/paris-space-invaders.html/","tags":["Places","Trips","Bizarre"],"title":"Paris Space Invaders"},{"categories":null,"contents":"Have you ever wondered how to take a screenshot remotely, via the command line in a Linux system? Here is a way to do it. At the bottom you can also find a script to move it to the root of your personal page (if you have) to open the screenshot in your browser.\nI have a Lisp program running inside Slime (The Superior Lisp Interaction Mode for Emacs) in an emacs instance running in my office computer. It has been running for quite a few hours (days), and top still marks it as 100%\u0026hellip; The problem: if emacs/Slime cuts the Lisp connection with the Lisp client, it goes runaway. And I needed a way to \u0026ldquo;see\u0026rdquo; if emacs was still connected. Without going there, obviously.\nRemote screen-shooting via the command line is the solution. The trick: use xwd:\n xwd -root -display :0.0 -out Screenshot.xwd\n Then ImageMagick\u0026rsquo;s mogrify to turn it into something easier to open:\n mogrify -format jpg Screenshot.xwd\n Caveats: In my case, the first two times I got a black screen. Why?\n killall gnome-screensaver (or your particular instance of screen-saver)\n And voil√†:\n\nemacs still connected\nThe script to move it to your public_html folder:\n xwd -root -display :0.0 -out Screenshot.xwd\nmogrify -format jpg Screenshot.xwd\nchmod +x Screenshot.jpg\nmv Screenshot.jpg public_html/\nrm Screenshot.xwd\n You may also like some Mac/Linux related posts:\n Whistle control your computer (Linux\u0026amp;Mac)\n Calendars \u0026amp; emacs\n My backup script in Mac/Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/08/screenshot-via-command-line-in-linux.html/","tags":["emacs","Linux","How-to","Maths","LISP"],"title":"Screenshot via command-line in Linux"},{"categories":null,"contents":"These days I\u0026rsquo;ve been busy programming a version of Lavaurs algorithm for the idenfication of circle chords: the abstract Mandelbrot set.\nThe images don\u0026rsquo;t look like much, but the output of the program is nicer: it outputs an Encapsulated PostScript file which looks sharper. But when converting to png with ImageMagick some distortion appeared.\n Lavaurs chords, depth 13 cutoff\n   Lavaurs chords, depth 5\n   Lavaurs chords, depth 13\n  \nYou can get the black and white depth 13 PostScript file here here, and the color version here.\nNote from 2019: I had to dig quite a bit to locate these two files!\n Lavaurs chords, depth 13\n    The code is a set of Lisp functions, with the main one being recursive. I also have a double-recursive version, but the first time I used it I thought I had a problem with the code, and rewrote it. It did work, but it is slower. The output is a set of orthogonal circles to a main one, set as \u0026ldquo;clip\u0026rdquo; in the PostScript file.\nNote from 2019:A few months after I wrote this post and code, Adam Majewski rewrote big chunks of my Lisp code (with my blessing), making it faster and cleaner. You can read about it, and about the Lavaurs algorithm in this wikibook. Nowadays you can find many implementations of Lavaurs chords, back when I wrote mine I think it was the only one freely/easily available. I have recovered my original code (unmodified, for my modern shame), you can find it in this gist.\nI am increasingly happier of my last Christmas postcard \u0026amp; tutorial, as they forced me to learn PostScript programming. Turns out to be more useful than I thought.\n","permalink":"https://mostlymaths.net/2009/08/lavaurs-algorithm.html/","tags":["Programming","emacs","PostScript","Fractals","Maths","LISP"],"title":"Lavaurs algorithm"},{"categories":null,"contents":"\nTaken from Flickr\nSometimes I view mathematical knowledge as a desert. Full of sand, some pebbles, some rocks. You can get easily lost in this dry sea, but you can also find a place to stay and add. And now, I can say I have added my small grain of sand: An entire transcendental family with a persistent Siegel disc (link to the preprint version in ArXiV). My first article, now officially \u0026ldquo;Awaiting Editorial Assistant Processing\u0026rdquo;.\n","permalink":"https://mostlymaths.net/2009/08/grain-of-sand.html/","tags":["Thoughts","Maths"],"title":"Grain of sand"},{"categories":null,"contents":"\nLavaurs algorithm on course\nLike almost every year, August comes with a lot of pending To Do lists\u0026hellip; This year, it is choking full, mostly of work related issues, and some unknotted threads waiting to be finished. And in two and a half weeks I\u0026rsquo;ll head for Paris, and then my \u0026ldquo;vacation\u0026rdquo; is over.\nYesterday I wasted my morning: bought my orange belt, set up the external monitor for my netbook, configured the printer, fotocopied two pages of a book and drank an horchata with a friend.\nThe evening was supposed to be invested in using those two pages to add a proof to the notes I am supposed to write of a course I took two and a half years ago. They are \u0026ldquo;almost\u0026rdquo; done, but one of my goals this month is to definitely finish them now. This means adding some proofs, but the hardest part is writing a pair of algorithms to add a few images, that in top of drawing a pair of missing diagrams (thank god I have a drawing tablet\u0026hellip;). But yesterday I spent around 6 hours messing with a Lisp program to generat PostScript output\u0026hellip;, probably today I\u0026rsquo;ll have to add 3 hours to finish it in the afternoon.\nFurthermore, I would like to finish the \u0026ldquo;final\u0026rdquo; part of the proof I\u0026rsquo;m working on. It should be easy, but I don\u0026rsquo;t really know where to start. In fact, I don\u0026rsquo;t even know the Banach space I\u0026rsquo;m working on. Once I have it defined, it should be really easy. Once I have it.\nFinish the Young Researchers website I started in February\u0026hellip; and left in February. It should be ready for September 1. And a few optional side-projects, if I were to finish them, I would be happier.\nBut\u0026hellip; why it is so hard to work in August, and more even from home? It\u0026rsquo;s like some evil force pulls me from Emacs and takes me to Firefox\u0026hellip; or from the office to wander the Rambla.\n","permalink":"https://mostlymaths.net/2009/08/teleworking-in-august.html/","tags":["Programming","emacs","Places","Thoughts","PostScript","Fractals","Maths","LISP","Productivity"],"title":"Teleworking in August"},{"categories":null,"contents":"I love the smell of old (really old, but not dusty) books. It reminds me of some kind of vanilla scent, that is only to be found in them. I smelled it a few weeks ago, when I bought Conrad\u0026rsquo;s Heart of Darkness, second hand 1972 Penguin Modern Classics edition (3‚Ç¨) in a second hand bookstore in G√∂ttingen (Germany).\n\n","permalink":"https://mostlymaths.net/2009/08/old-books-scent.html/","tags":["Trips","Bizarre","Books"],"title":"Old books' scent"},{"categories":null,"contents":"Here are some pictures and images which look pretty good together with my Fluxbox configuration, in my Netbook. Here they are for your enjoyment. They are supposed to be small, not to drain too many system resources. I will upload later the butterfly in higher resolution.\n     \nYou may also be interested in\n Two weeks, still loving Fluxbox Three dee Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox Whistle control your computer (Linux\u0026amp;Mac)  ","permalink":"https://mostlymaths.net/2009/08/fluxbox-backgrounds.html/","tags":["Linux","Places"],"title":"Fluxbox backgrounds"},{"categories":null,"contents":"Two and a half weeks ago, I got a netbook and promptly installed Ubuntu, followed by Fluxbox (as already explained). And after two weeks of almost continued use, I like it even more than when I decided to use it. Some of the points I really enjoy (in no particular order).\n Strong keyboard shortcuts. As an emacs junkie as I am, I love keyboard shortcuts. And Fluxbox is incredibly flexible in defining or removing them: Even system-wide shortcuts are customizable. And avoiding the use of the trackpad (if it were as good as a Macbook one, I wouldn\u0026rsquo;t mind, but it\u0026rsquo;s not the case) is a big point. Now I have keyboard shortcuts, usually Windows key (I found something useful to do with it!) and a letter (i.e. WK+e for emacs, WK+f for Firefox) or Control+Windows key+letter, if it has already been defined (WK+p is Pidgin, and C+WK+p is gnome-screenshot).\n  \n \u0026ldquo;Desktop\u0026rdquo; level applications. One of the first additions I got in Fluxbox was conky, a system monitor, which sits in your root window: your \u0026ldquo;desktop\u0026rdquo;. I always put it around quotation marks, as I think a desktop without files sounds strange\u0026hellip; But I don\u0026rsquo;t mind anymore: I mapped Shift+F11 (in the same vein as I have F11 for show desktop in my Mac) to open Nautilus, this way I don\u0026rsquo;t even recall missing it. But the point is that any application can be \u0026ldquo;rooted\u0026rdquo; by changing its default layer, and saving the configuration (right click, or whatever you have configured in the window\u0026rsquo;s pane, select remember, switch on the desired features and then \u0026ldquo;save on close\u0026rdquo;): this way every time you issue the \u0026lsquo;ShowDesktop\u0026rsquo; command (which I set up as Shift-F12) you also see the rooted application. In my case, I have an aterm with pseudotransparent background and without window decorations.\n   \n Window decoration easy removal. WK+t toggles WindowDecoration on and off. And you can set a window to remember its last state\u0026hellip; so my Firefox, terminal applications and emacs no longer have window decoration. Saving screen real estate is a point, and more so in netbooks. But if I were to need it, just a keypress and it is there again. Together with auto-hide of the Toolbar, I get extra screen height available.\n Tabs. I started to use tabs very recently. In short, you can group two (or any number, in fact) \u0026ldquo;windows\u0026rdquo; in one \u0026ldquo;big window\u0026rdquo;, by drag-drop of the window pane of one into another while pressing WK (usually it is mapped to using the middle mouse button, but I don\u0026rsquo;t have one, naturally). And switch from one to another indepently of the rest of the system. I use it among \u0026ldquo;related\u0026rdquo; tasks, for instance my Pidgin chat window and Firefox (or emacs and evince), this way WK+tab switches between just these two tasks, and if I want to go away (emacs, Nautilus\u0026hellip; any other open window) I just alt-tab once and get to the next. Obviously there are also numerical shortcuts for any tab: WK+1 takes you to tab one, and so on. I know, the way I use it is more or less like Alt-Tabbing\u0026hellip; but it doesn\u0026rsquo;t exactly feel the same: I don\u0026rsquo;t have to backtab. I will be using it more and more, probably as I love this feature.\n  You may also be interested in\nParseList(ScrambleList(Relateds(Linux, emacs, Productivity)),15)\n","permalink":"https://mostlymaths.net/2009/08/two-weeks-still-loving-fluxbox.html/","tags":["emacs","Linux","Productivity"],"title":"Two weeks, still loving Fluxbox"},{"categories":null,"contents":"I don\u0026rsquo;t know exactly how (well, now I remember: I was looking for a transparent background patch for xclock), but a while ago, in G√∂ttingen I stumbled on a 3D file system browser, called XCruiser (you can get it with \u0026lsquo;sudo apt-get install xcruise\u0026rsquo;). It has not been maintaned for a long while, and it can\u0026rsquo;t even open the files you \u0026ldquo;travel\u0026rdquo;, so it is pretty useless, albeit amazing.\n \n \nXCruiser\nIt made me thin me of Jurassic Park\u0026rsquo;s 3D filesystem browser: fsn. In fact, there is an upgraded version: fsv.\nI just installed fsv\u0026hellip; Not so easy. First, a little dependency hell: ./configure will start to complain about gtk-config. Install the gtk+ dev libraries through synaptic. Then, the gtkgl bindings, then the Mesa libraries\u0026hellip; and the one who kept it from configuring: install freeglut-dev. Configure, make make install and here you go, although after the hassle, I don\u0026rsquo;t recommend it: go for one of the other two. They are all just eye candy, after all.\n\nJurassic Park-like: fsv\nAnd the easier to install, in fact is tdfsb (although it just looks strange\u0026hellip; three D file system browser, easy to remember!). It has some nice points, and it looks pretty good too, in fact I don\u0026rsquo;t know which I find more \u0026ldquo;fun\u0026rdquo;, tdfsb or XCruiser.\n \ntdfsb\nYou can also have a look at this article I found 3D_File_Browsers.pdf (Linux Magazine online) which covers the same content I outlined above, in a maybe nicer way (but my screenshots look better!)\nIf you found this interesting, please consider sharing in StumbleUpon, Reddit, Twitter or whatever you enjoy. Thanks!\nParseList(ScrambleList(Relateds(Linux,Programming)),15)\n","permalink":"https://mostlymaths.net/2009/07/three-dee.html/","tags":["Linux","Bizarre"],"title":"Three dee"},{"categories":null,"contents":"\nPrinceps Mathematicorum\n\nOld 10 Deutsche Mark banknote. Gauss depicted along with a normal distribution and 5 historical buildings in G√∂ttingen. The most visible, St. Jacobi\u0026rsquo;s Church (Jacobikirsche).\n","permalink":"https://mostlymaths.net/2009/07/gauss-grave.html/","tags":["Trips","Maths"],"title":"Gauss' grave"},{"categories":null,"contents":"Last monday I bought an Acer Aspire One, 8.9\u0026rsquo;, with an extra 6-cell battery and 15 minutes later I installed Ubuntu (Netbook Remix version) on it, and after realizing everything was working smoothly (except for the SD card reader\u0026hellip; anyway, I have an external device for doing so) I installed the Fluxbox window manager. New: You may also be interested in Two weeks: still loving Fluxbox.\n\n\nHere you can see the FluxBox Root menu, Conky in the \u0026ldquo;desktop\u0026rdquo;\nbackground and the Toolbar.[](http://www.fluxbox.org/features/)\nFluxbox is really lightweight, fast and responsive. Also, really configurable, via just text files, a thing I love. Also the netbook works really nice, the keyboard is not as tiny as I assumed (I have big hands), in fact I type there faster. The only drawback is the amount of time it takes to get a new computer to be OK! It took me 3 days to have a complete work environment (you know, LaTeX, emacs, InkScape\u0026hellip;)\nYou may also be interested in\n Whistle control your computer (Linux\u0026amp;Mac)\n My backup script in Mac/Linux\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/07/acer-aspire-one-89-ubuntu-fluxbox.html/","tags":["Programming","emacs","Linux"],"title":"Acer Aspire One 8.9' + Ubuntu + Fluxbox"},{"categories":null,"contents":"As you already know, I\u0026rsquo;m just in the middle of getting a thesis done. This means quite a lot of hand-written papers, full of definitions and on top of it all a lot of notational problems. I have quite a few similarly named spaces, with its corresponding norms\u0026hellip; It is a mess.\nWhen I had already proved my \u0026ldquo;first\u0026rdquo; theorem (in the thesis context, I mean\u0026hellip; I have a paper soon to be published :), I started LaTeXing it. It spans 3 pages, without borders or any introduction or notational details (as most of them come from a paper from my advisor). But I have a lot of new notations and spaces, inherent of my setting.\nAnd after a few corrections my advisor told me to stop writing it by computer, do it by hand (my handwriting is not bad) and this way corrections are a lot quicker, and notational problems can be solved just before finishing it on a computer. Also we have a nice photocopier which acts as a scanner, sending the pages to your inbox. Nice!\nBut this means, that when he comes over, with a bunch of corrections\u0026hellip; I turn to the old way of doing these things: a piece of white paper, scissors and scotch tape. This goes a long way into the Cut \u0026amp; Paste way of doing things\u0026hellip;\n","permalink":"https://mostlymaths.net/2009/07/cut-paste.html/","tags":["Maths","Bizarre"],"title":"Cut \u0026 Paste"},{"categories":null,"contents":"I feel like I contributed something. I rewrote Wikipedia\u0026rsquo;s Siegel disk page, adding references and images. It is now quite dense\u0026hellip; Ill have to re-read it to simplify it several times. Or someone else\u0026hellip; Wikipedia\u0026rsquo;s wonders.\n\nSnapshot! (Via Paparazzi!)\n","permalink":"https://mostlymaths.net/2009/07/wikipedian.html/","tags":["Mac","Maths"],"title":"Wikipedian!"},{"categories":null,"contents":"As I already did with Douady Rabbits, here is another dynamical plane, this time corresponding to a Siegel disk in an entire transcendental family in a parameter corresponding to a polynomial-like region.\n\nSiegel disk in an ETF, available below as wallpaper\nSiegel disk for desktop background 1280x800\nSiegel disk for desktop background 1024x768\nYou can also buy a poster version here.\nIf you liked it, or have whatever else to say please leave a comment, digg, stumble or whatever you feel like doing. Thanks!\nYou may also be interested in this other wallpaper: Douady Rabbit Wallpaper.\nParseList(ScrambleList(Relateds(Maths, Programming)))\n","permalink":"https://mostlymaths.net/2009/07/siegel-disk-wallpaper.html/","tags":["Programming","Downloads","Fractals","Maths"],"title":"Siegel disk wallpaper"},{"categories":null,"contents":" \nScreenshots!\nBack when I was in school, I had a really nice game in my 80286 computer, under Windows 3.1. Yes, it was 15 years ago\u0026hellip; The game was Hyperoid, by Edward Hutchins. When I got my first Pentium with Windows 95, I longed that game\u0026hellip; and the 3.1. version didn\u0026rsquo;t work completely OK in it. Anyway I played\u0026hellip; then found Hyperoid95. I even recompiled it, to add firepower (the author of this version cut the fire speed). It turns out that a X version exists, xhyperoid\u0026hellip; and a newer version, SDLRoids is what I was looking for. Improved add-ons, more options, MacOs binaries. Sweet old times!\nAnother (\u0026ldquo;strange\u0026rdquo;) game related posts:\n Torus trooper\n Nethack\n  Some Mac/Linux-related posts you may like:\n Whistle control your computer (Linux\u0026amp;Mac)\n My backup script in Mac/Linux\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/07/hyperoid-aka-sdlroids.html/","tags":["Linux","Mac","Games"],"title":"Hyperoid a.k.a. SDLRoids"},{"categories":null,"contents":"\nImage from Flickr\nArrow\u0026rsquo;s impossibility theorem and related results\nBackground: Let K={A,B,C\u0026hellip;} be a finite set of alternatives (maybe political parties), with more than 3 items. Let\u0026rsquo;s call transitive preference a way to sort all these elements, with draws possible. It\u0026rsquo;s just a funny name for a vote, in the more general sense as we can split our vote (Let A have 0.5, B 0.25 and C 0.25 of our vote). Now consider a set of N electors, each one with a transitive preference, i.e. a vote. We will call constitution (according to the naming in the theorem) a function which assigns each set of electors-votes a certain outcome: the final election, the people\u0026rsquo;s choice. As a matter of notaton, A\u0026gt;(n)B means that the elector n decides A is a better election than B.\nThere are certain properties which a \u0026ldquo;good\u0026rdquo; constitution should verify:\n Transitivity: Assume an outcome is given, and the constitution says A\u0026gt;B. The constitution will be transitive if JUST a voter changes his vote A\u0026gt;(n)B for B\u0026gt;(n)A, then the constitutional output will be either no change, or A gets dropped. This assumption is used so that voting isn\u0026rsquo;t harmful for the voted party. Unanimity: If everyone votes A\u0026gt;B, the constitution should result in A\u0026gt;B. Independence of irrelevant alternatives: If the fact of A being above B in the constitution is only a result of A being above B in the individual votes.  We say a constitution is a dictatorship if there is an elector n such that the constitution puts A\u0026gt;B whenever n puts A above B.\nArrow\u0026rsquo;s impossibility theorem: Every constitution satisfying all three properties above is a dictatorship.\nThis theorem establishes compositions in a legislative chamber, for instance. And there is not a clear-cut way to do so, the theorem says. What happens if the constitution just selects, without order, a subset of candidates?\nDuggan-Schwartz\u0026rsquo;s theorem: A constitution to select a subset of candidates from a set of more than 3 always satisfies:\n The system is not anonymous, thus the vote of certain electors has a bigger impact than others. The system pre-imposes that certain candidates never win. The preferred candidate amongst all electors is in the subset of electees.\n The election is manipulable.\n  And what if we just need to choose one winner, a president?\nGibbard-Satterthwaite\u0026rsquo;s theorem: A constitution to choose just one candidate amongs more than 3 candidates verifies one of the following:\n It is a dictatorship, The system pre-imposes that certain candidates never win. The election is manipulable.  What means that the election is manipulable? There are different ways it could be manipulated. For instance, knowing how the system works, and certain voting trends, the vote of a number of individuals can change the outcome of the election. A typical example, the slightly extreme leftists voting moderate leftists, knowing that more extreme leftists won\u0026rsquo;t get representation in the election.\nThis, of course, doesn\u0026rsquo;t mean you should not vote\u0026hellip; just think a little before doing so.\n","permalink":"https://mostlymaths.net/2009/07/mathematical-elections.html/","tags":["Maths","Bizarre"],"title":"Mathematical elections"},{"categories":null,"contents":"This evening I was bored at home, and decided to have a look at my old Lisp raytracer‚Ä¶ a project that just went idle a year ago. I picked up another programming project I had idling for a long time (an emacs lisp project, to interact with my console-based fractal drawers). I had a coding breakthrough that time, and managed to advance quite a bit in a little time, so today I tried again.\nWell, I corrected the plane cutting problems, although the intersection code is still buggy (numerical problems) and messy (hard as hell to read). I have to undergo a complete rewritting of the scene system soon, and add textures for FSM\u0026rsquo;s sake! After that, add (again) refraction code and finally, if all goes well, I shall add also a triangle mesh loader, someday. When the time is right I\u0026rsquo;ll post the source code as well.\n Reflective spheres\n  ","permalink":"https://mostlymaths.net/2009/06/lisp-raytracing-again.html/","tags":["Programming","emacs","Mac","Maths","LISP"],"title":"Lisp raytracing, again"},{"categories":null,"contents":"Sometimes I feel like a character from a RPG (or NetHack), where you have a certain level and experience, and as you advance killing monsters, your experience points go up, your level eventually rises and your enemies turn harder.\nI guess life (or at least a mathematician\u0026rsquo;s life while doing his thesis) is more or less like this\u0026hellip; Enemies appear, you overcome them, and as you advance, they get stronger, bigger and thicker. From easy linear algebra to Cech cohomology, from convergence in euclidean spaces to convergence in \\ell^\\infty spaces over lattices\u0026hellip;\nLife is meant to be a test, throwing harder questions upon you?\n","permalink":"https://mostlymaths.net/2009/06/levelling-up.html/","tags":["Thoughts","Maths"],"title":"Levelling up"},{"categories":null,"contents":"Stephen Wolfram (owner of Wolfram Research) has released (after announcing it in March) Wolfram Alpha, a kind of web search aimed at natural language and intelligent answers. JME pointed me to this question:\n Taken from Wolfram Alpha\n  The strange thing about it is that is is fully written in Mathematica (or so they say, 5 million lines of code). Strange indeed, Mathematica isn\u0026rsquo;t a particularly fast or \u0026ldquo;comfy\u0026rdquo; programming language. I bet someone could write a LISP version of it in half that lines\u0026hellip; without word-wrapping ;)\n","permalink":"https://mostlymaths.net/2009/06/wolfram-alpha.html/","tags":["Programming","LISP"],"title":"Wolfram Alpha"},{"categories":null,"contents":"Around 1/2lf of the moments in which I look at my headphones to put them in, I pick them \u0026ldquo;switched\u0026rdquo;, i.e. I have (L)eft, I see an L and my head says (L)ight, then I see the other one, and it is \u0026reg;eft. Today I found out \u0026reg;eft is the past participle of reave, which means more or less \u0026ldquo;to rob\u0026rdquo;. But usually, in the presence of \u0026reg;ight there is nothing (L)eft.\n","permalink":"https://mostlymaths.net/2009/06/light-reft.html/","tags":["Bizarre"],"title":"Light \u0026 Reft"},{"categories":null,"contents":"There is a plain and easy way to download YouTube .flv videos (which you can watch with VLC Media Player, or in a Mac with Quicktime Player and additional plug-ins).\nTo do so, you need the Safari Web Browser (Mac or Windows). Go to your desired page hosting a Flash Video file, and select Activity in the Window menu. There you will find the files being downloaded in the web-page you are visiting\u0026hellip; double click the bigger one (as usually flash videos are the biggest files in YouTube pages, if you can\u0026rsquo;t find such a big file, check for the .flv file extension) and it will open in a new window. Just save this file and you are done :)\n","permalink":"https://mostlymaths.net/2009/06/how-to-download-youtube-flv-videos.html/","tags":["Mac","How-to"],"title":"How to download YouTube .flv videos"},{"categories":null,"contents":"\nLast weekend we had a quick trip (Friday, Saturday and Sunday) to Madrid. Being a Barcelona lover, I thought I would hate the city. I was amazed after walking over there, having a look at all the monuments and museums (the tourist thing), and then going for dinner and supper, some tapas and a beer. Madrid surprised us with this\u0026hellip; in Barcelona is quite hard to find a cheap and good place to eat\u0026hellip; or not so cheap, but not tourist focused. I guess Madrid is made more for the people that live there than the tourists that come. And it is easier to feel the difference than I thought.\n\n","permalink":"https://mostlymaths.net/2009/05/trip-to-madrid.html/","tags":["Places"],"title":"Trip to Madrid"},{"categories":null,"contents":"\nSetting a local proxy through a remote machine\nTo set up a local proxy using some computer in another network (in my case, my office computer to accessing MathSciNet search and such), go to a console and\n ssh -D 42 YourRemoteMachineName\n And then set Firefox to use a proxy. In preferences, go to the Advanced Tab and select Connection Settings. Here you should select manual proxy configuration, in localhost with the same port number (42 in this example) as you used up before. Now you can browse as if you were browsing in YourRemoteMachineName. See the figure for more information.\nSome Mac/Linux-related posts you may like:\n Whistle control your computer (Linux\u0026amp;Mac)\n My backup script in Mac/Linux\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/05/local-proxy.html/","tags":["Linux","Mac","How-to","Maths","Productivity"],"title":"How to get a local proxy"},{"categories":null,"contents":"I have been using several productivy enhancers (or time-wasting avoiders) as of late. Although I find them quite useful, I wonder if I could find something even better.\nThink: I have already talked about think elsewhere. Think enables the user to focus on just one application, seeing nothing more. It is like the blinders of a horse to keep you from distracting.\nLeechBlock: A FireFox addon, which allows you to block certain sites at certain times of the week, or after a predetermined amount of time has been wasted there. A generic *.com *.org *.net filter, workdays from 9 to 13, 15 to 19 could be enough to keep you from wasting time, couldn\u0026rsquo;t it? But it can be customized to allow for a little every hour (I let 5 minutes each hour in this span\u0026hellip; you may need to look for something)\nemacs: As emacs is almost everything, it also enhances my productivity. Usually I am always in emacs, doing whatever I am working on (looking for references, writing something in LaTeX).\npageAddict: As Julio suggests in his comment, pageAddict can be a nice addition. It tracks your internet usage, which you can then view graphically (i.e. 17 minutes of Facebook, 10 minutes of Google, 40 minutes of Wikipedia\u0026hellip;). I have tried it, it works pretty well, but I guess I already know where my time gets wasted\u0026hellip; If you don\u0026rsquo;t, give it a try.\n","permalink":"https://mostlymaths.net/2009/05/productivity-enhancers-or-time-wasting.html/","tags":["emacs","Mac","Productivity"],"title":"Productivity enhancers (or time wasting avoiders)"},{"categories":null,"contents":"\nFolded \u0026amp; Ironed\nYou can view all steps together here.\n \nAll steps in one image (click to enlarge):\n\n","permalink":"https://mostlymaths.net/2009/05/how-to-fold-and-iron-your-karategi.html/","tags":["How-to","Karate"],"title":"How to fold and iron your karategi"},{"categories":null,"contents":"\nMy chair, my fractals (A4) and my Drazen\nPetrovic poster (4xA4)\nRasterbator is an online poster maker, for you to print in your own printer. Of course, the results are not as good as full quality posters like these, but they look pretty good when looked from afar. It rasterises an image you upload (or link from anywhere in Internet), does some magic stuff, and the result is a bunch (you decide graphically how many, orientation and other options) of A4 (or Legal) sheets arranged in a nice PDF, which you have to print. Then a little (transparent) duct tape and you can have really cool B\u0026amp;W or color posters (if your printer allows you to) in your office, home or wherever.\nHere you have a user gallery, with pictures. And you can see mine in this post, too. Enjoy your home-made posters, or check full quality posters from here, I produced the design!\n \nClose and closer. Do you see the big dots (7 mm) now?\nRelated posts:\n How to create LaTeX booklets Easy paperback bookbinding how-to\n Big fonts in LaTeX\n  You may also be interested in:\n How to do an (easy) origami CD case  ","permalink":"https://mostlymaths.net/2009/05/rasterbator-online-posterizer-for-home.html/","tags":["Basketball","How-to","Bizarre","Drawing"],"title":"Rasterbator: online posterizer for @home printing"},{"categories":null,"contents":" An English version of my diagrams for the origami flower-box Origami flower-box (Caja-Flor) diagrams, in English. Loosely based upon Kawasaki\u0026rsquo;s rose and a traditional japanese box. Click on the diagrams to get a bigger view of them. It appeared (Spanish version) on the Spanish Origami Association Bulletin, Second Volume, 2008. You can also take a look at my easy origami CD case.\n \nIt will look like this when finished, closed and opened.\nFirst Page (click to enlarge!!)\n\nSecond Page (click to enlarge!!)\n\nThird (and final) page (click to enlarge!!)\n\nYou may also like to take a look at the diagrams of my other design, far easier and quicker than this!\n Easy origami CD case  You may also be interested in other origami related posts:\n Andrew Hudson\u0026rsquo;s Stars and wheels Origami masks Satoshi Kamiya\u0026rsquo;s Pegasus  Or even in handcrafts related posts:\n Easy paperback book-binding how to  If you liked this design and folded it, please leave a comment, with a picture if possible! If you enjoyed it, digg, stumble, or whatever you feel like doing. Thanks!\n","permalink":"https://mostlymaths.net/2009/05/origami-flower-box-diagrams.html/","tags":["Origami","How-to"],"title":"Origami Flower-Box diagrams"},{"categories":null,"contents":"There are a few Mac applications I use so often, I couldn\u0026rsquo;t live without them. And most of them are free, or really kind shareware.\n Caffeine: Keep your Mac from sleeping. Carbon Emacs (F): Well, this is cross-platform. And you know, I can\u0026rsquo;t live without it. Plus, Carbon Emacs has some nifty additions. Check it out! Disk Inventory X (F): Shows graphically the size of files sitting in your drives. A quick way to find those hard disk eaters you have but are not sure exactly where.\n Growl: Let your applications talk to you.\n Fugu: thin MacOS FTP client.\n Nethack: For the work breaks!\n Platypus: Turn your bash script into a nice application.\n Reduce: Algebraic manipulator, among others. Cross-platform.\n TabletDraw (S): 35$, but it is the best tablet drawing program I have come across, at least for this price. The shareware version has all options, but limited undo capabilities and just 2 layers.\n Think: Keep your attention in just one application.\n sLife (F): Easy time tracking for the Mac. But it seems to make Nethack crash :/\n Quicksilver (F): The application launcher to beat all other application launchers. Pressing CMD-Space followed by i and enter to launch iTunes saves a lot of trackpad moving.\n  ","permalink":"https://mostlymaths.net/2009/05/extremely-useful-mostly-free-mac.html/","tags":["Programming","emacs","Mac","Productivity"],"title":"Extremely useful (mostly free) Mac applications"},{"categories":null,"contents":"I have finally finished (duh!) reading a book on shorthand (stenography) focused on the catalan language. It is a book by Josep Cormand, \u0026ldquo;Estudi de fonologia b√†sica : M√®tode d\u0026rsquo;escriptura r√†pida\u0026rdquo;, ISBN 84-218-0320-4. It is based in a method developed by professor Dalmau, based on catalan fonology. Once you are able to write in this way, you enjoy it more and more, is quite an interesting feeling. Although I find re-reading what I wrote a pain\u0026hellip; I have written a lot more than read, thus I am still far from being proficient at it.\n A phrase in catalan and the equivalent shorthand\n  ","permalink":"https://mostlymaths.net/2009/05/shorthand.html/","tags":["Bizarre","Productivity"],"title":"Shorthand"},{"categories":null,"contents":"A few years ago I was looking for an origami CD case. I found this site (which uses Tom Hull\u0026rsquo;s design). Although it is a quick and neat design for an origami case, I don\u0026rsquo;t like it, it feels like the CD is about to fall. So I tweaked for a while, and came up with this design. It takes a little longer to fold, but holds really firm, and looks nicer after.\n\nClick to view a clearer and larger (A4) version\nIf you enjoyed this design of origami CD case, have any question or have folded it, leave comment to tell me how did it turn, give a thumbs up, digg or whatever you feel like doing. Enjoy!\nYou may also like one of my other designs\n Origami Flower-Box diagrams\n  You may also be interested in other origami related posts:\n Andrew Hudson\u0026rsquo;s Stars and wheels\n Origami masks\n Satoshi Kamiya\u0026rsquo;s Pegasus\n  Or even handcrafts related posts:\n Easy paperback book-binding how to  If you liked this design and folded it, please leave a comment! If you enjoyed it, digg, stumble, or whatever you feel like doing. Thanks!\nParseList(ScrambleList(Relateds(iPod)),0)\n","permalink":"https://mostlymaths.net/2009/05/how-to-do-easy-origami-cd-case.html/","tags":["Origami","How-to"],"title":"How to do an (easy) origami CD case"},{"categories":null,"contents":"New: The previous version is rubbish! Just add your MP3 encoded files to iTunes library, select the entire album, choose get info from right-clicking it, go to the last tab (options) and select: Part of a compilation, remember position, skip when shuffling and in media type, Audibook. And you are done in a moment.\nTime-wasting version by Google: This is just to remind myself how to do this simple thing. I got the information from here (via Google).\n Add your MP3 to your iTunes library Select that file in iTunes Right-click, convert to AAC (or create AAC copy) Remove both instances in your iTunes library (without deleting files!)\n Go to the folder where the file is\n Remove the MP3 version (if you want)\n Go to your iTunes Library folder (Documents-Music-iTunes-iTunes Library-path to your file)\n Move it to where you like it to be\n Change the extension of the file from M3A to M3B\n Add this file to iTunes\n You are done!\n Now you can edit file info and properties as usual.\n  If you happen to have used this post, leave me a comment!\n","permalink":"https://mostlymaths.net/2009/05/mp3-to-ipod-audiobook-personal-reminder.html/","tags":["Music","Mac"],"title":"MP3 to iPod audiobook: personal reminder"},{"categories":null,"contents":"I \u0026ldquo;discovered\u0026rdquo; Nethack a month or so ago, while being bored to death (after three unsuccessful attempts in proving something) in my office.\n\nMyself with my dog Hachi\nI play the MacOs Tiles (or QT) version, which can be found in Nethack.org, configured for ASCII color play. The configuration file is a file called .nethackrc in your home directory, mine looks like:\n OPTIONS=!autopickup,ascii_map, color, hilite_pet, lit_corridor, showexp, showscore, boulder:0;\nOPTIONS=role:monk, align:lawful, gender:male, name:RB, pettype:dog, dogname:Hachi, catname:Fu!;\nqt_tilewidth=13\nqt_tileheight=17\nqt_fontsize=medium\nqt_compact=0\n This sets Nethack options as ASCII color map, my pet(s) have a heart near to them, lit corridor, change the boulder sign to 0 and my default name, role and such things.\nWhat it is? Well, it is a dungeon exploration game: the objective is to find the Amulet of Yendor and sacrifice it to your god. You travel through the Dungeons of Doom, the Gnomish mines, Minetown and a lot more places (which I have not been to yet), killing foes, zapping wands and unearthing treasures.\n\nYour god and name may change according to your role.\nThe key point in the game? Identification. When you travel the dungeons, you may find something in the ground, or as a leftover from a corpse of something you killed. And usually, it is not identified (i.e. \u0026ldquo;a long sword\u0026rdquo;). This long sword could be cursed (it usually deals -2 damage if cursed, for instance, and being cursed means you can\u0026rsquo;t unwield it!), neutral or blessed\u0026hellip; and it could be a magical sword (for instance, the Vorpal blade: spoiler from nethack wiki). And it goes like this for almost everything, making this game into some sort of joy of discovery mixed with killing strange monsters (like a\u0026hellip; Quantum mechanic (spoiler again)!).\nIt is an enjoyable game, hard to leave aside once you start getting the mechanics and controls. You can play while you are on a coffee break ;)\nExplore, and try. You may enjoy starting as a samurai, or valkyrie, I turned later to being a monk. But\u0026hellip; you\u0026rsquo;ll die, a lot of times.\n\nPerhaps today is a good day to die!\nTry not to die from a kitten, or a giant ant\u0026hellip; you\u0026rsquo;ll feel dumb. If you don\u0026rsquo;t mind spoilers, there is a nethack wiki which has quite a lot of information. Also, for an added twist, there is Tower (OpenGL Java based), where you start from the bottom of a tower, and travel up\u0026hellip; in 3D!\n\nTower, a 3D Nethack clone\nBy the way, there is also an emacs mode for console-based Nethack.\nAnother (\u0026ldquo;strange\u0026rdquo;) game related posts:\n Hyperoid a.k.a. SDLRoids Torus trooper\n  Some Mac/Linux-related posts you may like:\n Whistle control your computer (Linux\u0026amp;Mac)\n My backup script in Mac/Linux\n Screenshot via command-line in Linux\n How to download YouTube .flv videos\n Extremely useful (mostly free) Mac applications\n MP3 to iPod audiobook: personal reminder\n Two weeks, still loving Fluxbox\n Three dee (3-dimensional file system browsers review)\n\n Acer Aspire One 8.9\u0026rsquo; + Ubuntu + Fluxbox\n How to get a local proxy\n  ","permalink":"https://mostlymaths.net/2009/05/nethack.html/","tags":["emacs","Linux","Games"],"title":"Nethack"},{"categories":null,"contents":"\nPasteli\nThe Greek home-made energy bar\nIngredients (yields around 500 gr, can be scaled down or up):\n 250 gr honey 250 gr sesame seed, shredded pistachios and almond (I used: 50 gr shredded pistachios, 70 gr shredded almond and125 gr sesame seed) Peel of half a lemon (optional)\n Cinnamon (optional)\n Some place to put it all on (A mould with parchment paper is perfect)\n    \nBring to a boil the honey and optionally a lemon peel and some cinnamon. They will add a special flavour to the base. Mix all the nuts well in a plate\n \nWhen the honey starts boiling, wait for around 5 minuts (stirring occasionally) and remove the lemon peels and cinnamon. I used chopsticks for this, they come in handy later. Add the nut mixture, and keep mixing them thoroughly with the honey. Keep it at medium heat for 15 minutes, stirring and moving often. The chopsticks come handy to stir, because they are easier to clean than spoons. It will turn darker as the honey starts to caramelize.\n [](http://2.bp.blogspot.com/_f3d3llNlZKQ/SfbRtS3occI/AAAAAAAAAzs/kgx_AEx7gDM/s1600-h/IMG_0019.JPG) \nPour it on the mould (beware, it will be really hot), cover with some parchment paper and press until it is more or less evenly spread.\n [](http://2.bp.blogspot.com/_f3d3llNlZKQ/SfbRtxUy2GI/AAAAAAAAAz8/kzfF-B8wnu8/s1600-h/IMG_0021.JPG) \nLet it cool down for a while and then move to the fridge for at least 2 hours. Then, let it stand out of the fridge for 30 minutes (it will be hard as a rock just after taking it out), cut in small pieces and store in an airtight container. In the fridge, better.\n \n \nThe generic recipe is just the same proportions (in weight) of honey and sesame seeds (or a mixture of other nuts and sesame). Scale it as you wish!\nLinks to nutritional information about these ingredients:\n Pistachio (raw)\n Almond (raw)\n Sesame seeds\n Honey\n  The whole 500gr bar has around 2100 kcal, thus each piece has around 140 kcal (I made 16 pieces), which comes mostly from non-saturated fats (nuts) and sugar (from honey). Quite a lot of minerals (mostly calcium and iron from sesame, and manganese, phosphorus and copper from all ingredients), vitamins (B6 pistachio and sesame, E almond, a little from almost every other) and fiber (from all nuts). This is an amazing treat, both in taste and in nutritious value.\nI got the original recipe from about.com and grouprecipes.com and changed a few things to suit my tastes. If you enjoyed this recipe, leave a comment to tell me how did it turn, give a thumbs up, reddit or whatever you feel like doing. Thanks for your attention!\nRelated posts:\nMy grandpa\u0026rsquo;s doughnuts\nSnickerdoodles (tea time nutmeg cookies)\nGluten,dairy,egg-free dark brown cane sugar biscuit\nKey lime pie (vegan friendly)\nCurry and cheese bread\nParseList(ScrambleList(Relateds( Plants)),4)\n","permalink":"https://mostlymaths.net/2009/04/pasteli.html/","tags":["Cooking"],"title":"Pasteli (greek sesame and honey candy) recipe"},{"categories":null,"contents":" Softcover binding your own books is easier than you think\n   Bookbinding for dummies As of late, I have been printing quite a lot of long mathematical papers, and a few free pdf-books, or tutorials. And I wanted them properly bound, but didn\u0026rsquo;t want them so much as to pay for it. A few months ago, I found this tutorial on hardback binding. Although the tutorial, method and result are great, it is quite a lengthy effort. If you want to give a hand-made book as a present, go for it. If you just want all those pages bound together such that they don\u0026rsquo;t look strange in your shelves, or you don\u0026rsquo;t look freakish at the sub, I would prefer my method (or something similar :) of paperback (softback, softcover) bookbinding. This is the how-to, step by step.\nWhat you will need:\n Around 3 hours. 90% of the time is just for the glue to dry, you can be elsewhere doing any other thing, A pdf you want to print as a book, A working LaTeX installation. Ask someone who has one to do the first steps for you if you don\u0026rsquo;t, or go and install it, it is not really hard, White glue, A stapler, with staples, Some thick paper (100gr/m^2 or so), a folder separator works great. A brush.  Step 1 Add some blank pages to your pdf. To do so, create a file named Mybook.tex with the following contents. Keep in mind that the name of the pdf file should have no blank spaces, so rename it to something like Bookstart.pdf\n\\\\documentclass\\[a4paper\\]{article} \\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\usepackage\\[final\\]{pdfpages} \\\\begin{document} \\\\includepdf\\[pages={{},{},-,{},{}}\\]{complete path to your pdf file} \\\\end{document} Compile the tex file (go to a terminal window, go to your tex file and pdflatex it, if you don\u0026rsquo;t know what I am saying, ask some seasoned TeXer, or look elsewhere). You will get a Mybook.pdf. Those {} in the start of \u0026ldquo;pages\u0026rdquo; are blank pages. You need two at the end (they will be glued to the cover) and 2 at the start, but depending on the pdf, you will put 2 or 3 (depends, think what it will look like later). If you don\u0026rsquo;t mind, 2 is ok.\nStep 2 Create the stack of sheets, with a proper signature using LaTeX. To do so, follow the instructions in my previous post about LaTeX booklets, but set the signature as anything between 32 and 48 pages. These are the number of pages squeezed in chunks, the same you see in a properly bound book.\nStep 3 Split all signatures (the blocks of pages you had), you now will need to fold them over. You will be folding together along consecutive pages (I mean, if you look at all your page numbers, you will find a page where one side has two consecutive page numbers, this is where you should split, and where the fold goes). Fold along, keeping ALL signature pages straight. Mark your fold strongly, using something hard (a pen, a ruler, the side of scissors).\nStep 4 Open up all those signatures, and staple them.\n  Staple them over something soft\n  Turn over, close them (with your fingers, or something harder) and you are done.\nThe best way to do so is over something mildly soft (like a bag, a pair of old, folded jeans, newspaper), using a ruler as shown in the drawing. In this ruler you should have two markings, and staple alternating signatures so that staples are NOT aligned, as shown in the following picture. After all the stapling, put them together like this with some weight over it.\n Keep them this way for a while.\nStep 5 Bind them together. To do so, use either some clamps or binder clips as shown in the picture. If you are using clamps, use a pair of pieces of wood, or rulers, or something hard to hold together the almost-book, and glue the stapled side using a brush. If you use binder clips, put a row of them, take one of them out at a time, glue underneath and put it again.\n  Clamps work better, but clips are easier to get\nLet it dry for a while. At least 30 minutes. 1 or 2 hours, better.\nStep 6 (Optional but recommended) Now you can choose the way to go. It depends on the size of your strong paper and how big the book is. In this step you cut a piece of paper and glue it to the side, so that you don\u0026rsquo;t need a piece of paper which is a lot bigger than your usual A4 or legal paper. If you have bigger ones to glue onto, you can skip this, and just cut a piece that can be glued onto the cover, back-cover and side together. If you do, cut it, fold it as in this step, glue it and done. If you don\u0026rsquo;t\u0026hellip;\n  Cut a piece, fold it neatly, put your almost-done book, and fold along the sides. This is the spine piece.\nSuggestions by a seasoned bookbinder I know:\n Forget about making Step 6 optional: Why I say it is optional? For smallish books (1-3 signatures), a viable option is to forget the spine piece and go with just one big cover. This is a lot quicker, but your book may not last as much as with the spine piece (which gives strength and more freedom to open it). I have edited this and now is recommended. The book will look a lot better, and will (probably) last longer. I have two no-spined books, and they are doing ok, although they are harder to spread-open. More strength: In Step 6 use a box cutter to cut some X from top to bottom along the spine (trying to cut all signatures evenly), not very deep, and try to fill them with glue while gluing the spine. This will add a lot of strength to the whole book (as the signatures will be glued among themselves more tightly).   Cut along the spine, vertically and in crosses.\nThey will soak in white glue, adding strength to the binding\nNow glue this to the spine of the book, and rebind or reclamp. Let it dry again.\nStep 7 (Also more or less optional) Add covers. Cut some half-pages, and glue them thoroughly (without wetting them) with the brush, and glue them to what you already have. When it has dried, you are done.\nStep 8 (For purists) You can now cover them with some book plastic adhesive wrapper for better results.\n You are done!\n","permalink":"https://mostlymaths.net/2009/04/easy-paperback-book-binding-how-to.html/","tags":["DIY","LaTeX","Maths","Books"],"title":"Easy paperback book binding how-to"},{"categories":null,"contents":" Get arbitrary size fonts in LaTeX You have probably wondered how to get really big fonts in titles, or anywhere in a LaTeX document.\n\\usepackage{fix-cm} % Allows for Computer Modern fonts of arbitrary sizes\n\u0026hellip;\n\\fontsize{60}{70}\\bfseries A SAMPLE\n\u0026hellip;\nYou are done. Easy, wasn\u0026rsquo;t it? You may also be interested in ParseList(ScrambleList(Relateds(Latex,Linux)),5)\n","permalink":"https://mostlymaths.net/2009/03/big-fonts-in-latex.html/","tags":["LaTeX","Maths"],"title":"Big fonts in LaTeX"},{"categories":null,"contents":"Today I found some nice \u0026ldquo;gadget\u0026rdquo; to add to my browser. TiddlyWiki.\nIt is a single html document you download, and save. And it behaves (locally, in your computer!) just as a wiki. Creating links, adding things, whatever you like. Use it like a blog, wiki, recipe book, sketchpage, whatever you like. All gets saved in the same html file you downloaded (advise: change its name).\nWikipedia page.\nTiddlyWiki home.\n","permalink":"https://mostlymaths.net/2009/03/tiddlywiki.html/","tags":["Programming"],"title":"TiddlyWiki"},{"categories":null,"contents":"I have been experimenting with exponential-power potentials in my fractal images as of late, and by far the best results have been these. You can download it as a desktop wallpaper, hope you enjoy it. This Douady rabbit appears as a capture zone for a critical value in an exponential family.\n\nDouady rabbit in an exponential family, available below as wallpaper\nDouady rabbit for desktop background 1280x800\nDouady rabbit for desktop background 1024x768\nYou can also buy a poster version here.\nIf you liked it, or have whatever else to say please leave a comment, digg, stumble or whatever you feel like doing. Thanks!\nYou may also like this other wallpaper, Siegel disk wallpaper.\nParseList(ScrambleList(Relateds(Maths, Programming)))\n","permalink":"https://mostlymaths.net/2009/03/douady-rabbit.html/","tags":["Programming","Downloads","Fractals","Maths"],"title":"Douady rabbit wallpaper"},{"categories":null,"contents":"The first day, on our way to the Parador at Carmona (Sevilla, Spain) this is what we saw.\n\n\n\n","permalink":"https://mostlymaths.net/2009/02/sightseeing-at-carmona-sevilla.html/","tags":["Maths"],"title":"Sightseeing at Carmona (Sevilla)"},{"categories":null,"contents":"For those of you who don\u0026rsquo;t know, PostScript is a programming language (and also the name of the type of files you write in this language) used as a way to define what a page looks like. A PostScript file contains instructions which create text, or draw images, and these instructions can do quite a lot of work. PostScript is directly processed by almost all laser printers, and if you are a Linux or MacOs user you already have some mean to process and open it. In Windows you can download an install AFPL GhostScript, or visit this page to convert a PS to PDF.\n Koch curve\n   Mandelbrot set\n    Christmas card\n  As you may already know, PostScript is a Turing complete programming language. This means that any program you can write in any programming language, you can write in PostScript (albeit it will be slower). As geekish and curious as I am, a few days ago I decided to learn some of its core features, and as I tended to forget new languages almost as quick as I learnt them (Oh Python, where are thou?) I started writing some small reminders. If I forgot, I just read them and ready to go. In this quick tutorial/knowledge-refresher for PostScript programming, I\u0026rsquo;ll sketch some key points and show a pair of examples: a Mandelbrot set and a Koch\u0026rsquo;s snowflake. As a side note, the code for the snowflake is quite general for L-systems.\u0026ldquo;My\u0026rdquo; code for this system is a rewriting, rescaling and simplifying of the code from Michel Charpentier at this page. When you are through this tutorial, take a look at his code, he is much more clever than I am when PostScript-ing, and his results are awesome.\nFrom now on, PS will mean, of course, PostScript.\nPS is stack oriented, based on RPN (reverse polish notation). This means that you have a stack, like a stack of plates, and if you want to multiply 3 by 4, you should write 3 4 mu to push 3 and 4 to the stack (4 being the topmost element now). Mul is the command for multiplying, as you may guess. 3 and 4 get pushed to the stack and then multiplied. Now the instruction mul leaves his result in the stack, ready to be used. Keep how the stack works in mind. When writing some complex formulae or algorithms, the state of the stack is important, if you start to lose track, write it down on the side. Also, it is more efficient and quicker to just use what you have on the stack and don\u0026rsquo;t rely on named variables.\nTo make a comment within a PS program, write %, and it is customary to start every PS file with the comment line %!PS which allows all devices to recognize it as PostScript.\nThere are two separate stacks: a operand stack and a dictionary stack. Well, in fact as xardox from Reddit points out, there are 3 stacks, these two and the function stack: thanks to it you don\u0026rsquo;t need to mess with function call and return addresses in the other two stacks. In the first one, operands (as 3 and 4 in the previous example) are kept. In the second one, names of operators or variables are kept. And as it is a stack, if you define a variable named A twice, when you call it only the most recent (nearer to the top of the stack) will be used.\nIn fact, defining a variable or defining an operator has the same syntax as defining a variable. /name content def for a variable, /name {operations} def for an operator. I find this nice (very Lisp-y). Variable and function names are made of combinations of characters (a‚Ä¶z) and numbers, as usual in other programming languages. Curiously enough, you can name a variable 7U if you want, but starting variables with a number is \u0026ldquo;bad style\u0026rdquo;, usually. Keep it in mind. You may wonder why I wrote /name when defining a variable. Well preceding a name with a / (slash) puts the name itself as operand in the stack, without the slash, PS looks for it in the dictionary stack and puts its corresponding value in the stack. (Thanks to xardox from Reddit for the slash/backslash distinction).\nAfter so much talking, sure you are wondering How does one draw? Well,\n first we have to define a path with newpath, then we issue some movement and tracing commands, then fill or stroke these commands, and finally finish the path.  As a starting point, a square 200 points per side in the bottom left of the page:\n newpath 200 200 moveto % as the name says, move the cursor to x y 200 0 rlineto % line from actual point toward the right % side 0 200 rlineto % the actual point is now in the right side, % go up \\-200 0 rlineto % go left 0 -200 rlineto % ta daa A Square closepath stroke showpage newpath and closepath enclose a drawing path, and moveto moves the cursor to an starting position. rlineto creates lines in relative coordinates (from the actual point taken as (0,0)), a similar construct with lineto uses global coordinates (and there is also a rmoveto). stroke draws the previous paths, and if we were to put fill instead of stroke, it would be a black square.\nChanging colors is as easy as (before stroking or filling) issuing a num setgray for a gray level, where num is between 0 (black) and 1 (white). If you prefer RGB, Red Green Blue setrgbcolor would do the same with RGB values (also ranging from 0 to 1 for each colour component).\nWriting is a little trickier in PostScript. First, you have to find a font with name findfont, then numpt scalefont to scale it to a certain number of points, finally setfont. And how do you write? newpath, move to wherever you want and (Text) show. Show acts as both a stroke and closepath for text, so if you want to change colors or something, do so before writing.\n /Times-Roman findfont 20 scalefont setfont newpath 200 200 moveto % as the name says, move the cursor to x y 200 0 rlineto % line from actual point toward the right side 0 200 rlineto % the actual point is now in the right side, go up \\-200 0 rlineto % go left 0 -200 rlineto 235 295 moveto (Hi, I\u0026#39;m A Square) show % ta daa A Square closepath stroke showpage  You can rotate, translate or scale your constructs (and if you want to keep your previous transformation safe, issue a gsave before doing anything and a grestore after doing it, this way the initial and final position states are the same). To rotate by 60 degrees our friend A Square, put a 60 rotate command after the first moveto. Also, if you pretended to draw something in the usual orientation, you should issue a gsave before rotating, and a grestore after stroking. This is important!\n /Times-Roman findfont 20 scalefont setfont gsave newpath 200 200 moveto % as the name says, move the cursor to x y 60 rotate 200 0 rlineto % line from actual point toward the right side 0 200 rlineto % the actual point is now in the right side, go up \\-200 0 rlineto % go left 0 -200 rlineto 35 95 rmoveto (Hi, I\u0026#39;m A Square) show % ta daa A Square closepath stroke grestore gsave newpath 0.6 setgray 200 200 moveto 30 rotate 200 0 rlineto 0 200 rlineto \\-200 0 rlineto 0 -200 rlineto 35 95 rmoveto (Hi, I\u0026#39;m A Square) show closepath stroke grestore newpath 0.8 setgray 200 200 moveto 200 0 rlineto 0 200 rlineto \\-200 0 rlineto 0 -200 rlineto 35 95 rmoveto (Hi, I\u0026#39;m A Square) show closepath stroke showpage This starts to get annoying, so let\u0026rsquo;s define a square function, which assumes we are already at a point where we will draw a square of a certain side (the side value will be in the stack).\n/box { dup dup dup % this places 4 instances of the side in the stack 0 rlineto % just one argument, as below we have side x 4 0 exch rlineto % exch swaps the first and second argument neg 0 rlineto % neg changes the sign neg 0 exch rlineto % you guess? } def and this simplifies the gsave-grestore blocks as\ngsave newpath 0.6 setgray 200 200 moveto x rotate 200 box 35 95 rmoveto (Hi, I\u0026#39;m A Square) show closepath stroke grestore dup is a really useful command, which duplicates the topmost item in the stack, you will be using it a lot. And the same goes for exch, which swaps the first and second items. The most useful one, when doing some \u0026ldquo;big\u0026rdquo; code is m n roll‚Ä¶ but it is trickier. As an example, if you have n elements in the stack, and want to move the topmost to the bottom (shifting), you should n 1 roll. If instead you want to shift to the other side, n n-1 roll. Have a look at how it works in some references below if you need anything harder, but these two are almost all there is to it. neg, together with add sub mul and div form the core arithmetic structure.\nPS of course has a number of flow control structures. The simplest, is repeat. As a simple example, 3 {dup} repeat would result in the first line in our box operator. Enclosing something in braces lets PS know it is a set of instructions, by the way.\nThe for loop is by far the most interesting and the one you (well, at least me) will be using more often. Its syntax is initial increment final {what to do} for.\nfor puts the counter at the topmost of the stack, so if you want to have a named variable corresponding to the counter, the first line in the for block should be /n exch def. Later on in the final samples I will show some nested for constructs for more entertainment value.\nFor conditionals, you have if and ifelse. They are quite straightforward, condition {true procedure} {false procedure} ifelse and if it were an if, dont write a false procedure.\nI think that this is almost all needed to start with PostScript.\nNow, the \u0026ldquo;hard\u0026rdquo; examples. Click to go to a gist with the code!\n Mandelbrot set\n   Koch\u0026rsquo;s island.\n  And some references\n Wikipedia article L-systems in PostScript A PostScript web-server A first guide to PostScript PostScript Language Reference (Red book) (if this link stops working, just Google for it, it\u0026rsquo;s freely available from Adobe but the location changes)  If you enjoyed this small tutorial, please share its link with your friends! It would made a difference, PostScript is a wonderful programming language which deserves to be more widely known.\n","permalink":"https://mostlymaths.net/2008/12/quick-postscript-programming-tutorial.html/","tags":["Programming","PostScript"],"title":"Quick PostScript Programming Tutorial"},{"categories":null,"contents":" For about a year I\u0026rsquo;ve been procrastinating a lot, and lately I decided it was time to end. To do so, I kept on procrastinating (avoiding my work) to research the web for causes, cures and pitfalls in this \u0026ldquo;disease\u0026rdquo;. In the following entry I\u0026rsquo;ll tell you everything I\u0026rsquo;ve learned (slightly condensed), hope it serves you too. Keep in mind it is a long post, bookmark it now if you can\u0026rsquo;t keep reading for this long (or use it to avoid working for about half an hour :) I will only cover the aspects of causes (and related cures) and related time management systems, but for now I will skip motivation, leaving it for another post, as I\u0026rsquo;m still thinking about it.\n1. Causes and Cures\n[](http://www2.blogger.com/post-create.g?blogID=13497321#SatisfDist)[](http://www2.blogger.com/post-create.g?blogID=13497321#SatisfDist)[](http://www2.blogger.com/post-create.g?blogID=13497321#SatisfDist)[--1.1 Satisfaction vs distance](http://www2.blogger.com/post-create.g?blogID=13497321#SatisfDist)\n--1.2 Fear of success \u0026amp; fear of change\n--1.3 Fear of failure\n--1.4 Wasting time and the procrastination cycle\n--1.5 Self-discipline and attention problems\n-\u0026mdash;1.5.1 How to train your attention/concentration[](http://www2.blogger.com/post-create.g?blogID=13497321#Perfectionism)\n--1.6 Perfectionism\n--1.7 Lack of motivation\n--1.8 Negative thoughts\n--1.9 E-mail/browsing addiction\n2. Time management\n--2.1 Start strong\n--2.2 Set mail time, browsing time\n--2.3 (10+2)*5\n--2.4 Periodic alarms\n--2.5 Can\u0026rsquo;t avoid enjoyment?\n--2.6 Don\u0026rsquo;t stop me now\n3. What has worked best (for me) so far\n4. Software\nCauses and cures Satisfaction vs distance For what I\u0026rsquo;ve seen, and felt, the first and foremost cause for procrastination is a search for immediate satisfaction. Our sense of satisfaction is more or less like our vision\u0026hellip; The Empire State Building from 1 kilometer looks as big as a mobile phone from 1 meter, but obviously the former is a lot bigger than the latter. Surfing the web is a little satisfying, but can be done NOW, but finishing your work (thesis, in my case) is a lot of satisfaction in a few years.\nDealing with this is maybe the hardest, that\u0026rsquo;s why I start with it. Even after I think I\u0026rsquo;ve stopped avoiding work (still not cured yet) this is what keeps me surfing, and not proving theorems. This is a self-feeding behavior, I mean, the more you do the things that keep you happy now, the more you will keep doing it, and avoiding your real, big and important goals.\nA reasonable way to give this up is to consider what you are avoiding (a really big project, a job move\u0026hellip; whatever) and think about what the worst outcome could be. Visualize it in your mind, even write on a paper about it. Take your time. And now do the same thing, but with the best possible outcome. Be as thorough as possible, you need to feel as if you are already done.\nYou have to feel as if you are about to have this done, and plan how to do it. Later I\u0026rsquo;ll talk about planning big projects. Now, this image of our success brings another interesting and related subject.\nFear of success \u0026amp; fear of change I think I hear you muttering \u0026ldquo;Don\u0026rsquo;t you mean fear of failure?\u0026rdquo;. No, I don\u0026rsquo;t mean fear of failure, but later I will have something to say about it. Fear of success happens, and is usually what hides is being afraid of change. Success brings change: more responsibility, a new job, a different job, a new place, new colleagues.\nFear of change is difficult to deal with, and in my experience, visualization and trying to do what you are afraid of as often as you can help with it. Visualize what you are afraid of, the new situation that puts you down until it is no more new, no more a change. And every time you can do something new, do it, keep training for changes.\nFear of failure The causes for fear of failure are diverse, and depend mostly on the situation. You may be afraid of looking like an ignorant, or not keeping up to the expectations you gave. These are really heavy burdens to carry, and keep us from doing the really big projects we have.\nA possible solution is\u0026hellip; well, failing. Do some things in your life expecting to fail, and keep doing it until you don\u0026rsquo;t feel like you are being judged but what you are not able to do. Or try something new, something you know you can\u0026rsquo;t do. It may be hard to do so, but hard problems have no easy solutions.\nAlways remember that everybody fails sometimes, and by learning from your failures is how you will get better.\nWasting time and the procrastination cycle Wake up, shower, turn on computer, take some coffee, read your mail, your news feed\u0026hellip; you start to feel dizzy, with a fog-like feeling in your brain\u0026hellip;start browsing\u0026hellip; Damn, dinner time? Where has my morning gone? Have you ever felt like this? This keeps happening day after day, getting you in a downward spiral where you procrastinate, realize you haven\u0026rsquo;t done anything useful, get depressed, and procrastinate again.\nTo get out of this cycle, you have to rebuild your self-confidence. To do so, pick a small project and finish it. Then repeat this a few times. No matter how small it is (it has to be a project and not just a task). This way we get confident of getting something done and also build up our self-discipline.\nSelf-discipline and attention problems I feel these two abilities are closely related. They are like a muscle, without proper training they fade, until you can\u0026rsquo;t hold anything. Training your self-discipline, needs a little discipline and commitment.\nTo get the most of your starting self-discipline, try to attain new habits. Different studies have suggested that a new habit is picked up after repeating a patter for 21 to 30 days. Pick your time, I use 21 days whereas Steve Pavlina suggests 30 days. Do as you feel. As you try to adopt this new habit you can also feel its benefits or drawbacks, this way you can stop if you don\u0026rsquo;t want to keep with it. Like a 21 days free-to-try. Our first habit to attain could be (to kill two birds with one stone) training our attention daily.\nHow to train your attention/concentration? Training your attention is easy, but requires quite a lot of work. Here are some of the most standard exercises:\n Mentally count words in a book. Start with something easy like a paragraph and check, then make it harder counting a whole page, chapter\u0026hellip; Count backwards in your head (if you find it too easy, count backwards in 3\u0026rsquo;s or 4\u0026rsquo;s, or whatever). Practice some form of meditation. Pick something you do quite often (maybe writing by hand, or with a computer) and try to be as attentive as possible of what you are doing. Try to make your writing clearer and cleaner, or type as swiftly and consciously as you can.  Perfectionism Being a perfectionist may be a good thing\u0026hellip; but can lead to elaborate and perfect solutions which never get done. \u0026ldquo;Too difficult. Why bother? I have found a solution\u0026rdquo;. And then the deadline arrives and you carry just a small part of your perfect plan. Acknowledging this problem is the first step\u0026hellip; the next is choosing which way to take. A perfect and beautiful solution, or looking for a not so perfect but also not so difficult solution? My best bet would be to just take the hard but good solution and stick with it. The results will then come.\nLack of motivation A great deal has been written about motivation (external, internal, boosting\u0026hellip; what not!) and how to motivate yourself. Switching your job for one you like more, fighting your task as if it was your worst enemy and should be defeated, overcoming our limitations, looking at the task from the best and worst outcomes, etc. In short, you should seek your own motivation, or what motivates you. And when you find it, stick with it. More about this in a post to come.\nNegative thoughts Overcoming negative attitudes will help with our overall habits. It is essential to break the cycle procrastination-depression. And to break it, you should start doing some work. We may also change our thoughts, and words which link us\n Change \u0026ldquo;I have to\u0026rdquo; with \u0026ldquo;I would like to\u0026rdquo;. Change \u0026ldquo;Finish something\u0026rdquo; with \u0026ldquo;Start something\u0026rdquo;.  This changes have to be as sudden as possible, its nonsensical to try to do it step by step. It will get us nowhere.\nE-mail/browsing addiction These are usually the results of procrastinating, not the causes. By avoiding them you will be almost forced to do some work. The easiest way to avoid them is just being completely centered in your objectives, but at first this isn\u0026rsquo;t enough. You need some kind of time management that allows you to do work and avoid work, although it may sound silly.\nTime management\nStart strong Start your day (either at home or at the office) doing some work for at least half an hour straight. This is by far what has helped me the most. Don\u0026rsquo;t read your mail, or idle browse the net until at least one hour of work. I will talk more about this later, as it has been the best for me.\nSet mail time, browsing time Set a minimum work time before checking e-mail. I work for an hour before opening my mail account (unless I am waiting for some urgent thing, I just open, look for answer and read NO mail unrelated to it) in the morning and in the afternoon. Also try to avoid idle-browsing but you can set some week time for it. I use to do it at night before going to sleep.\n(10+2)¬∑5 Our goal is to work exclusively and with our full attention on one of the items of our today list, for 10 minutes, and then do whatever you want for 2 minutes. Now repeat, taking the next item in your list. When we are starting it is better not to skip breaks, but soon you will be so immersed in your work that you won\u0026rsquo;t be able to stop.\nFound in 43Folders.\nPeriodic alarms Set a periodic alarm (a bell, or something not really disturbing) to start after 15 or 20 minutes. Each time it sounds we must consider what we are doing (is it work? is it wasting time?) and then center ourselves in work. I don\u0026rsquo;t really recommend this, as can be disturbing when you are \u0026ldquo;flowing\u0026rdquo; with what you are doing.\nCan\u0026rsquo;t avoid enjoyment? If we need so much enjoyment and playing, one solution may be to make a weekly schedule (Sunday afternoon is a good moment) and set time for every pleasing, playful and enjoyable thing you can do. Set also time for doing \u0026ldquo;nothing\u0026rdquo;. After one day, or maybe less we will feel like we don\u0026rsquo;t have time to work, and strangely enough, we will be craving for work.\nDon\u0026rsquo;t stop me now The best, but hardest way to be the most productive, without paying attention to what you want to do is \u0026ldquo;never stop\u0026rdquo;. Be prepared with a heavy to-do list, with a lot of things to be done. To get this list, break big projects into small projects, and small into tiny. And at the start of what you consider your work day, just keep doing things in that list (lunch time is not considered work time). At the end of the day you will feel exhausted, but also will have the feeling of a really successful day.\nThis solution, as good as it is has some drawbacks. Doing this is very tiresome, and getting a really big to-do list is hard. One way to solve this is keep always a notebook (small one) with you, with different pages, corresponding to different times. As an example, the 10 minute page,\nthe 30 minute page. In each one you write down the tasks you seriously think you can accomplish in this amount of time. Now, every time you run out of work, consider what amount of time do you have, take the corresponding (or closest) page and do one thing from the list. Just\nnever, ever stop. Clean the room, organize your mail, do phone calls. Anything.\nWhat has worked best (for me) so far To start strong in the morning at home, plan what you will be doing today. Take a piece of paper, your agenda, your PDA and write everything work-related and leisure related. You may write \u0026ldquo;Correct pages 1 and 2 of X\u0026rdquo; and \u0026ldquo;Play one game of Y\u0026rdquo;. It is better to write clearly what you will do, do not write \u0026ldquo;Correct some pages of X\u0026rdquo;, be precise of what your aim is. Do not under or over estimate what you can do in a day. Also, keep time for mail and browsing, but keep them from eating your day.\nAlso, setting one don\u0026rsquo;t stop me day, helps when you seem to be unable to start. Make a huge list and the next available day crush it.\nMeditating is a great help\u0026hellip; athough it doesn\u0026rsquo;t seem so while you are doing it. Meditating every day helps to be focused all day long, keeping your mind centered in what you want to do.\nSoftware A few programs have helped me (at least a little) to just work. I list the two I use most, but will add more later.\n Think (Mac only): Just keep your eyes in your work. As a side note, Cmd-Alt-D hides the dock. 3-2-1 (Mac widget): A simple timer for Mac\u0026rsquo;s.   Feel free to comment, and I\u0026rsquo;ll try to add any feedback to the corresponding sections. If you have read this far, thank you.\n","permalink":"https://mostlymaths.net/2008/10/procrastination-causes-and-cures.html/","tags":["Productivity"],"title":"Procrastination: Causes and cures"},{"categories":null,"contents":"In Catalan, we have a curious expression, \u0026ldquo;fer dissabte\u0026rdquo;, which could be translated as do the Saturday, or make Saturday as I have in the title. It describes what one should do every Saturday, as we did last Saturday: clean up the house. It took us 4 straight hours, from 11:30 to 15:30. Really tiring, but the results are great :)\nClean more often!\n","permalink":"https://mostlymaths.net/2008/09/make-saturday.html/","tags":null,"title":"\"Make saturday\""},{"categories":null,"contents":"After trying different methods to add \u0026ldquo;Digg this\u0026rdquo;, \u0026ldquo;Stumble this!\u0026rdquo; and similar buttons, I\u0026rsquo;ve decided that MyFolia\u0026rsquo;s approach is the best.\n\nThis neat bookmarks appear in the far bottom of every post, and allow to bookmark the current post in any of these websites (Digg, Reddit, del.icio.us, Facebook, technorati, Google and StumbleUpon). With autocompletion of the url and title, sure.\nTo add this code to your blogger blog:\n Go to layout settings, and select edit HTML Select \u0026lsquo;Expand widgets\u0026rsquo; Search in the text box for the string:\n Just below this line paste the following:\n   \n\n\n\n\n\n\n Save your template and enjoy your possible visitors.\nPS: To convert huge html code to \u0026ldquo;blogger pastable\u0026rdquo; code to write a post like this one, you can use this.\n","permalink":"https://mostlymaths.net/2008/09/social-bookmarking-in-blogger.html/","tags":["Blog"],"title":"Social bookmarking in blogger"},{"categories":null,"contents":"If you are printing a lot of‚Ä¶ well, anything, sure you would love to make booklets out of what you print. If you happen to be a mathematician, you sure are printing lots of papers with more than 20 pages, which turn to 10 unmanageable pages when double-sided. But making a booklet allows you to turn them to just a little folded thing that you can read easier.\nWhen printing in MacOSX you can print booklets, but they are supposed to be cut, not folded across as you would do to bind a book. But there is a clean solution using LaTeX to print your A4 booklets (and even your A6 booklets!) The LaTeX package pdfpages lets you make the booklets you\u0026rsquo;ve always loved. You\u0026rsquo;ll need a .tex file with the following content:\n\\\\documentclass\\[a4paper\\]{article} \\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\usepackage\\[final\\]{pdfpages} \\\\begin{document} \\\\includepdf\\[pages=-,nup=1x2,landscape,signature= explain later\\]{complete path to your pdf file} \\\\end{document} If you take a look to a nearby book, you\u0026rsquo;ll see that it is formed by a certain number of packages which consist of folded pages. The signature is the number of pages you want to have in each package, and must be a multiple of 4. This said, if you just have something small (around 40 or 50 pages) you can ignore this setting and set it as a multiple of 4 which exceeds the number of pages (32 is a good guess). I set usually this to 32, unless what I print is between 32 and 64 pages, then I adjust for the largest multiple of 4. If I\u0026rsquo;m doing something more like a book, I\u0026rsquo;ll go for 44, as in my tutorial Easy Paperback Bookbinding How-to.\nFill in the gaps, and compile with pdflatex to get a nice pdf booklet.\nIf you happen to be also an Emacs junkie (and know something about Emacs Lisp), below you can find a function definition. If not, be sure to check related posts for some other interesting (maybe!) things.\n(defun Booklet (NumPag) (interactive \u0026#34;sNumP√†g:\u0026#34;) (let ((bookletprev (buffer-file-name (current-buffer)))) (set-buffer (find-file \u0026#34;/Users/YourUser/Documents/Booklets.tex\u0026#34;)) (erase-buffer) (insert (concat \u0026#34;\\\\\\\\documentclass\\[a4paper\\]{article} \\\\\\\\usepackage\\[pdftex\\]{color,graphicx,epsfig} \\\\\\\\usepackage\\[final\\]{pdfpages} \\\\\\\\begin{document} \\\\\\\\includepdf\\[pages=-,nup=1x2,landscape,signature= \u0026#34; (number-to-string (\\* (/ (+ 1 (string-to-number NumPag)) 4) 4)) \u0026#34;\\]{\u0026#34; (substring bookletprev 0 (- (length bookletprev) 4)) \u0026#34;.pdf} \\\\\\\\end{document} \u0026#34;))) (tex-pdf-mode) (save-buffer) ;(tex-run-command \u0026#34;LaTeX\u0026#34;)) I have this function assigned to C-M-b. It takes the current buffer (which should be a PDF document with no blank spaces in its name) and asks for the number of pages, rounding up to a multiple of 4. It creates a new file /Users/YourUser/Documents/Booklets.tex (you should edit this to match your tastes) ready to be compiled by pdflatex.\n","permalink":"https://mostlymaths.net/2008/09/latex-booklets.html/","tags":["emacs","LaTeX","Maths"],"title":"How to create LaTeX booklets"},{"categories":null,"contents":"This is a recipe my grandfather used to make for me (and my cousins) when I was a child. Hopeyou like it as much as I liked it, and enjoy making fun figures and then eating them.\n\nWhat you will need\n 3 eggs, 3 tablespoons of olive oil, 3 tablespoons of sugar, grated lemon skin (clean it before grating), or something to add flavour,\n 1 tablespoon baking powder,\n white flour,\n sunflower oil or some similar light oil for deep frying.\n  Mix all the ingredients, and keep adding flour and mixing until the dough is firm and only just a little sticky. If you have ever made your own pasta, you should aim for the same kind of stickiness. Form doughnuts, or dough-men, or whatever. Heat about 1 inch of oil in a deep pan (enough oil to cover one doughnut) and fry them, one or two each time. Wait until soft brown, and turn them a few times to let them cook well.\n\nBeware of burning them. Anyway, tastes great.\nPlace them in a deep plate with some paper towels. After a few minutes they will look dry, not oily. While they are still oily, sprinkle some sugar over them (this way it keeps from falling). If you enjoyed this recipe, leave a comment to tell me how did it turn, give a thumbs up, digg or whatever you feel like doing, it will be a kind of homage to my grandpa. Share and enjoy!\n\nRelated posts:ParseList(ScrambleList(Relateds(Cooking, Plants)))\n","permalink":"https://mostlymaths.net/2008/09/my-grandpas-doughnuts.html/","tags":["Cooking"],"title":"My grandpa's doughnuts"},{"categories":null,"contents":"Name one great asset to your cupboard. One you can put in a pizza, in almost every salad, you can make omelets out of it, can put over a toast and could be a side dish to almost every meal you can think of. Well, sun dried tomatoes come close to it. Tasty, nice and they smell as good you get hungry just opening the jar. Well, they are really easy to do at home, with just your oven! This way you can put just the salt you want, the herbs you want, and get them as dry as you want. And of course, eat them as often as you want.\nFirst thing first, what you will need\n Oven, of course. Should be able to go as low as 100¬∫C (around 200¬∫F), Tomatoes, any kind (for this particular post, I got medium sized yellow tomatoes, next time I will use cherry tomatoes), Thyme (I guess they can be also good with basil, try if you don\u0026rsquo;t have thyme and let me know), Ground pepper,\n Salt (coarse grained, better),\n Olive oil (plenty of it!),\n A relatively big oven pan to put your tomatoes in. Get one which is deep enough to allow space for the olive oil,\n At least 4 hours you can have your oven running (depends on the size of the tomato)\n  The first step, is clean thoroughly the tomatoes with water, and then cut them in halves. Now put these halves in the pan, sprinkle liberally salt, thyme and pepper over each one of the halves and pour olive oil over them.\n\nNow put in your oven with 100¬∫C (around 200¬∫F). While they are drying, your oven will get wet in the inside. I opened and cleaned it every hour, to avoid dropping water in the kitchen.\n\nBe prepared, they will take a lot of time. Mine took 5 hours, and weren\u0026rsquo;t completely dried. But I like them this way, they taste really good and get very well over a toast. I think with cherry tomatoes you can stop after 3 or 4 hours. When they start to wrinkle, they are ready to take. The longer you wait, the drier they are.\n\nNow, here they are. Let them cool for 10 or 15 minutes before jarring them. You can put them in a zip-lock bag in the freezer (they will last for months, even years), or in a tightly sealed jar in the fridge as I did. To do so, pour in the oil in the pan and add oil until they are covered\n\nBeware, olive oil gets solid in the fridge. I didn\u0026rsquo;t believe it\u0026hellip; until I did this and after one day it got solid white. After 3 hours at ambient temperature it returned to its usual state. Eat them in less than a week.\nIf you prefer to conserve them in your cupboard, use a sterilized jar with tight sealing. Put in your tomatoes and add olive just until the top. Close it (some oil will drop when you close) and double-boil the jar completely. This way the can last for months, but after you open your jar, put it in the fridge and eat in about a week.\nRelated posts:ParseList(ScrambleList(Relateds(Cooking, Plants)))\n","permalink":"https://mostlymaths.net/2008/09/oven-dried-tomatoes.html/","tags":["Cooking"],"title":"Oven dried tomatoes"},{"categories":null,"contents":"Today I read through Slashdot an article from the NY Times, where they show a correlation between number of good-level research articles and consumption of beer in the Czech Republic. More beer, less articles. It is still unclear if just bad (czech) scientists drown their sorrows in beer (not all of them, of course), and there are also a lot of counterexamples. Just a bizarre article.\nThis made me think of a former article I read there, talking about student-advisor (as a side note, adviser and advisor are both accepted in English, amazing) problems. It is an interesting read, and when the time comes, you can just e-mail it to your advisor. Just to tell him \u0026ldquo;Hey, I\u0026rsquo;m still sane, but give me a break\u0026rdquo;. In it a few real stories are given, where advisors are killed or threatened by their students.\n","permalink":"https://mostlymaths.net/2008/03/nytimes.html/","tags":["Bizarre"],"title":"NYTimes"},{"categories":null,"contents":"Browsing old posts in Origami Tessellations, I found out about Joel Cooper\u0026rsquo;s origami masks. Here are a few examples taken from these two web pages.\n \nThey are really amazing\u0026hellip; I hope I can learn how to do that. I\u0026rsquo;ll have to start learning something about origami tessellations, which is a thing I\u0026rsquo;ve always skipped.\n","permalink":"https://mostlymaths.net/2008/03/origami-masks.html/","tags":["Origami"],"title":"Origami masks"},{"categories":null,"contents":"\nJapanese painter.\n","permalink":"https://mostlymaths.net/2008/03/kaii-higashiyama.html/","tags":["Drawing"],"title":"Kaii Higashiyama"},{"categories":null,"contents":"This weekend I bought three books:\nBill Evans: How My Heart Sings (Bill Evans: Vida y Obra), Martian Chronicles, by Ray Bradbury (Cr√≥nicas Marcianas) and The Lebanese Cookbook (a spanish edition). I have already finished Bradbury\u0026rsquo;s, I enjoyed it a lot. A masterpiece in science-fiction. In one of its short stories there is a poem by Lord Byron:\n So we\u0026rsquo;ll go no more a roving\nso late into the night\nThough the heart be still as loving\nAnd the moon be still as bright.\nFor the sword outwears the sheath,\nAnd the soul wears out the breast,\nAnd the heart must pause to breathe,\nAnd Love itself have rest.\nThough the night was made for loving,\nAnd the day returns too soon,\nYet we\u0026rsquo;ll go no more a roving\nBy the light of the moon.\n A beautiful one, by the way.\n","permalink":"https://mostlymaths.net/2008/03/weekend-buy.html/","tags":["Music","Books"],"title":"Weekend, buy"},{"categories":null,"contents":"A few years ago, I was looking after some song lyrics (don\u0026rsquo;t remember exactly which song they belong to), and went into some of these web\u0026rsquo;s that give you \u0026ldquo;you may also like this\u0026rdquo; links. Well, I looked into the lyrics of \u0026ldquo;For Crying Out Loud\u0026rdquo;, by Meat Loaf (who I hadn\u0026rsquo;t heard about, ever). This are the lyrics, and as almost all Steinman\u0026rsquo;s-Meat Loaf songs, they are quite long. Just read the first few verses if you don\u0026rsquo;t feel like reading:\n I was lost till you were found\nBut I never knew how far down\nI was falling\nBefore I reached the bottom\nI was cold and you were fire\nAnd I never knew how the pyre\nCould be burning\nOn the edge of the ice field\nAnd the now chilly california wind\nIs blowing down our bodies again\nAnd were sinking deeper and deeper into the chilly California sand\nOh I know you belong inside my aching heart\nAnd cant you see my faded Levis bursting apart\nAnd dont you hear me crying:\nOh babe, dont go\nAnd dont you hear me screaming:\nHow was I to know?\nIm in the middle of nowhere\nNear the end of the line\nBut there\u0026rsquo;s a border to somewhere waiting\nAnd theres a tankful of time\nOh give me just another moment to see the light of the day\nAnd take me to another land where I dont have to stay\nAnd I\u0026rsquo;m gonna need somebody to make me feel like you do\nAnd I will receive somebody with open arms, open eyes,\nOpen up the sky and let the planet that I love shine through\nFor crying out loud\nYou know I love you\nFor crying out loud\nYou know I love you\nFor crying out loud\nYou know I love you\nI was damned and you were saved\nAnd I never knew how enslaved\nI was kneeling\nIn the chains of my master\nI could laugh but you could cry\nAnd I never knew just how high\nI was flying\nAh, with you right above me\nIm in the middle of nowhere\nNear the end of the line\nBut theres a border to somewhere waiting\nAnd theres a tankful of time\nOh give me just another moment to see the light of the day\nAnd take me to another land where I dont have to stay\nAnd Im gonna need somebody to make me feel like you do\nAnd I will receive somebody with open arms, open eyes,\nOpen up the sky and let the planet that I love shine through\nFor crying out loud\nYou know I love you\nFor crying out loud\nYou know I love your\nFor crying out loud\nYou know I love you\nFor taking in the rain when Im feeling so dry\nFor giving me the answers when Im asking you why\nAnd my oh my\nFor that I thank you\nFor taking in the sun when Im feeling so cold\nFor giving me a child when my body is old\nAnd dont you know\nFor that I need you\nFor coming to my room when you know Im alone\nFor finding me a highway and driving me home\nAnd you gotta know\nFor that I serve you\nFor pulling me away when Im starting to fall\nFor revving me up when Im starting to stall\nAnd all in all\nFor that I want you\nFor taking and for giving and for playing the game\nFor praying for my future in the days that remain\nOh lord\nFor that I hold you\nAh but most of all\nFor cryin out loud\nFor that I love you\nAh but most of all\nFor cryin out loud\nFor that I love you\nAh but most of all\nFor cryin out loud\nFor that I love you\nWhen youre crying out loud\nYou know I love you\n It starts as a quiet ballad with only vocal and piano, for the first \u0026ldquo;section\u0026rdquo;, then guitar and drums get in, and for the last few verses just vocals. The second section is by far the best of this song. Listen to it if you can (just look it up at Youtube).\nI listened to it, liked it an thought \u0026ldquo;Well, let\u0026rsquo;s listen to the whole album\u0026rdquo;. I listened to it, but mostly didn\u0026rsquo;t like it. Too long songs, maybe? But after more and more re-listenings, I started enjoying it. It features 7 songs, totalling about 50 minutes. It features a mixture of some kind of epic rock (Steinman wrote a musical called Das Rheingold\u0026hellip; based upon a Wagner\u0026rsquo;s opera) with quite exhilarating lyrics, where teenage (and not so) emotional commitments are developed. As a few examples:\nFrom the chorus in Two Out Of Three Ain\u0026rsquo;t Bad:\n And all I can do is keep on telling you\nI want you\nI need you\nBut there ain\u0026rsquo;t no way\nI\u0026rsquo;m ever gonna love you\nNow don\u0026rsquo;t be sad\n\u0026lsquo;Cause two out of three ain\u0026rsquo;t bad\n Sad, but relatively funny. This is from Paradise By The Dashboard Light, a duet. This song is about a teenage couple, in their car, night, alone\u0026hellip; you know. This is from the first \u0026ldquo;act\u0026rdquo;, where they are parking, and starting things\n Ain\u0026rsquo;t no doubt about it we were doubly blessed\n\u0026lsquo;Cause we were barely seventeen\nAnd we were barely dressed\n The intermediate section is the broadcast of a baseball game, using the baseball metaphore (about sex). For the last section, the girl asks several times whether he will love her forever, and never leave her, while the boy answers \u0026ldquo;let me sleep on it, I\u0026rsquo;ll give you an answer in the morning\u0026rdquo;. The singing goes quicker until a climax is reached,\n I couldn\u0026rsquo;t take it any longer\nLord I was crazed\nAnd when the feeling came upon me\nLike a tidal wave\nI started swearing to my god\nAnd on my mother\u0026rsquo;s grave\nThat I would love you to the end of time\nI swore I would love you to the end of time\nSo now I\u0026rsquo;m praying for the end of time\nTo hurry up and arrive\n\u0026lsquo;Cause if I gotta spend another minute with you\nI don\u0026rsquo;t think that I can really survive\nI\u0026rsquo;ll never break my promise or forget my vow\nBut God only knows what I can do right now\nI\u0026rsquo;m praying for the end of time\nSo I can end my time with you\n Hope you get it. Loaf and Steinman had a lot of trouble to get this album published, but in time it has proven as quite a best seller. Nowadays it sells 200.000 copies-a-year, and has sold more than 30 million copies.\nA year or so ago, I was having my breakfast where I usually do, they have a large LCD screen with MTV turned on. I was chewing my croissant and reading \u0026ldquo;La Vanguardia\u0026rdquo;, when the voice I heard was somewhat familiar. I looked and saw a man which resembled Meat Loaf. This was Bat Out Of Hell III, and the song I was listening to was It\u0026rsquo;s All Coming Back To Me Now. Written, of course by Jim Steinman, recorded a few years ago by C√©line Dion. A genuine power ballad with, as usual, quite expressive lyrics. Don\u0026rsquo;t miss it when you go to YouTube. By the way, Steinman also wrote a song I like, Total Eclipse Of The Heart (Bonnie Tyler, she had performed it with Loaf as a duet).\nAs a final note, these are the lyrics of \u0026ldquo;You Took The Words Out Of My Mouth\u0026rdquo;. Possibly one of the best verses for a chorus I\u0026rsquo;ve ever heard:\n [Spoken:]\n[Boy:] On a hot summer night,\nwould you offer your throat to the wolf with the red roses?\n[Girl:] Will he offer me his mouth?\n[Boy:] Yes.\n[Girl:] Will he offer me his teeth?\n[Boy:] Yes.\n[Girl:] Will he offer me his jaws?\n[Boy:] Yes.\n[Girl:] Will he offer me his hunger?\n[Boy:] Yes.\n[Girl:] Again, will he offer me his hunger?\n[Boy:] Yes!\n[Girl:] And does he love me?\n[Boy:] Yes.\n[Girl:] Yes.\n[Boy:] On a hot summer night,\nwould you offer your throat to the wolf with the red roses?\n[Girl:] Yes.\n[Boy:] I bet you say that to all the boys!\n[Sung:]\nIt was a hot summer night\nand the beach was burning.\nThere was fog crawling over the sand.\nWhen I listen to your heart\nI hear the whole world turning.\nI see the shooting stars falling\nthrough your trembling hands.\nYou were licking your lips\nand your lipstick shining.\nI was dying just to ask for a taste.\nWe were lying together in a silver lining\nby the the light of the moon.\nYou know there\u0026rsquo;s not another moment\nNot another moment\nNot another moment to waste.\nYou hold me so close that my knees grow weak.\nBut my soul is flying high above the ground.\nI\u0026rsquo;m trying to speak but no matter what I do\nI just can\u0026rsquo;t seem to make any sound.\nAnd then you took the words right out of my mouth.\nOh it must have been while you were kissing me.\nYou took the words right out of my mouth.\nAnd I swear it\u0026rsquo;s true,\nI was just about to say I love you.\nAnd then you took the words right out of my mouth.\nOh it must have been while you were kissing me.\nYou took the words right out of my mouth.\nAnd I swear it\u0026rsquo;s true,\nI was just about to say I love you.\nNow my body is shaking like a wave on the water\nAnd I guess that I\u0026rsquo;m beginning to grin.\nOh we\u0026rsquo;re finally alone and we can do what we want to.\nThe night is young\nAnd Ain\u0026rsquo;t no-one gonna know where you\nNo-one gonna know where you\nNo-one\u0026rsquo;s gonna know where you\u0026rsquo;ve been.\nYou were licking your lips\nand your lipstick shining.\nI was dying just to ask for a taste.\nWe were lying together in a silver lining\nby the the light of the moon.\nYou know there\u0026rsquo;s not another moment\nNot another moment\nNot another moment to waste.\nAnd then you took the words right out of my mouth.\nOh it must have been while you were kissing me.\nYou took the words right out of my mouth.\nAnd I swear it\u0026rsquo;s true,\nI was just about to say I love you.\nAnd then you took the words right out of my mouth.\nOh it must have been while you were kissing me.\nYou took the words right out of my mouth.\nAnd I swear it\u0026rsquo;s true,\nI was just about to say I love you.\n ","permalink":"https://mostlymaths.net/2008/02/meat-loaf-and-jim-steinman.html/","tags":["Music"],"title":"Meat Loaf (and Jim Steinman)"},{"categories":null,"contents":"\n\n\nKamiya Satoshi\u0026rsquo;s Pegasus, folded from a square from A4 standard paper (21x21 cm square). The model is about 8 cm long. Satoshi suggests 25x25 paper, which obviously must be thinner than 80g/m^2. But the model itself is wonderful, although my rendition of may not be worth of it.\nPS: Shame on me, for not rendering the head as it must be done (√† la Dave Brill\u0026rsquo;s horse). Well, next time, with bigger paper :)\n","permalink":"https://mostlymaths.net/2008/02/satoshis-pegasus.html/","tags":["Origami"],"title":"Satoshi's Pegasus"},{"categories":null,"contents":"\nTwo context-free grammars for a Merry Christmas. Rendered with Context Free\n","permalink":"https://mostlymaths.net/2007/12/merry-christmas.html/","tags":["Christmas","Maths"],"title":"Merry Christmas"},{"categories":null,"contents":"As you may already know, I enjoy a lot drawing. I usually draw with some kind of mechanical pencil, of HB strength (or one for film writing which is stronger than 3H). As I try to improve the quality of my drawings, I begin to wonder if I really like to draw really well. Yes, I\u0026rsquo;d like to be able to draw perfect faces, but probably I\u0026rsquo;ll be as happy being able to sketch a face that looks like the original one. And this is my point, I prefer sketching than drawing. This morning I finished some work and decided to take some rest (about an hour or so). I tried to sketch Harrison Ford\u0026rsquo;s face in Blade Runner\u0026rsquo;s cover (yesterday I drawed it with pencil but the face doesn\u0026rsquo;t really look like his). It didn\u0026rsquo;t work out. I used one side of lined paper I had to dispose, and then I decided to sketch a landscape on the other (written!) side. This is the result:\n\nSketch\n[](http://4.bp.blogspot.com/_f3d3llNlZKQ/R16Gtl5dkhI/AAAAAAAAAMk/nDNbCi7vTlM/s1600-h/SketchBegetGran.jpg)\n\nBeget (Alta Garrotxa, Girona, Catalunya)\nI enjoyed it a lot more than if I had just drawn exactly and laid perfect shadows and tones. Quick and fun. By the way, the used pen is a blue Pilot V Ball (a pen I dislike as a writing instrument but that it\u0026rsquo;s relatively OK for drawing) over some writing in a red pen of the same family.\n\nI\u0026rsquo;ve redrawn it in my sketchbook, with pencil.\n","permalink":"https://mostlymaths.net/2007/12/sketching.html/","tags":["Origami","Drawing"],"title":"Sketching"},{"categories":null,"contents":"\nWhat could I say about this movie? Definitely the best science fiction film of all time. A funny sentence Leon said Deckard before dying:\nLeon:\nMy birthday is April 10, 2017. How long do I live?\nDeckard:\nFour years.\nLeon:\nMore than you. Painful to live in fear, isn\u0026rsquo;t it? Nothing is worse than having an itch you can never scratch.\nDeckard:\nOh, I agree.\nLeon:\nWake up! Time to die.\n","permalink":"https://mostlymaths.net/2007/12/blade-runner.html/","tags":["Movies"],"title":"Blade Runner"},{"categories":null,"contents":"A month or so ago I went to Cafes El Magn√≠fico (sadly doesn\u0026rsquo;t work with Firefox), a nice coffee dealer near the cathedral to buy me some good coffee. Cristina wanted also some tea, and in front of C.E.M there is Sans \u0026amp; Sans Fine Tea, so it is the perfect place for us. I bought 250g of coffee from Java, an island in Indonesia. They told me it is good with milk and also alone, and indeed it is.\n \nI have used it to make me some turkish coffee. The procedure is easy, and the result can be really good.\n Grind the coffee several times, as it must be the finer the better. Put 2 and a half cups of cold mineral water in a narrow and tall heater (the taller and narrower the better, the best would be a cevze) Add 2 and a half teaspoons of sugar and stir it well.\n Add the coffee to the water, spreading it evenly over the surface of the water.\n Heat slowly.\n When it starts to foam, stop the stove and stir carefully to keep some foam.\n Heat again until foaming starts, stop the stove and stir again.\n Repeat one last time.\n Wait 30 seconds for the coffee to settle.\n Take some foam with a spoon and put it on each cup, add then some coffee to them keeping in mind that you can\u0026rsquo;t put all (as there is a lot of mold at the bottom).\n  The (blurred) result:\n\n","permalink":"https://mostlymaths.net/2007/11/turkish-coffee-from-java.html/","tags":["Coffee"],"title":"Turkish coffee from Java"},{"categories":null,"contents":"From 5 November to 9 November took place the (second) Fall School in Holomorphic Dynamics. Three fine speakers came (Walter Bergweiler, Agnieszka Badenska and Kari Astala), each one giving a course about a different topic in 3 sessions of one hour and a half. The only course I completed was the one Walter was giving, as it was the most interesting for me.\nI talked on monday afternoon, but my talk was a mess. I rushed through it in 10 minuts, when my alloted time was of 25\u0026hellip; It was the same talk I gave on September as my Master\u0026rsquo;s thesis (i.e. DEA) defense, so I knew too well what I was talking about. And THIS was the problem, I saw it too easily. Next time I\u0026rsquo;ll write a new set of slides every time.\n","permalink":"https://mostlymaths.net/2007/11/fall-school.html/","tags":["Maths"],"title":"Fall School"},{"categories":null,"contents":"This blog was started on this day, and was written in Catalan until mid-2007. On August 22nd, 2019 I moved from Blogger, my original blogging platform to GitHub pages. Since the readership has shifted to English speakers and the interest of the early posts is low (also, I had to port the posts to another format..) I deleted a great deal (around 350, out of the 670 I had at migration time) of the earliest posts. But, I wanted to keep the start date, for the memories.\n","permalink":"https://mostlymaths.net/2005/06/times-a-changing.html/","tags":[],"title":"Times a changin'"},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\`\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\`\nEdit fuse.js options to Search static/js/search.js ` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\`\n","permalink":"https://mostlymaths.net/search/","tags":null,"title":"Search"}]