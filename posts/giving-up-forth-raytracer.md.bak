---
title: 'Giving up the Forth raytracer'
date: 2010-05-12T16:00:00.000+02:00
draft: false
tags : [Programming, Forth, LISP]
---

Today, while I was thinking of the best implementation solution for the vector operations, I realised that I am just not motivated by writing a raytracer in Forth. I'll have to find something more interesting, or at least, more Forth minded to work on.  
  
If I want to raytrace, better to improve the Lisp raytracer, which is sitting idly in my Code/Lisp folder. Steps that will follow in the raytracer path:  

1.  Code commenting: I almost forgot how the main loop was rolled
2.  Performance: ditch temporary image matrices and output straight RGB data. This means no antialiasing, out of the box without some tweaking. But I can tweak that with Monte Carlo methods
3.  New objects: Where are my triangles? I only have spheres. I need triangles, and triangle meshes.
4.  Triangle mesh importer: from a nice ASCII format generated by some open source program  
    
5.  Transparency: My previous version had it, this new one, does not.

With respect to Forth, [I asked the question on Reddit#Forth](http://www.reddit.com/r/Forth/comments/c2hlb/i_want_ideas_on_a_project_i_can_code_to_learn/), and from the answers, I'll probably switch the [Logical maze generator/solver](http://www.mostlymaths.net/2010/05/my-take-on-logical-mazes-part-1.html) into a Forth program (looking at my code, maybe it is better suited to it, even), with an incorporated player. Then, if it is nice and playable, I can write a small JavaScript Forth interpreter (or even easier, use just some kind of intermediate layer to translate Forth into JavaScript) to be able to play it on a webpage.  
  
If you have any other suggestion for a Forth project, leave a comment here or in Reddit. Thanks!  

  
Related posts:  
![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) [9 programming books I have read and somewhat liked...](http://www.mostlymaths.net/2010/04/9-programming-books-i-have-read-and.html)  
![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) [C code juicer: detecting copied programming assignments](http://berenguel.blogspot.com/2009/12/c-code-juicer.html)  
![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) [Cron, diff & wget: Watch changes in a webpage](http://berenguel.blogspot.com/2010/01/cron-diff-wget-watch-changes-in-webpage.html)  
![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) [8 reasons for re-inventing the wheel as a programmer](http://www.mostlymaths.net/2010/03/8-reasons-for-re-inventing-wheel-as.html)  
![](http://3.bp.blogspot.com/_f3d3llNlZKQ/S-VA4aF2G1I/AAAAAAAACT8/41SMm6kvdqs/s00/favicon.png) [Approximating images with randomly placed translucent triangles](http://www.mostlymaths.net/2010/04/approximating-images-with-randomly.html)  
ParseList(ScrambleList(Relateds(Programming)),4)
