---
title: "Multiline shebang with zsh and running pyenv under cron"
date: 2020-06-03T22:30:33+02:00
draft: false
dropcap: true
affiliate: false
featured_image: "hashsign.jpg"
tags : [Linux,  Mac, Python]
---

These probably qualify as the most _one weird trick_ I have figured out this year.

<!--more-->

## Multiline shebang

Basically this is an answer to _how can I configure configure the Python environment in the shebang_? Like, say, to start a virtual environment. You can find many examples with [bash](https://rosettacode.org/wiki/Multiline_shebang#Python) here. But, how do you use it with zsh? And what it is?

{{< figure src="hashsign.jpg" class="fig-wide" caption="Photo by Jan Baborák on Unsplash">}}

It is text after a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) expression in a script that is run by zsh, while eventually running the rest of the code. It feels a bit like a [quine](https://en.m.wikipedia.org/wiki/Quine_(computing)).

I faced this when writing my own provider script for [Tip](https://github.com/tanin47/tip) (a very recommended small app for Mac). Although it may not be required, but was fun as a problem to crack. The issue was twofold: I needed to run it under `zsh` _and_ I wanted to run my script under a virtual environment.

```bash
#!/usr/local/bin/zsh
"""true"
source /Users/ruben/.pyenvzshrc
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
pyenv activate tip-provider
exec python "$0" "$@"
exit 127
"""

__doc__ = "Script for https://github.com/tanin47/tip"

[…python code in here…]
```

What is this? First, this is going to be executed as a `zsh` script. So, we have

### ZSH sees

1. an empty string, 
2. a string containing true, which evaluates via expansion to `true`, inside quotes, so, another empty string.
3. Now some normal shell commands, load some scripts to prepare an environment. This `.pyenvzshrc` is a reduced `.zsh` without any configuration and just there so `pyenv` works as expected.
4. Disable the painful notification from `pyenv`
5. Runs python (the _python_ from the correct environment), on this script itself with the same arguments
6. Exit! This is important! This way nothing else is seen by `zsh`. It has to exit in error to prevent the shell seeing the rest.

### Python sees

1. A commented line (shebang)
2. A triple-quoted string, which is then automatically added as the module docstring
3. Modification of the docstring for consistency
4. The rest

Neat, isn't it? (_not_)

## Running `pyenv` in cron

This is a repeated issue I have faced: running things under cron fails for… shell reasons. I wanted to run [bear-note-graph](https://github.com/rberenguel/bear-note-graph) regularly, to always have my note graph fresh on iCloud. The goal is similar to the previous: running Python in a specific virtual environment. 

Luckily, this is easier (although a bit slower):

```bash
#!/usr/local/bin/zsh
source /Users/ruben/.zshrc
pyenv activate bear-note-graph || true >/tmp/bear_graph_tmp_stdout.log 2>/tmp/bear_graph_tmp_stderr.log
bear-note-graph >>/tmp/bear_graph_tmp_stdout.log 2>>/tmp/bear_graph_tmp_stderr.log
mv /tmp/bear_graph* /Users/ruben/Library/Mobile\ Documents/com\~apple\~CloudDocs/
```

1. Screw it and just evaluate the `.zshrc` file! (this could be changed with the modified one in the previous script)
2. Activate the virtual environment, and redirect any errors to create output files
3. Run `bear-note-graph` with default settings (I wrote this, so the defaults are the setup I like)
4. Copy the results from `/tmp/` to iCloud's root

## Conclusion

Well, not much. These are interesting tricks that I want to remember, hence why I wrote this post.

Note that the first one is specific for `zsh`, other shells behave slightly differently. For the second, likewise, the main issue is how to start `pyenv` in a way that works.
